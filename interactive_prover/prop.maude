---- Propositional Logic: its grammar and check-sat.

fmod PROP is
  protecting NAT .
  sort Prop .
  
  op propVar : Nat -> Prop [ctor] .
  ops _propAnd_ _propOr_ _propIff_ : Prop Prop -> Prop [ctor assoc comm] .
  op _propImplies_ : Prop Prop -> Prop [ctor] .
  op propNot_ : Prop -> Prop [ctor] .
  ops propTrue propFalse : -> Prop [ctor] .
  
  vars P Q : Prop . vars M N : Nat . var B : Bool .
  
  ---- Simplification Rules
  eq propTrue propAnd P = P . eq propFalse propAnd P = propFalse .
  eq propTrue propOr P = propTrue . eq propFalse propOr P = P .
  eq propTrue propIff P = P . eq propFalse propIff P = propNot P .
  eq propTrue propImplies P = P . eq propFalse propImplies P = propTrue .
  eq P propImplies propTrue = propTrue . eq P propImplies propFalse = propNot P .
  eq propNot propNot P = P . 
  eq propNot propTrue = propFalse . eq propNot propFalse = propTrue .

  ---- Satisfiability checking
  op satQ : Prop -> Bool .  
  eq satQ(propTrue) = true .
  eq satQ(propFalse) = false .
  eq satQ(P) = satQ(P[pickVar(P) |-> true]) 
            or satQ(P[pickVar(P) |-> false]) [owise] .
  ---- Validity checking
  op validQ : Prop -> Bool .
  eq validQ(P) = not satQ(propNot P) .
  
  ---- Picking a variable (if there is any)
  op pickVar : Prop -> Nat .
  eq pickVar(propVar(N)) = N .
  eq pickVar(P propAnd Q) = pickVar(P) .
  eq pickVar(P propOr Q) = pickVar(P) .
  eq pickVar(P propIff Q) = pickVar(P) .
  eq pickVar(P propImplies Q) = pickVar(P) .
  eq pickVar(propNot P) = pickVar(P) .
  
  ---- Partial Evaluation
  op _[_|->_] : Prop Nat Bool -> Prop .
  eq propTrue[N |-> B] = propTrue .
  eq propFalse[N |-> B] = propFalse .
  eq propVar(N)[N |-> true] = propTrue . 
  eq propVar(N)[N |-> false] = propFalse .
  eq propVar(M)[N |-> B] = propVar(M) [owise] .
  eq (P propAnd Q)[N |-> B] = (P[N |-> B]) propAnd (Q[N |-> B]) .
  eq (P propOr Q)[N |-> B] = (P[N |-> B]) propOr (Q[N |-> B]) .
  eq (P propIff Q)[N |-> B] = (P[N |-> B]) propIff (Q[N |-> B]) .
  eq (P propImplies Q)[N |-> B] = (P[N |-> B]) propImplies (Q[N |-> B]) .
  eq (propNot P)[N |-> B] = propNot (P[N |-> B]) .

endfm
