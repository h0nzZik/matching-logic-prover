----------------------------------------------------------
---- An Interactive Theorem Prover for Matching Logic ----
------------ Xiaohong Chen <xc3@illinois.edu> ------------
---------------- Last Update on April 17 -----------------
----------------------------------------------------------

---- This file contains modules that incrementally build an interactive
---- prover for matching logic [1]. 
---- [1] Grigore Rosu, Matching Logic - Extended Abstract, 
----     26th International Conference on Rewriting Techniques
----     and Applications (RTA 2015).

--------------------------------------------------------------
---- Module PAT0: The grammar of matching logic patterns. ----
--------------------------------------------------------------

fmod PAT0 is

  protecting INT .
  protecting META-LEVEL .
  
  sort Pat .      ---- Matching logic patterns.
  sort PatList .  ---- ","-separated lists of patterns.
  sort PatMSet .  ---- "."-separated multiset of patterns.
  sort Sot .      ---- Matching logic sorts. 
  sort SotList .  ---- ","-separated list of sorts.

  subsort Pat < PatList .
  op .PatList : -> PatList [ctor] . ---- The empty list.
  op _,_ : PatList PatList -> PatList [ctor assoc id: .PatList prec 60] .

  subsort Pat < PatMSet .
  op .PatMSet : -> PatMSet [ctor] . ---- The empty multiset.
  op _._ : PatMSet PatMSet -> PatMSet [ctor assoc comm id: .PatMSet prec 60] .

  subsort Sot < SotList .
  op .SotList : -> SotList [ctor] . ---- The empty list.
  op _,_ : SotList SotList -> SotList [ctor assoc id: .SotList prec 60] .

  vars P Q : Pat . vars Ps Qs : PatList . vars PSet QSet : PatMSet .
  var S : Sot .

  op getSot : PatList -> SotList . 
  eq getSot(.PatList) = .SotList .
  eq getSot(P, Ps) = getSot(P), getSot(Ps) [owise] . 

  ---------------------------------
  ---- Matching logic grammar. ----
  ---------------------------------

  --------------------
  ---- Variables. ----
  --------------------
  
  ---- Matching logic variables are natural numbers (starting off from zero).
  ---- Variables have their sorts.
  ---- The namespace for (free) variables are increased within binding contexts.
  ---- This is called "de Brujin indices" and is often used to avoid
  ---- alpha-renaming bound variables.
  
  op {_,_} : Nat Sot -> Pat [ctor] . ---- Construct a matching logic variable.
  eq getSot({K:Nat,S}) = S .

  ---------------------------------------
  ---- Proposition Logic Connectives ----
  ---------------------------------------
  
  ---- Logic connectives requires all its operands have the same sort. 
  ---- This is always assumed and will *not* be checked.

  op ~_ : Pat -> Pat [ctor prec 51] .                    ---- "not"
  eq getSot(~ P) = getSot(P) .
  
  op _/\_ : Pat Pat -> Pat [ctor assoc comm prec 52] .   ---- "and"
  eq getSot(P /\ Q) = getSot(P) .

  op _\/_ : Pat Pat -> Pat [ctor assoc comm prec 53] .   ---- "or"
  eq getSot(P \/ Q) = getSot(P) .  
  
  op _->_ : Pat Pat -> Pat [ctor gather (e E) prec 54] . ---- "implies"
  eq getSot(P -> Q) = getSot(P) .

  op _<->_ : Pat Pat -> Pat [ctor comm prec 55] .        ---- "iff"
  eq getSot(P <-> Q) = getSot(P) .
  
  ------------------------
  ---- Quantification ----
  ------------------------
  
  ---- No binding variables is needed because we are using de Brujin indices.
  
  ops forall_ exists_ : Pat -> Pat [ctor prec 56] .
  eq getSot(forall P) = getSot(P) .
  eq getSot(exists P) = getSot(P) .

  ----------------------------
  ---- Symbol Application ----
  ----------------------------
  
  ---- We divide symbols into four categories. Such a division is only for
  ---- an efficient implementation, and has nothing to do with the maths.
  
  ---- (1) Uninterpreted symbols (UI-symbols) are "free" matching logic
  ----     symbols who may have some or none axioms about them.
  ----     If a symbol does not lie into any of the next categories, then
  ----     it is an uninterpreted symbol.
  
  ---- (2) Associative symbols (A-symbols) are binary symbols F who
  ----     has the associativity axiom: F(X,F(Y,Z)) = F(F(X,Y),Z).
  ----     We use the Maude term F(X,Y,Z) to represent F(X,F(Y,Z)).
  
  ---- (3) Associative-commutative symbols (AC-symbols) are binary symbols F
  ----     who has not only the associativity axiom, but also the
  ----     commutative axiom F(X,Y) = F(Y,X).
  ----     We use the Maude term F(X . Y . Z) to represent F(X,F(Y,Z)).
  
  ---- (4) Unconstrained symbols (UC-symbols) are symbols F who has the
  ----     injection axiom F(X1,X2,...) = F(Y1,Y2,...) iff Xi = Yi for all i.
  
  sort UISym . ---- Uninterpreted matching logic symbols.
  op getArgSotList : UISym -> SotList . ---- Get argument sorts of the symbol.
  op getResultSot : UISym -> Sot . ---- Get result sort of the symbol.

  sort ASym .  ---- Associative symbols
  op getSot : ASym -> Sot . 

  sort ACSym . ---- Associative-commutative-symbols 
  op getSot : ACSym -> Sot .
 
  sort UCSym . ---- Unconstrained symbols (constructors or labels).
  op getArgSotList : UCSym -> SotList .
  op getResultSot : UCSym -> Sot . 
  
  var F : UISym . var F_a : ASym . var F_ac : ACSym . var F_uc : UCSym .
  
  ---- Uninterpreted symbols require the correct number of arguments with
  ---- correct sorts.
  ---- This is always assumed and will not be checked.
  
  op _(_) : UISym PatList -> Pat [ctor] .
  eq getSot(F(Ps)) = getResultSot(F) .
  op _() : UISym -> Pat . ---- Syntactic sugar for constant symbols.
  eq F() = F(.PatList) . 
  
  ---- Associative symbols require a list of arguments with the same sort,
  ---- and returns a pattern with the same sort.
  ---- This is always assumed and will not be checked.
  
  op _(_) : ASym PatList -> Pat [ctor] .
  eq getSot(F_a(Ps)) = getSot(F_a) .
  
  ---- Associative-Commutative symbols require a multiset of arguements with
  ---- the same sort, and returns a pattern with the same sort.
  ---- This is always assumed and will not be checked.
  
  op _(_) : ACSym PatMSet -> Pat [ctor] .
  eq getSot(F_ac(PSet)) = getSot(F_ac) .
  
  ---- Unconstrained symbols require the correct number of arguments with
  ---- correct sorts.
  ---- This is always assumed and will not be checked.
  
  op _(_) : UCSym PatList -> Pat [ctor] .
  eq getSot(F_uc(Ps)) = getResultSot(F_uc) .
  op _() : UCSym -> Pat . ---- Syntactic sugar for constant symbols.
  eq F_uc() = F_uc(.PatList) . 
  
  ----------------------------
  ---- Definedness Symbol ----
  ----------------------------
  
  op definedness{_} : Sot -> UISym .
  eq getResultSot(definedness{S}) = S .
  
  ---- TOTHINK: Shall we really make a distinction between
  ---- definesness (see line 152) and floor (see line 162) ?
  
  --------------------
  ---- Predicates ----
  --------------------
  
  op floor{_}(_) : Sot Pat -> Pat [ctor] .
  eq getSot(floor{S}(P)) = S .

  op ceil{_}(_) : Sot Pat -> Pat [ctor] .
  eq getSot(ceil{S}(P)) = S .

  op _={_}_ : Pat Sot Pat -> Pat [ctor format(d d d d d s d)] .
  eq getSot(P ={S} Q) = S .

  op _subset{_}_ : Pat Sot Pat -> Pat [ctor format(d d d d d s d)] .
  eq getSot(P subset{S} Q) = S .

  op _in{_}_ : Pat Sot Pat -> Pat [format(d d d d d s d)] .
  eq P in{S} Q = P subset{S} Q .

  op top{_} : Sot -> Pat [ctor] .
  eq getSot(top{S}) = S .

  op bot{_} : Sot -> Pat [ctor] .
  eq getSot(bot{S}) = S .
  
  ------------------------------------------------
  ---- Built-ins sorts, values and operations ----
  ------------------------------------------------
  
  ---- General domain values ----
  
  ---- The operator domain-value takes two arguments and returns a pattern.
  ---- The first argument is a string representation of the value.
  ---- The second argument is a matching logic sort, who will be the sort
  ---- of the value. 
  ---- For example, the following are some possible ways to represent
  ---- the integer 3 as a domain value.
  ---- (*) domain-value("42", MLNat), 
  ----       where "42" is a Maude term of sort String.
  ---- (*) domain-value("101010", MLNat), 
  ----       where "101010" is a Maude term of sort String.
  ---- (*) domain-value("0x2A", MLNat),
  ----       where "0x2A" is a Maude term of sort String.
  
  protecting STRING .
  protecting CONVERSION .
  
  op domain-value : String Sot -> Pat .
  eq getSot(domain-value(S:String, S:Sot)) = S:Sot .
  
  ----------------------------------
  ---- Built-in natural numbers ----
  ----------------------------------
  
  op MLNat : -> Sot [ctor] .
  
  op plus : -> ACSym [ctor] .
  eq getSot(plus) = MLNat .
  eq plus(plus(PSet) . QSet) = plus(PSet . QSet) . ---- flatterning
  
  ---- Adding two decimal integers.
  
  vars Str1 Str2 : String .
  
  eq plus(domain-value(Str1, MLNat) . domain-value(Str2, MLNat))
   = domain-value(string((rat(Str1, 10)) + (rat(Str2, 10)), 10), 
       MLNat) .
  
endfm

-----------------------------------------------------------
---- Module PAT1: Substitution with de Brujin indices. ----
-----------------------------------------------------------

fmod PAT1 is

  protecting PAT0 .
  
  vars P P' Q R : Pat . var Ps : PatList . var PSet : PatMSet . 
  vars S S' : Sot .
  var F : UISym . var F_a : ASym . var F_ac : ACSym . var F_uc : UCSym .
  vars K K' J C D : Nat . 
   
  ------------------------------
  ---- Main delivery: subst ----
  ------------------------------
  
  ---- Substitute a pattern for a variable: subst(P, J, R) is P[J := R].
  op subst : Pat Nat Pat -> Pat . 
  
  ---- Substitute a pattern for a pattern: subst(P, Q, R) is P[replace Q for R].
  op subst : Pat Pat Pat -> PatList . 
  
  op subst : PatList Nat Pat -> PatList . ---- substitute a list of patterns.
  op subst : PatList Pat Pat -> PatList . ---- substitute a list of patterns.
  op subst : PatMSet Nat Pat -> PatList . ---- substitute a mset of patterns.
  op subst : PatMSet Pat Pat -> PatList . ---- substitute a mset of patterns.
  
  ---- Helper function: shift(P, delta-place, cutoff).
  op shift : Pat Nat Nat -> Pat .
  op shift : PatList Nat Nat -> PatList .
  op shift : PatMSet Nat Nat -> PatMSet .
  
  ---- On a list of patterns.
  eq subst(.PatList, J, R) = .PatList .
  eq subst(.PatList, Q, R) = .PatList .
  eq shift(.PatList, D, C) = .PatList .
  eq subst((P, Ps), J, R) = subst(P, J, R), subst(Ps, J, R) [owise] .
  eq subst((P, Ps), Q, R) = subst(P, Q, R), subst(Ps, Q, R) [owise] .
  eq shift((P, Ps), D, C) = shift(P, D, C), shift(Ps, D, C) [owise] .
  
  ---- On a multiset of patterns.
  eq subst(.PatMSet, J, R) = .PatMSet .
  eq subst(.PatMSet, Q, R) = .PatMSet .
  eq shift(.PatMSet, D, C) = .PatMSet .
  eq subst((P . PSet), J, R) = subst(P, J, R) . subst(PSet, J, R) [owise] .
  eq subst((P . PSet), Q, R) = subst(P, Q, R) . subst(PSet, Q, R) [owise] .
  eq shift((P . PSet), D, C) = shift(P, D, C) . shift(PSet, D, C) [owise] .

  eq shift({K,S}, D, C) = if K < C then {K,S} else {K + D,S} fi .
  eq shift(P /\ Q, D, C) = shift(P, D, C) /\ shift(Q, D, C) .
  eq shift(P \/ Q, D, C) = shift(P, D, C) \/ shift(Q, D, C) .
  eq shift(P -> Q, D, C) = shift(P, D, C) -> shift(Q, D, C) .
  eq shift(P <-> Q, D, C) = shift(P, D, C) <-> shift(Q, D, C) .
  eq shift(~ P, D, C) = ~ shift(P, D, C) .
  eq shift(forall P, D, C) = forall shift(P, D, C + 1) .
  eq shift(exists P, D, C) = exists shift(P, D, C + 1) .
  eq shift(F(Ps), D, C) = F(shift(Ps, D, C)) .
  eq shift(F_a(Ps), D, C) = F_a(shift(Ps, D, C)) .
  eq shift(F_ac(PSet), D, C) = F_ac(shift(PSet, D, C)) .
  eq shift(F_uc(Ps), D, C) = F_uc(shift(Ps, D, C)) .
  eq shift(floor{S}(P), D, C) = floor{S}(shift(P, D, C)) .
  eq shift(ceil{S}(P), D, C) = ceil{S}(shift(P, D, C)) .
  eq shift(P ={S} Q, D, C) = shift(P, D, C) ={S} shift(Q, D, C) .
  eq shift(P subset{S} Q, D, C) = shift(P, D, C) subset{S} shift(Q, D, C) .
  eq shift(P, D, C) = P . ---- P is either top, bot, or domain-value.
  
  ---- Substitute for a variable.
  eq subst({K,S}, J, R) = if K == J then R else {K,S} fi .
  eq subst(P /\ Q, J, R) = subst(P, J, R) /\ subst(Q, J, R) .
  eq subst(P \/ Q, J, R) = subst(P, J, R) \/ subst(Q, J, R) .
  eq subst(P -> Q, J, R) = subst(P, J, R) -> subst(Q, J, R) .
  eq subst(P <-> Q, J, R) = subst(P, J, R) <-> subst(Q, J, R) .
  eq subst(~ P, J, R) = ~ subst(P, J, R) .
  eq subst(forall P, J, R) = forall subst(P, J + 1, shift(R, 1, 0)) .
  eq subst(exists P, J, R) = exists subst(P, J + 1, shift(R, 1, 0)) .
  eq subst(F(Ps), J, R) = F(subst(Ps, J, R)) .
  eq subst(F_a(Ps), J, R) = F_a(subst(Ps, J, R)) .
  eq subst(F_ac(PSet), J, R) = F_ac(subst(PSet, J, R)) .
  eq subst(F_uc(Ps), J, R) = F_uc(subst(Ps, J, R)) .
  eq subst(floor{S}(P), J, R) = floor{S}(subst(P, J, R)) .
  eq subst(ceil{S}(P), J, R) = ceil{S}(subst(P, J, R)) .
  eq subst(P ={S} Q, J, R) = subst(P, J, R) ={S} subst(Q, J, R) .
  eq subst(P subset{S} Q, J, R) = subst(P, J, R) subset{S} subst(Q, J, R) .
  eq subst(P, J, R) = P . ---- P is either top, bot, or domain-value.
  
  ---- Substitute for a pattern.
  ---- The following code is taking advantage of the fact that
  ---- Maude tries to apply rules in order (top to bottom).
  eq subst(Q, Q, R) = R .
  eq subst(P /\ P', Q, R) = subst(P, Q, R) /\ subst(P', Q, R) .
  eq subst(P \/ P', Q, R) = subst(P, Q, R) \/ subst(P', Q, R) .
  eq subst(P -> P', Q, R) = subst(P, Q, R) -> subst(P', Q, R) .
  eq subst(P <-> P', Q, R) = subst(P, Q, R) <-> subst(P', Q, R) .
  eq subst(~ P, Q, R) = ~ subst(P, Q, R) .
  eq subst(forall P, Q, R) = forall subst(P, shift(Q, 1, 0), shift(R, 1, 0)) .
  eq subst(exists P, Q, R) = exists subst(P, shift(Q, 1, 0), shift(R, 1, 0)) .
  eq subst(F(Ps), Q, R) = F(subst(Ps, Q, R)) .
  eq subst(F_a(Ps), Q, R) = F_a(subst(Ps, Q, R)) .
  eq subst(F_ac(PSet), Q, R) = F_ac(subst(PSet, Q, R)) .
  eq subst(F_uc(Ps), Q, R) = F_uc(subst(Ps, Q, R)) .
  eq subst(floor{S}(P), Q, R) = floor{S}(subst(P, Q, R)) .
  eq subst(ceil{S}(P), Q, R) = ceil{S}(subst(P, Q, R)) .
  eq subst(P ={S} P', Q, R) = subst(P, Q, R) ={S} subst(P', Q, R) .
  eq subst(P subset{S} P', Q, R) = subst(P, Q, R) subset{S} subst(P', Q, R) .
  eq subst(P, Q, R) = P . ---- P is either top, bot, or domain-value.

endfm


























