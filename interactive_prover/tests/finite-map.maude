load finite-sequence .

fmod FINITE-MAP is

  protecting MATCHING-LOGIC .
  protecting NICE-SYNTAX-SURFACE .
  protecting FINITE-SEQUENCE .
  
  op Map : -> MLSort .
  eq Map = #sort("Map") .
  
  op emp : -> Pattern .
  eq emp = #symbol("emp", .MLSortList, Map)() .
  
  ops mapsto mapstoseq merge list : -> Symbol .
  eq mapsto = #symbol("mapsto", (Nat, Nat), Map) .
  eq mapstoseq = #symbol("mapstoseq", (Nat, Seq), Map) .
  eq merge = #symbol("merge", (Map, Map), Map) .
  eq list = #symbol("list", (Nat, Seq), Map) .
  
  vars P Q : Pattern .
  
  op _|->_ : Pattern Pattern -> Pattern .
  eq P |-> Q
   = if getSort(Q) == Nat
     then mapsto(P, Q)
     else if getSort(Q) == Seq
     then mapstoseq(P, Q)
     else P |-> Q
          fi
     fi .
  
  op _*_ : Pattern Pattern -> Pattern .
  eq P * Q = merge(P, Q) .
  
  var H : String .
  
  op _-*_ : Pattern Pattern -> Pattern .
  ceq P -* Q
   = #exists(H, Map, 
     #variable(H, Map) /\ #contains(#variable(H, Map) * P, Q, Map, Map))
  if H := freshName(P, Q) .
  
endfm
