fmod K is

  protecting STRING .

  sorts KSort KSortList . subsort KSort < KSortList .
  op #sort : String -> KSort [ctor] .
  op .KSortList : -> KSortList [ctor] .
  op _,_ : KSortList KSortList -> KSortList [ctor assoc id: .KSort] .

  sort Symbol .
  op #symbol : String KSortList KSort -> Symbol [ctor] .
  
  sorts K KList . subsort K < KList .
  op .KList : -> KList [ctor] .
  op _,_ : KList KList -> KList [ctor assoc id: .K] .

  op #variable : String KSort -> K [ctor] .
  ops #and #or : K K -> K [ctor assoc comm] .
  op #not : K -> K [ctor] .
  ops #top #bot : KSort -> K [ctor] .
  op #implies : K K -> K [ctor assoc comm] .
  ops #exists #forall : String KSort K -> K [ctor] .
  op #application : Symbol KList -> K [ctor] .
  op #value : String KSort -> K [ctor] .

  op getKSort : K -> [KSort] .

  vars X Y : String . var S : KSort .
  vars K K1 K2 K3 : K . var Kl : KList .

---- get sort
  eq getKSort(#variable(X, S)) = S .
  ceq getKSort(#and(K1, K2)) = getKSort(K1)
  if getKSort(K1) = getKSort(K2) .
  ceq getKSort(#or(K1, K2)) = getKSort(K1)
  if getKSort(K1) = getKSort(K2) .
  eq getKSort(#not(K)) = getKSort(K) .
  eq getKSort(#top(S)) = S .
  eq getKSort(#bot(S)) = S .
  ceq getKSort(#implies(K1, K2)) = getKSort(K1)
  if getKSort(K1) = getKSort(K2) .
  eq getKSort(#exists(X, S, K)) = getKSort(K) .
  eq getKSort(#forall(X, S, K)) = getKSort(K) .
  eq getKSort(#application(#symbol(X, L : KSortList, S), Kl)) = S .
  eq getKSort(#value(X, S)) = S .
  
  ---- well formed
  

  
  ---- substitute ?? 
  
  var Ks1 Ks2 Ks3 : KSortList .
  var Kl1 Kl2 Kl3 : KList .
  
  op subst K K K -> K .
  eq subst(#variable(X, S), K, #variable(X, S)) = K .
  eq subst(#variable(Y, S), K, #variable(X, S)) = #variable(Y, S) .
  eq subst(#application(#symbol(Y, L : KSortList, S), (K1, Kl)), K, #variable(X, S)) = 
  subst(#application(#symbol(Y, L : KSortList, S), K1), K, #variable(X, S)), subst(#application(#symbol(Y, L : KSortList, S), Kl), K, #variable(X, S)) .
  eq subst(#not(K1), K, #variable(X, S)) = #not(subst(K1, K, #variable(X, S))) .
  eq subst(#and(K1, K2), K, #variable(X, S)) = #and(subst(K1, K, #variable(X, S)), subst(K2, K, #variable(X, S))) . 
  eq subst(#or(K1, K2), K, #variable(X, S)) = #or(subst(K1, K, #variable(X, S)), subst(K2, K, #variable(X, S))) . 
  eq subst(#implies(K1, K2), K, #variable(X, S)) = #implies(subst(K1, K, #variable(X, S)), subst(K2, K, #variable(X, S))) . 
  eq subst(#exists(Y, S, K1), K, #variable(X, S)) = if K = #variable(Y, S) 
    then subst(#exists(U:String, S, subst(K1, #variable(U, S), #variable(Y, S))), K, #variable(X, S)) 
    else #exists(Y, S, subst(K1, K, #variable(X, S))) fi .
  eq subst(#exists(X, S, K1), K, #variable(X, S)) = #exists(X, S, K1) .
  
  
  
  

endfm

quit

