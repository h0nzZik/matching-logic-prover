fmod K is

  protecting STRING .

  sorts KSort KSortList . subsort KSort < KSortList .
  op #sort : String -> KSort [ctor] .
  op .KSortList : -> KSortList [ctor] .
  op _,_ : KSortList KSortList -> KSortList [ctor assoc id: .KSort] .

  sort Symbol .
  op #symbol : String KSortList KSort -> Symbol [ctor] .
  
  sorts K KList . subsort K < KList .
  op .KList : -> KList [ctor] .
  op _,_ : KList KList -> KList [ctor assoc id: .K] .

  op #variable : String KSort -> K [ctor] .
  ops #and #or : K K -> K [ctor assoc comm] .
  op #not : K -> K [ctor] .
  ops #top #bot : KSort -> K [ctor] .
  op #implies : K K -> K [ctor assoc comm] .
  ops #exists #forall : String KSort K -> K [ctor] .
  op #application : Symbol KList -> K [ctor] .
  op #value : String KSort -> K [ctor] .

  op getKSort : K -> [KSort] .

  vars X Y : String . var S : KSort .
  vars K K1 K2 K3 : K . var Ks : KList .

;get sort
  eq getKSort(#variable(X, S)) = S .
  ceq getKSort(#and(K1, K2)) = getKSort(K1)
  if getKSort(K1) = getKSort(K2) .
  ceq getKSort(#or(K1, K2)) = getKSort(K1)
  if getKSort(K1) = getKSort(K2) .
  eq getKSort(#not(K)) = getKSort(K) .
  eq getKSort(#top(S)) = S .
  eq getKSort(#bot(S)) = S .
  ceq getKSort(#implies(K1, K2)) = getKSort(K1)
  if getKSort(K1) = getKSort(K2) .
  eq getKSort(#exists(X, S, K)) = getKSort(K) .
  eq getKSort(#forall(X, S, K)) = getKSort(K) .
  eq getKSort(#application(#symbol(X, L : KSortList, S), Ks)) = S .
  eq getKSort(#value(X, S)) = S .
  
  ;well formed
  
  var Ks1 Ks2 Ks3 : KSortList .
  var Kl1 Kl2 Kl3 : KList .
  
  ;substitute ?? 
  ceq Ks1,Ks3 = Ks2,Ks3
  if Ks1 = Ks2 .
  ceq Kl1,Kl3 = Kl2,Kl3
  if Kl1 = Kl2 .
  ceq Ks1,Ks2 = Ks1,Ks3
  if Ks2 = Ks3 .
  ceq Kl1,Kl2 = Kl1,Kl3
  if Kl2 = Kl3 .
  ceq #not(K) = #not(K1)
  if K = K1 .
  eq #exists(X, S, K) = #exists(Y, S, K) . ; if Y not in K ?
  eq #forall(X, S, K) = #forall(Y, S, K) . ; ?
  eq #application(#symbol(X, L : KSortList, S), Ks) = #application(#symbol(Y, L : KSortList, S), Ks) . ; ?
  ceq #application(#symbol(X, L : KSortList, S), Ks) = #application(#symbol(X, L : KSortList, S), Kl1) 
  if getKSort(Ks) = getKSort(Kl1) . ; ?
  
  

endfm

quit

