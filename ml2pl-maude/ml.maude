--- ml2pl-Transformation
--- from many-sorted matching logic to unsorted first-order logic.

fmod ML is
  including QID .

  sorts Var Pat PatLst Sym Sot SotLst .

  --- A quoted identifier and a sort is a variable.
  op _:_ : Qid Sot -> Var .

  --- A comma-separated list of sorts, with .SotLst as the empty list.
  subsort Sot < SotLst . op .SotLst : -> SotLst .
  op _,_ : SotLst SotLst -> SotLst [assoc id: .SotLst] .

  --- A comma-separated list of patterns, with .PatLst as the empty list.
  subsort Pat < PatLst . op .PatLst : -> PatLst .
  op _,_ : PatLst PatLst -> PatLst [assoc id: .PatLst] .

  --- A symbol has domain sorts and range sort.
  op domSorts : Sym -> SotLst .
  op ranSort : Sym -> Sot .

  --- A pattern has a sort.
  --- Ill-formed patterns have the kind [Sot] .
  op getSort : Pat -> [Sot] . op getSort : PatLst -> SotLst .
  eq getSort(.PatLst) = .SotLst .
  eq getSort(P:Pat, Ps:PatLst) = getSort(P:Pat), getSort(Ps:PatLst) [owise] .

  --- The grammar for patterns.
  subsort Var < Pat .
     eq getSort(ID:Qid : S:Sot) = S:Sot .

  op _/\_ : Pat Pat -> Pat [assoc comm] .
     ceq getSort(P:Pat /\ Q:Pat) = getSort(P:Pat) 
     if getSort(P:Pat) == getSort(Q:Pat) .
  
  op _\/_ : Pat Pat -> Pat [assoc comm] .
     ceq getSort(P:Pat /\ Q:Pat) = getSort(P:Pat) 
     if getSort(P:Pat) == getSort(Q:Pat) .

  op ~_ : Pat -> Pat .
     eq getSort(~ P:Pat) = getSort(P:Pat) .

  op _->_ : Pat Pat -> Pat .
     ceq getSort(P:Pat /\ Q:Pat) = getSort(P:Pat) 
     if getSort(P:Pat) == getSort(Q:Pat) .

  op exists_._ : Var Pat -> Pat .
     eq getSort(exists X:Var . P:Pat) = getSort(P:Pat) .

  op forall_._ : Var Pat -> Pat .
     eq getSort(forall X:Var . P:Pat) = getSort(P:Pat) .

  op _={_}_ : Pat Sot Pat -> Pat . 
     ceq getSort(P:Pat ={S:Sot} Q:Pat) = S:Sot
     if getSort(P:Pat) == getSort(Q:Pat) .

  op _(_) : Sym PatLst -> Pat .
     ceq getSort(F:Sym(Ps:PatLst)) = ranSort(F:Sym)
     if getSort(Ps:PatLst) == domSorts(F:Sym) .
  
  op _() : Sym -> Pat . eq F:Sym() = F:Sym(.PatLst) .
  
endfm

fmod PL is
  including ML .

  sorts Variable Formula FormulaList Predicate .
  
  --- A quoted identifier is a variable.
  subsort Qid < Variable .

  --- A comma-separated list of formulas,
  subsort Formula < FormulaList .
  op _,_ : FormulaList FormulaList -> FormulaList [assoc prec 100] .

  --- The grammar for formulas
  subsort Variable < Formula .
  op ~_ : Formula -> Formula .
  op _/\_ : Formula Formula -> Formula [assoc comm] .
  op _\/_ : Formula Formula -> Formula [assoc comm] .
  op _->_ : Formula Formula -> Formula .
  op _<->_ : Formula Formula -> Formula .
  op _=_ : Formula Formula -> Formula .
  op exists_._ : Variable Formula -> Formula .
  op forall_._ : Variable Formula -> Formula .
  --- Sort predicates.
  op _[_] : Sot FormulaList -> Formula .
  --- Symbol predicates.
  op _[_] : Sym FormulaList -> Formula .

endfm

mod ML2PL is
  including PL + ML .
  including CONVERSION .
  including COUNTER .

  --- generate new variables: '$1, '$2, '$3, ...
  op fresh : -> Variable .
  eq fresh = qid("$" + string(counter, 10)) .

  --- convert matching logic variables to variables.
  op Var2Variable : Var -> Variable .
  eq Var2Variable(ID:Qid : S:Sot) = ID:Qid .

  --- FOL model constraint
  --- collect all matching logic variables in a pattern, no matter
  --- free or bound.
  op getVars : Pat -> VarSet . op getVars : PatLst -> VarSet .
  sort VarSet . subsort Var < VarSet . op .VarSet : -> VarSet .
  op _._ : VarSet VarSet -> VarSet [comm assoc id: .VarSet] .
  eq X:Var . X:Var = X:Var .
  eq getVars(X:Var) = X:Var .
  eq getVars(~ P:Pat) = getVars(P:Pat) .
  eq getVars(P:Pat /\ Q:Pat) = getVars(P:Pat) . getVars(Q:Pat) .
  eq getVars(P:Pat \/ Q:Pat) = getVars(P:Pat) . getVars(Q:Pat) .
  eq getVars(P:Pat -> Q:Pat) = getVars(P:Pat) . getVars(Q:Pat) .
  eq getVars(P:Pat ={S:Sot} Q:Pat) = getVars(P:Pat) . getVars(Q:Pat) .
  eq getVars(F:Sym(Ps:PatLst)) = getVars(Ps:PatLst) .
  eq getVars(exists X:Var . P:Pat) = X:Var . getVars(P:Pat) .
  eq getVars(forall X:Var . P:Pat) = X:Var . getVars(P:Pat) .
  eq getVars(.PatLst) = .VarSet .
  eq getVars(P:Pat, Ps:PatLst) = getVars(P:Pat) . getVars(Ps:PatLst) [owise] .

  --- ml2pl transformation.
  op ml2pl : Pat Variable -> Formula .

  vars R R1 R2 : Variable . vars P Q : Pat . var X : Var . var F : Sym .

  --- Think of ml2pl transformation as follows.
  --- pattern (R in P) in matching logic  --ml2pl-->  ml2pl(P, R),
  --- such that any matching logic model of (R in P) induces a
  --- FOL model of ml2pl(P, R), and vice versa.
  --- Therefore, if a model M satisfies (R in P), then it is a
  --- model of (R in P) in matching logic, then there must exists
  --- a FOL model M' that satisfies ml2pl(P, R). This shows that
 ---- (R in P) sat => ml2pl(P, R) sat .
  --- On the other hand, if a model M' satisfies ml2pl(P, R), then
  --- there must exists a matching logic model M'' that satisfies
 ---- (R in P). This shows that ml2pl(P, R) sat => (R in P) sat.
  --- To conclude, we prove that ml2pl(P, R) sat iff (R in P) sat.

  eq ml2pl(X, R) = 
    (getSort(X)[R]) /\
    (getSort(X)[Var2Variable(X)]) /\ 
    (R = Var2Variable(X)) .

  eq ml2pl(P /\ Q, R) = ml2pl(P, R) /\ ml2pl(Q, R) .
  eq ml2pl(P \/ Q, R) = ml2pl(P, R) \/ ml2pl(Q, R) .
  eq ml2pl(~ P, R) = (getSort(P)[R]) /\ (~ ml2pl(P, R)) .
  eq ml2pl(P -> Q, R) = (getSort(P)[R]) /\ (ml2pl(P, R) -> ml2pl(Q, R)) .
  eq ml2pl(exists X . P, R) = 
     (getSort(X)[Var2Variable(X)]) /\
     exists Var2Variable(X) . ml2pl(P, R) .
  eq ml2pl(forall X . P, R) =
     (getSort(X)[Var2Variable(X)]) /\
     forall Var2Variable(X) . ml2pl(P, R) .

  eq ml2pl(F(), R) = (ranSort(F)[R]) /\ (F[R]) .
  
  --- auxiliary functions that "hold" fresh variables.
  op ml2pl1 : Pat Variable Variable -> Formula .
  op ml2pl1 : Pat Variable Variable Variable -> Formula .

  ceq ml2pl1(F(P), R, R1) =
    (ranSort(F)[R]) /\ 
    exists R1 . ((S1:Sot[R1]) /\ ml2pl(P, R1) /\ F[R1, R])
  if S1:Sot := domSorts(F) .

  eq ml2pl(F(P), R) = ml2pl1(F(P), R, fresh) .

 ceq ml2pl1(F(P, Q), R, R1, R2) =
    (ranSort(F)[R]) /\ 
    (S1:Sot[R1]) /\
    (S2:Sot[R2]) /\
    exists R1 . exists R2 . 
       (ml2pl(P, R1) /\ ml2pl(Q, R2) /\ F[R1, R2, R])
  if S1:Sot, S2:Sot := domSorts(F) .

  eq ml2pl(F(P, Q), R) = ml2pl1(F(P, Q), R, fresh, fresh) .

  op ml2pl2 : Pat Variable Variable -> Formula .
  eq ml2pl(P ={S:Sot} Q, R) = ml2pl2(P ={S:Sot} Q, R, fresh) .

    
--- TODO  forall fresh . s(fresh) -> ml2pl(P, fresh) <-> ml2pl(Q, fresh) .

endm

mod MYMOD is
  including ML2PL .
  ops Bol Nat Seq Map : -> Sot .
  ops zero succ plus : -> Sym .
  eq domSorts(zero) = .SotLst . eq ranSort(zero) = Nat .
  eq domSorts(succ) = Nat . eq ranSort(succ) = Nat .
  eq domSorts(plus) = Nat, Nat . eq ranSort(plus) = Nat .
endm
rewrite getVars(forall ('m : Nat) . forall ('n : Nat) . plus(('m : Nat) , ('n : Nat))) .
rewrite ml2pl(forall ('m : Nat) . forall ('n : Nat) . plus(('m : Nat) , ('n : Nat)), '$) .

quit
