mod PRED-LOGIC is
  protecting INT .
  protecting QID .
  sort LogicalVariable Formula Proofee .
  subsort Qid < LogicalVariable < Formula .
  sort State Command Result .

--- Grammar for Logic 
  
  op _->_ : Formula Formula -> Formula .
  op ~_ : Formula -> Formula .

  op {#_:_} : Int Formula -> Proofee .
  op _,_ : Proofee Proofee -> Proofee [assoc comm id: done] .
  op done : -> Proofee .

--- Grammar for Command

  op <_>_==========_ : Int Proofee Command -> Result [format(nn d d n n n nn)].
  op reda_; : Int -> Command .
  op redm_with_; : Int Formula -> Command . 
  op skip : -> Command .
  op __ : Command Command -> Command [assoc id: skip] .

--- Rules

  var P Q R : Formula .
  var RemP : Proofee .
  var C : Command .
  var N M G : Int .

rl   < G > { # N : P -> (Q -> P) } , RemP ========== reda N ; C
=> 
     < G > RemP ========== C .

rl   < G > { # N : (P -> (Q -> R)) -> (( P -> Q ) -> ( P -> R )) } , RemP ========== reda N ; C
=> 
     < G > RemP ========== C .

rl   < G > { # N : ( ~ P -> ~ Q ) -> ( Q -> P ) } , RemP ========== reda N ; C
=> 
     < G > RemP ========== C .

rl   < G > { # N : P } , RemP ========== redm N with Q ; C
=>
     < G + 2 > { # G : Q } , { # G + 1 : Q -> P } , RemP ========== C .
  
endm

rew

< 1 >
{ # 0 : 'P -> 'P }
==========
skip
.


q
