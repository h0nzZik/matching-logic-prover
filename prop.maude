--- This module is a (pseudo) interactive deductive system
--- for propositional logic, which includes three axiom schemas
--- and the modus ponens rule.
--- Last update by Xiaohong on 11 Dec 2016.

mod PRED-LOGIC is
  protecting INT .
  protecting QID .
  sort LogicalVariable Formula Proofee .
  subsort Qid < LogicalVariable < Formula .
  sort State Command Result .

--- Grammar for Logic 
  
  op _->_ : Formula Formula -> Formula .
  op ~_ : Formula -> Formula .

  op {#_:_} : Int Formula -> Proofee .
  op _,_ : Proofee Proofee -> Proofee [assoc comm id: done] .
  op done : -> Proofee .

--- Grammar for Command

--- The "==========" thing is supposed to seperate
--- Proofees apart from Commands.
  op <_>_==========_ : Int Proofee Command -> Result [format(nn d d n n n nn)].

--- Use axioms to reduce one Proofee.
  op ax_; : Int -> Command .

--- Use modus ponens to reduce one Proofee.
  op mp_with_; : Int Formula -> Command . 

  op skip : -> Command .
  op __ : Command Command -> Command [assoc id: skip] .

--- Rules

  var P Q R : Formula .
  var RemP : Proofee .
  var C : Command .
  var N M G : Int .

rl   < G >
     { # N : P -> (Q -> P) } ,
     RemP 
     ==========
     ax N ;
     C
=> 
     < G >
     RemP
     ========== 
     C 
.

rl   < G >
     { # N : (P -> (Q -> R)) -> (( P -> Q ) -> ( P -> R )) } ,
     RemP
     ========== 
     ax N ;
     C
=> 
     < G >
     RemP 
     ========== 
     C 
.

rl   < G > 
     { # N : ( ~ P -> ~ Q ) -> ( Q -> P ) } , 
     RemP 
     ax N ; 
     C
=> 
     < G >
     RemP
     ========== 
     C
.

rl   < G > 
     { # N : P } , 
     RemP
     ========== 
     mp N with Q ; 
     C
=>
     < G + 2 > 
     { # G : Q } , 
     { # G + 1 : Q -> P } , 
     RemP 
     ========== 
     C 
.
  
endm

rewrite

< 1 >
{ # 0 : 'P -> 'P }
==========
mp 0 with 'P -> ('P -> 'P) ;
ax 1 ;
mp 2 with 'P -> (('P -> 'P) -> 'P) ;
ax 3 ;
ax 4 ;
.


quit
