module CHAR

axiom #variable("c",#sort("Char"))

endmodule

module TEST

axiom #variable("c",#sort("Char"))

syntax #Meta ::= isLterm(#Pattern)

axiom #application(#symbol("test",#sort("Nat"),#sort("NatSeq")),#variable("a",#sort("Nat")))

axiom #variable("E'",#sort("Pattern"))

axiom \forall(s:#Sort,#equals(#application(#symbol("isChar",#sort("Char"),#sort("Bool")),#variable("x",#sort("Char"))),#application(#symbol("isChar",#sort("Char"),#sort("Bool")),#variable("v",#sort("Char"))),#sort("Bool"),s:#Sort))

axiom \forall(s:#Sort,#equals(#application(#symbol("isNotChar",#sort("Char"),#sort("Bool")),#variable("x",#sort("Char"))),#variable("y",#sort("Bool")),#sort("Bool"),s:#Sort))

axiom #and(#variable("X",#sort("Bool")),#application(#symbol("hello",#appendSortList(#sort("Bool"),#sort("Bool")), #sort("Float")),#appendPatternList(#variable("X",#sort("Bool")),#application(#symbol("false",#nilSort,#sort("Bool")),#nilPattern))))

axiom #and(#application(#symbol("hello",#appendSortList(#sort("Bool"),#sort("Bool")), #sort("Float")),#appendPatternList(#variable("Y",#sort("Bool")),#application(#symbol("true",#nilSort,#sort("Bool")),#nilPattern))),#variable("Y",#sort("Bool")))

axiom #application(#symbol("tripe_merge",#appendSortList(#sort("Bool"),#appendSortList(#sort("Bool"),#sort("Bool"))), #sort("Map")),#appendPatternList(#variable("X",#sort("Map")),#appendPatternList(#variable("Y",#sort("Map")),#variable("Z",#sort("Map")))))

axiom #exists("X",#sort("Bool"),#application(#symbol("hello",#appendSortList(#sort("Bool"),#sort("Bool")), #sort("Float")),#appendPatternList(#variable("X",#sort("Bool")),#application(#symbol("false",#nilSort,#sort("Bool")),#nilPattern))))

axiom #not(#variable("X",#sort("Bool")))

axiom #not(#and(#variable("X",#sort("Nat")),#not(#variable("Y",#sort("Nat")))))

axiom \forall(s:#Sort,#equals(#exists("X",#sort("Bool"),#application(#symbol("hello",#appendSortList(#sort("Bool"),#sort("Bool")), #sort("Float")),#appendPatternList(#variable("X",#sort("Bool")),#application(#symbol("false",#nilSort,#sort("Bool")),#nilPattern)))),#and(#variable("Y",#sort("Bool")),#variable("Z",#sort("Bool"))),#sort("Float"),s:#Sort))

axiom #application(#symbol("sun",#appendSortList(#sort("Bool"),#sort("Bool")), #sort("Double")),#appendPatternList(#variable("X",#sort("Bool")),#application(#symbol("false",#nilSort,#sort("Bool")),#nilPattern)))

axiom \forall(s:#Sort,#equals(#not(#and(#variable("Y",#sort("Bool")),#variable("Z",#sort("Bool")))),#variable("W",#sort("Bool")),#sort("Bool"),s:#Sort))

axiom #and(metaVar:#Pattern,\forall(s:#Sort,#equals(#sort("Bool"),#getSort(#Pattern),#sort("Bool"),s:#Sort)))

axiom #application(#symbol("hello",#appendSortList(#sort("Bool"),#sort("Bool")), #sort("Float")),#appendPatternList(#and(B1:#Pattern,\forall(s:#Sort,#equals(#sort("Bool"),#getSort(#Pattern),#sort("Bool"),s:#Sort))),#and(B2:#Pattern,\forall(s:#Sort,#equals(#sort("Bool"),#getSort(#Pattern),#sort("Bool"),s:#Sort)))))

axiom [not pattern]: THISISNOTPATTERN


endmodule

module BOOL

axiom #and(#application(#symbol("true",#nilSort,#sort("Bool")),#nilPattern),#application(#symbol("false",#nilSort,#sort("Bool")),#nilPattern))

axiom #exists("X",#sort("Bool"),\forall(s:#Sort,#equals(#variable("X",#sort("Bool")),#application(#symbol("true",#nilSort,#sort("Bool")),#nilPattern),#sort("Bool"),s:#Sort)))

axiom \forall(s:#Sort,#equals(#application(#symbol("andBool",#appendSortList(#sort("Bool"),#sort("Bool")), #sort("Bool")),#appendPatternList(#and(B1:#Pattern,\forall(s:#Sort,#equals(#sort("Bool"),#getSort(#Pattern),#sort("Bool"),s:#Sort))),#and(B2:#Pattern,\forall(s:#Sort,#equals(#sort("Bool"),#getSort(#Pattern),#sort("Bool"),s:#Sort))))),#application(#symbol("andBool",#appendSortList(#sort("Bool"),#sort("Bool")), #sort("Bool")),#appendPatternList(#and(B2:#Pattern,\forall(s:#Sort,#equals(#sort("Bool"),#getSort(#Pattern),#sort("Bool"),s:#Sort))),#and(B1:#Pattern,\forall(s:#Sort,#equals(#sort("Bool"),#getSort(#Pattern),#sort("Bool"),s:#Sort))))),#sort("Bool"),s:#Sort))

endmodule

module LAMBDA

  syntax #Bool ::= isLTerm(#Pattern)

axiom \forall(s:#Sort,#equals(#application(#symbol("isLTerm",#Pattern,#Bool),#variable(X:String,#sort("Exp"))),#application(#symbol("true",#nilSort,#sort("Bool")),#nilPattern),#Bool,s:#Sort))

endmodule
