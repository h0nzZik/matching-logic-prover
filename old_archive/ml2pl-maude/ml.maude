--- ml2pl-Transformation
--- from many-sorted matching logic to unsorted first-order logic.

fmod ML is
  including QID .

  sorts Var Pat PatLst Sym Sot SotLst .

  --- A quoted identifier and a sort is a variable.
  op _:_ : Qid Sot -> Var .

  --- A comma-separated list of sorts, with .SotLst as the empty list.
  subsort Sot < SotLst . op .SotLst : -> SotLst .
  op _,_ : SotLst SotLst -> SotLst [assoc id: .SotLst] .

  --- A comma-separated list of patterns, with .PatLst as the empty list.
  subsort Pat < PatLst . op .PatLst : -> PatLst .
  op _,_ : PatLst PatLst -> PatLst [assoc id: .PatLst] .

  --- A symbol has domain sorts and range sort.
  op domSorts : Sym -> SotLst .
  op ranSort : Sym -> Sot .

  --- A pattern has a sort.
  --- Ill-formed patterns have the kind [Sot] .
  op getSort : PatLst -> SotLst .
  eq getSort(.PatLst) = .SotLst .
  eq getSort(P:Pat, Ps:PatLst) = getSort(P:Pat), getSort(Ps:PatLst) [owise] .

  --- The grammar for patterns.
  subsort Var < Pat .
     eq getSort(ID:Qid : S:Sot) = S:Sot .

  op _/\_ : Pat Pat -> Pat [assoc comm] .
     ceq getSort(P:Pat /\ Q:Pat) = getSort(P:Pat) 
     if getSort(P:Pat) == getSort(Q:Pat) .
  
  op _\/_ : Pat Pat -> Pat [assoc comm] .
     ceq getSort(P:Pat /\ Q:Pat) = getSort(P:Pat) 
     if getSort(P:Pat) == getSort(Q:Pat) .

  op ~_ : Pat -> Pat .
     eq getSort(~ P:Pat) = getSort(P:Pat) .

  op _->_ : Pat Pat -> Pat .
     ceq getSort(P:Pat /\ Q:Pat) = getSort(P:Pat) 
     if getSort(P:Pat) == getSort(Q:Pat) .

  op exists_._ : Var Pat -> Pat .
     eq getSort(exists X:Var . P:Pat) = getSort(P:Pat) .

  op forall_._ : Var Pat -> Pat .
     eq getSort(forall X:Var . P:Pat) = getSort(P:Pat) .

  op _={_}_ : Pat Sot Pat -> Pat . 
     ceq getSort(P:Pat ={S:Sot} Q:Pat) = S:Sot
     if getSort(P:Pat) == getSort(Q:Pat) .

  op _(_) : Sym PatLst -> Pat .
     ceq getSort(F:Sym(Ps:PatLst)) = ranSort(F:Sym)
     if getSort(Ps:PatLst) == domSorts(F:Sym) .
  
  op _() : Sym -> Pat . eq F:Sym() = F:Sym(.PatLst) .
  
endfm

fmod PL is
  including ML .

  sorts PLVar PLVarList Formula .
  
  --- A quoted identifier is a variable.
  subsort Qid < PLVar .

  --- A comma-separated list of variables,
  subsort PLVar < PLVarList .
  op _,_ : PLVarList PLVarList -> PLVarList [assoc prec 100] .

  --- The grammar for formulas
  op _=_ : PLVar PLVar -> Formula .
  op ~_ : Formula -> Formula .
  op _/\_ : Formula Formula -> Formula [assoc comm] .
  op _\/_ : Formula Formula -> Formula [assoc comm] .
  op _->_ : Formula Formula -> Formula .
  op _<->_ : Formula Formula -> Formula .
  op exists_._ : PLVar Formula -> Formula .
  op forall_._ : PLVar Formula -> Formula .
  --- Sort predicates.
  op _[_] : Sot PLVar -> Formula .
  --- Symbol predicates.
  op _[_] : Sym PLVarList -> Formula .
  ops tt ff : -> Formula .
  eq tt /\ F:Formula = F:Formula . eq tt \/ F:Formula = tt .
  eq ff /\ F:Formula = ff . eq ff \/ F:Formula = F:Formula .
  eq tt -> F:Formula = F:Formula . eq F:Formula -> tt = tt .
  eq ff -> F:Formula = tt . eq F:Formula -> ff = ~ F:Formula .
  eq ~ ~ F:Formula = F:Formula .
  eq (F:Formula \/ F:Formula) = F:Formula .
  eq (F:Formula /\ F:Formula) = F:Formula .
  eq (X:PLVar = X:PLVar) = tt .
  eq forall X:PLVar . tt = tt .
  eq forall X:PLVar . ff = ff .
  eq exists X:PLVar . tt = tt .
  eq exists X:PLVar . ff = ff .

endfm

mod ML2PL is
  including PL + ML .
  including CONVERSION .
  including COUNTER .

  --- generate new variables: 'R0, 'R1, 'R2, 'R3, ...
  op fresh : -> PLVar .
  eq fresh = qid("R" + string(counter, 10)) .

  --- convert matching logic variables to variables.
  op ml2pl : Var -> PLVar .
  eq ml2pl(ID:Qid : S:Sot) = ID:Qid .

  --- FOL model constraint
  --- collect all matching logic variables in a pattern, no matter
  --- free or bound.
  op getVars : PatLst -> VarSet .
  sort VarSet . subsort Var < VarSet . op .VarSet : -> VarSet .
  op _._ : VarSet VarSet -> VarSet [comm assoc id: .VarSet] .
  eq X:Var . X:Var = X:Var .
  eq getVars(X:Var) = X:Var .
  eq getVars(~ P:Pat) = getVars(P:Pat) .
  eq getVars(P:Pat /\ Q:Pat) = getVars(P:Pat) . getVars(Q:Pat) .
  eq getVars(P:Pat \/ Q:Pat) = getVars(P:Pat) . getVars(Q:Pat) .
  eq getVars(P:Pat -> Q:Pat) = getVars(P:Pat) . getVars(Q:Pat) .
  eq getVars(P:Pat ={S:Sot} Q:Pat) = getVars(P:Pat) . getVars(Q:Pat) .
  eq getVars(F:Sym(Ps:PatLst)) = getVars(Ps:PatLst) .
  eq getVars(exists X:Var . P:Pat) = X:Var . getVars(P:Pat) .
  eq getVars(forall X:Var . P:Pat) = X:Var . getVars(P:Pat) .
  eq getVars(.PatLst) = .VarSet .
  eq getVars(P:Pat, Ps:PatLst) = getVars(P:Pat) . getVars(Ps:PatLst) .

  --- from matching logic variables x1, ..., xn, build a FOL formula
  --- s1(x1) /\ ... /\ sn(xn), where si = getSort(xi).
  --- Such a formula is called a FOL model constraint, because it
  --- contrains FOL models to interpret matching logic variables
  --- only in their sorted universe.
  op FOLModelConstraint : VarSet -> Formula .
  eq FOLModelConstraint(.VarSet) = tt .
  eq FOLModelConstraint(X:Var . Xs:VarSet) =
     (getSort(X:Var)[ml2pl(X:Var)]) /\ FOLModelConstraint(Xs:VarSet) .

  --- ml2pl transformation.
  op ml2pl : Pat PLVar -> Formula .

  vars R R1 R2 : PLVar . vars P Q : Pat . var X : Var . var F : Sym .

  --- Think of ml2pl transformation as follows.
  --- pattern (R in P) in matching logic  --ml2pl-->  ml2pl(P, R),
  --- such that any matching logic model of (R in P) induces a
  --- FOL model of ml2pl(P, R), and vice versa.
  --- Therefore, if a model M satisfies (R in P), then it is a
  --- model of (R in P) in matching logic, then there must exists
  --- a FOL model M' that satisfies ml2pl(P, R). This shows that
 ---- (R in P) sat => ml2pl(P, R) sat .
  --- On the other hand, if a model M' satisfies ml2pl(P, R), then
  --- there must exists a matching logic model M'' that satisfies
 ---- (R in P). This shows that ml2pl(P, R) sat => (R in P) sat.
  --- To conclude, we prove that ml2pl(P, R) sat iff (R in P) sat.

  eq ml2pl(X, R) = (R = ml2pl(X)) .
  eq ml2pl(P /\ Q, R) = ml2pl(P, R) /\ ml2pl(Q, R) .
  eq ml2pl(P \/ Q, R) = ml2pl(P, R) \/ ml2pl(Q, R) .
  eq ml2pl(~ P, R) = (getSort(P)[R]) /\ (~ ml2pl(P, R)) .
  eq ml2pl(P -> Q, R) = (getSort(P)[R]) /\ (ml2pl(P, R) -> ml2pl(Q, R)) .
  eq ml2pl(exists X . P, R) = 
     exists ml2pl(X) . ml2pl(P, R) .
  eq ml2pl(forall X . P, R) =
     forall ml2pl(X) . ml2pl(P, R) .

  eq ml2pl(F(.PatLst), R) = (ranSort(F)[R]) /\ (F[R]) .
  
  --- auxiliary functions that "hold" fresh variables.
  op ml2pl1 : Pat PLVar PLVar -> Formula .
  op ml2pl1 : Pat PLVar PLVar PLVar -> Formula .

  ceq ml2pl1(F(P), R, R1) =
    (ranSort(F)[R]) /\ 
    exists R1 . ((S1:Sot[R1]) /\ ml2pl(P, R1) /\ F[R1, R])
  if S1:Sot := domSorts(F) .

  eq ml2pl(F(P), R) = ml2pl1(F(P), R, fresh) .

 ceq ml2pl1(F(P, Q), R, R1, R2) =
    (ranSort(F)[R]) /\ 
    (S1:Sot[R1]) /\
    (S2:Sot[R2]) /\
    exists R1 . exists R2 . 
       (ml2pl(P, R1) /\ ml2pl(Q, R2) /\ F[R1, R2, R])
  if S1:Sot, S2:Sot := domSorts(F) .

  eq ml2pl(F(P, Q), R) = ml2pl1(F(P, Q), R, fresh, fresh) .

  --- Auxilirary function that "hold" fresh variables for
  --- P = Q.
  op ml2pl2 : Pat Pat Sot PLVar PLVar -> Formula .
  eq ml2pl(P ={S:Sot} Q, R) = ml2pl2(P, Q, S:Sot, R, fresh) .
  eq ml2pl2(P, Q, S:Sot, R, R1) =
    (S:Sot[R]) /\
    forall R1 . ((getSort(P)[R]) -> (ml2pl(P, R) <-> ml2pl(Q, R))) .

  op pl : Pat -> Formula .
  eq pl(P) = 
    (FOLModelConstraint(getVars(P)) /\ (getSort(P)['R]))
       -> ml2pl(P, 'R) .

endm

fmod PL2TPTP is 
  including PL .
  op printf : PLVarList -> String .
  op printf : Sym -> String .
  op printf : Sot -> String .
  op printf : Formula -> String .
  --- wrap with "(" and ")".
  op wrap : String -> String . eq wrap(S:String) = "(" + S:String + ")" .
  vars F F1 F2 : Formula .

  eq printf(X:PLVar) = string(X:PLVar) .
  eq printf((X:PLVar, Xs:PLVarList)) = 
    string(X:PLVar) + ", " + printf(Xs:PLVarList) .
  eq printf(X:PLVar = Y:PLVar) = wrap(printf(X:PLVar) + "=" + printf(Y:PLVar)) .
  eq printf(F1 /\ F2) = wrap(printf(F1) + " & " + printf(F2)) .
  eq printf(F1 \/ F2) = wrap(printf(F1) + " | " + printf(F2)) .
  eq printf(F1 <-> F2) = wrap(printf(F1) + " <=> " + printf(F2)) .
  eq printf(F1 -> F2) = wrap(printf(F1) + " => " + printf(F2)) .
  eq printf(~ F) = wrap("~ " + printf(F)) .
  eq printf(F:Sym[Xs:PLVarList]) =
    printf(F:Sym) + wrap(printf(Xs:PLVarList)) .
  eq printf(F:Sot[X:PLVar]) =
    printf(F:Sot) + wrap(printf(X:PLVar)) .
  eq printf(forall X:PLVar . F) =
    wrap("! [" + printf(X:PLVar) + "]" + " : " + wrap(printf(F))) .
  eq printf(exists X:PLVar . F) =
    wrap("? [" + printf(X:PLVar) + "]" + " : " + wrap(printf(F))) .
endfm

mod ML2TPTP is
  including ML2PL + PL2TPTP .

  --- ml2tptp(axioms, conjecture)
  op ml2tptp : PatLst -> String .
  
  op pat2fof : Pat -> String .
  eq pat2fof(P:Pat) = printf(pl(P:Pat)) .

  op pat2ax : Pat -> String .
  op pat2cj : Pat -> String .
  eq pat2ax(P:Pat) = 
     "fof(ax_" + string(counter, 10) + ", axiom, " +
     pat2fof(P:Pat) + "). " .
  eq pat2cj(P:Pat) = 
     "fof(cj, conjecture, " +
     pat2fof(P:Pat) + "). " .

  eq ml2tptp(P:Pat, Q:Pat) = pat2ax(P:Pat) + pat2cj(Q:Pat) .
  eq ml2tptp(P:Pat, Ps:PatLst, Q:Pat) = pat2ax(P:Pat) + ml2tptp(Ps:PatLst, Q:Pat) .

endm

mod MYMOD is
  including ML2TPTP .
  ops Bol Nat Seq Map : -> Sot .
  ops zero succ plus : -> Sym .

  --- provide sorting information.
  eq domSorts(zero) = .SotLst . eq ranSort(zero) = Nat .
  eq domSorts(succ) = Nat . eq ranSort(succ) = Nat .
  eq domSorts(plus) = Nat, Nat . eq ranSort(plus) = Nat .
  --- provide for sorts and symbols their TPTP output strings.
  eq printf(Bol) = "bol" . eq printf(Nat) = "nat" .
  eq printf(Seq) = "seq" . eq printf(Map) = "map" .
  eq printf(zero) = "zero" . eq printf(succ) = "succ" .
  eq printf(plus) = "plus" .

  op axioms : -> PatLst . op conj : -> Pat .
  eq axioms = 
    (exists ('T : Nat) . (zero() ={Nat} ('T : Nat))) , 
    (forall ('M : Nat) . exists ('T : Nat) . (succ('M : Nat) ={Nat} ('T : Nat))) ,
    (forall ('M : Nat) . forall ('N : Nat) . exists ('T : Nat) .
        (plus(('M : Nat), ('N : Nat)) ={Nat} ('T : Nat))) ,
    (forall ('M : Nat) . forall ('N : Nat) . 
        (plus(('M : Nat), ('N : Nat)) ={Nat} plus(('N : Nat), ('M : Nat)))) ,
    (forall ('M : Nat) . (plus(zero(), ('M : Nat)) ={Nat} ('M : Nat))) ,
    (forall ('M : Nat) . forall ('N : Nat) .
        (plus((succ('M : Nat)), ('N : Nat)) ={Nat} succ(plus(('M : Nat), ('N : Nat)))))
    .
  eq conj = 
    plus((succ(zero())), (succ(zero()))) ={Nat} succ(succ(zero())) .

endm

rewrite in MYMOD : ml2tptp(axioms, conj) . 

quit
