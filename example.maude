--- Last Update on 25 Dec 2016 by Xiaohong;

load deduction .

--- EXAMPLE OF MAP ---
--- Nat are assumed as built-in domain and all reasoning about Nat shall be
--- pushed to Z3. 

fmod MAP-DOMAIN is
  including ML-DEDUCTIVESYSTEM .
--- Nat is a built-in domain, and reasoning for Nat is supported by Z3.
  ops zero one two three four five six seven eight nine ten : -> Pattern .
  op _+_ : Pattern Pattern -> Pattern .

--- Seq
  op ep : -> Pattern .
  op _^_ : Pattern Pattern -> Pattern [prec 28] .

--- Map
  op _|->_ : Pattern Pattern -> Pattern [prec 27] .
  op _|->[_] : Pattern Pattern -> Pattern [format(d d s d d d) prec 27] .
  op emp : -> Pattern .
  op _*_ : Pattern Pattern -> Pattern [prec 29] .
  
  ops list : -> Symbol .
endfm

reduce in MAP-DOMAIN :
< 1 >
# 0 {
--- Axioms for Nat
E 't . 't = zero
E 't . 't = one
E 't . 't = two
E 't . 't = three
E 't . 't = four
E 't . 't = five
E 't . 't = six
E 't . 't = seven
E 't . 't = eight
E 't . 't = nine
--- Axioms for Seq domain
E 't . 't = ep
A 'S . A 'T . E 't . 't = 'S ^ 'T
A 'x . (ep ^ 'x) = 'x 
A 'x . ('x ^ ep) = 'x 
A 'x . A 'y . A 'z . (('x ^ 'y) ^ 'z = 'x ^ ('y ^ 'z))
ep \/ (E 'x . E 'S . ('x ^ 'S))
A 'x . A 'S . A 'y . A 'T . (('x ^ 'S = 'y ^ 'T) = ('x = 'y /\ 'S = 'T))
--- Axioms for Map demain
A 'H . (emp * 'H = 'H)
A 'H1 . A 'H2 . ('H1 * 'H2 = 'H2 * 'H1)
A 'H1 . A 'H2 . A 'H3 . (('H1 * 'H2) * 'H3 = 'H1 * ('H2 * 'H3))
A 'a . (zero |-> 'a = bot) 
A 'x . A 'a . A 'b . ('x |-> 'a * 'x |-> 'b = bot)
A 'x . ('x |-> [ep] = emp)
A 'x . A 'a . A 'S . ('x |-> ['a ^ 'S] = 'x |-> 'a * ('x + one) |-> ['S])
--- Axioms for Lists
list(zero, ep) = emp
A 'x . A 'n . A 'S . (list('x, 'n ^ 'S) = E 'x . (('x |-> ['n ^ 'z]) * list('z, 'S)))}
|- (one |-> five * (two |-> zero * seven |-> nine * eight |-> one)) -> list(seven, nine ^ five)
==========
deduce 0
mp 1 with E 'z . (seven |-> [nine ^ 'z] * list('z, five))
mp 3 with E 't . (five = 't)
ax 5
.
quit 

--- EXAMPLE OF PEANO NAT ---
--- with module definition and a reduction example.

fmod NAT-DOMAIN is
  including ML-DEDUCTIVESYSTEM .
  ops plus succ zero : -> Symbol .
endfm

--- Example of proving "1 + 1 = 2"
reduce in NAT-DOMAIN :
< 1 >
# 0 {
--- Axioms for PNat
---  zero(), succ(x), plus(x, y) are functional
E 't . (zero() = 't)
A 'x . E 't . (succ('x) = 't)
A 'x . A 'y . E 't . (plus('x, 'y) = 't)
---  plus(0, x) = x
A 'x . (plus(zero(), 'x) = 'x)
---  plus(succ(x), y) = succ(plus(x, y))
A 'x . A 'y . (plus(succ('x), 'y) = succ(plus('x, 'y)))
} |- plus(succ(zero()),succ(zero())) = succ(succ(zero()))
==========
mp 0 with plus(succ(zero()),succ(zero())) = succ(plus(zero(),succ(zero())))
deduce 2
mp 3 with succ(plus(zero(),succ(zero()))) = succ(succ(zero()))
mp 5 with plus(succ(zero()),succ(zero())) = succ(plus(zero(),succ(zero())))
ax8 7 with 't = succ(succ(zero())) and 't
ax 6
mp 4 with plus(zero(),succ(zero())) = succ(zero())
deduce 9
mp 10 with succ(succ(zero())) = succ(succ(zero()))
mp 12 with plus(zero(),succ(zero())) = succ(zero())
ax8 14 with succ('t) = succ(succ(zero())) and 't
ax 13
ax 11
mp 8 with A 'x . ('x = plus(zero(),'x))
mp 16 with E 't . ('t = succ(zero()))
ax 18
mp 17 with A 'x . E 't . ('t = succ('x)) 
mp 20 with E 't . ('t = zero())
ax 22
ax 21
ax 19
ax 15
mp 1 with A 'y . (plus(succ(zero()),'y) = succ(plus(zero(),'y)))
mp 24 with E 't . (succ(zero()) = 't)
ax 26
mp 25 with A 'x . E 't . ('t = succ('x))
mp 28 with E 't . ('t = zero())
ax 30
ax 29
ax 27
mp 23 with A 'x . A 'y . (plus(succ('x),'y) = succ(plus('x,'y)))
mp 32 with E 't . ('t = zero())
ax 34
ax 33
ax 31
.

quit
