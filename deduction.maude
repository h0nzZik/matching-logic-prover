--- This file provides a Hilbert style deductive system for matching logic.
--- Last Update on 07 Jan 2016 by Xiaohong

load syntax .

fmod ML-DEDUCTIVESYSTEM is
  including ML-SYNTAX .

  sorts PatternSet Premise Entailment . 
  subsort Pattern < PatternSet .

--- PatternSet is different from PatternList.
--- PatternSet is communitive.
  op .PatternSet : -> PatternSet .
  op __ : PatternSet PatternSet -> PatternSet [assoc comm id: .PatternSet prec 50 format(d n d)] .
  op {_} : PatternSet -> Premise [format(d n d d)] .
--- {} is a syntatic sugar
  op {} : -> Premise .  eq {} = {.PatternSet} .

  op _|-_ : Premise Pattern -> Entailment [format(d n y no)].

--- define proof obligations
  sort ProofObligations .
  op #__ : Int Entailment -> ProofObligations [format(d d d d)] .
  op done : -> ProofObligations [format(d n)] .
  op __ : ProofObligations ProofObligations -> ProofObligations [assoc comm id: done format(n n d) prec 50] .

--- define commands
  sort Command .
  op skip : -> Command [format(d d)] .
  op __ : Command Command -> Command [assoc id: skip format(d n d) prec 50] .

  op ax_ : Int -> Command [prec 40] .               --- use axioms (K1-K7,K9) to resolve patterns
  op ax8_with_and_ : Int Pattern Var -> Command [prec 40] . --- provide a pattern and a variable to use axiom (K8)
  op mp_with_ : Int Pattern -> Command [prec 40] .  --- provide a pattern to use modus ponens
  op uu_ : Int -> Command [prec 40] .               --- use universal generalization
  op deduce_ : Int -> Command [prec 40] .           --- use closed-form deductive theorem
  op split_ : Int -> Command [prec 40] .            --- use conjunction splitting


  sort Result .  --- for no use
  op <_>_==========_ : Int ProofObligations Command -> Result [format(n d d n d n d) prec 60] .



  var P P1 P2 Q Q1 Q2 R R1 R2 : Pattern .
  var Rest : ProofObligations .
  var C : Command .
  var N M G : Int .
  var X Y Z : Var .
  var F : Symbol .
  vars Ps Qs Rs : PatternSet .

--- Axiom Schemas

--- (K1)
eq  < G > 
    # N { Ps } |- (P -> (Q -> P))
    Rest
    ========== 
    ax N 
    C
= 
    < G > 
    Rest 
    ========== 
    C
.

--- (K2)
eq  < G > 
    # N { Ps } |- (P -> (Q -> R)) -> (( P -> Q ) -> ( P -> R )) 
    Rest 
    ========== 
    ax N
    C
= 
    < G > 
    Rest 
    ========== 
    C 
.

--- (K3)
eq  < G > 
    # N { Ps } |- ( ~ P -> ~ Q ) -> ( Q -> P )
    Rest 
    ========== 
    ax N 
    C
= 
    < G > 
    Rest 
    ========== 
    C 
.

--- (K4)

ceq < G > 
    # N { Ps } |- (A X . (P -> Q)) -> (P -> (A X . Q))
    Rest 
    ========== 
    ax N 
    C
=
    < G > 
    Rest 
    ========== 
    C 
if X not-occur-free-in P
.


--- (K5)

ceq < G > 
    # N { Ps } |- (A X . P -> P)
    Rest 
    ========== 
    ax N 
    C
=
    < G > 
    Rest 
    ========== 
    C 
if X not-occur-free-in P
.

--- (K6)
--- resolve axiom A X . P -> P [ Y / X ], which needs a method that
--- given X, P, and Q, determine whether there exist a Y such that
--- Q =a= P [ Y / X ]
--- such method is called ML-K6 : Var Pattern Pattern -> Bool.
--- IMPORTANT : ML-K6 assumes X occurs free in P
op ML-K6___ : Var Pattern Pattern -> Bool .

--- Assumption : X in fv(P)
--- ML-K6 X P Q
--- step 1 : get fv(Q)
---   ML-K6 X P Q => ML-K6-AUX X P Q (fv Q)
--- step 2 : if fv(Q) is empty then return false
---   ML-K6-AUX X P Q emptyset => false 
--- step 3 : pick Y from (fv Q) and try Q =a= P [ Y / X ]
---   ML-K6-AUX X P Q (Y::Ys) => Q =a= P [ Y / X ] orBool ML-K6-AUX X P Q Ys
var Ys : ML-ALPHA-VarSet .
op ML-K6-AUX____ : Var Pattern Pattern ML-ALPHA-VarSet -> Bool .
eq ML-K6 X P Q = ML-K6-AUX X P Q (ML-ALPHA-fv Q) .
eq ML-K6-AUX X P Q ML-ALPHA-emptyset = false .
eq ML-K6-AUX X P Q (ML-ALPHA-union Y Ys) = (Q =a= P [ Y / X ] orBool ML-K6-AUX X P Q Ys) .

ceq < G > 
    # N { Ps } |- (A X . P -> Q)
    Rest 
    ========== 
    ax N
    C
=
    < G > 
    Rest 
    ========== 
    C
if X occur-free-in P andBool ML-K6 X P Q
.

--- (K7)

eq  < G > 
    # N { Ps } |- P = P
    Rest 
    ========== 
    ax N
    C
=
    < G > 
    Rest 
    ========== 
    C 
.

--- (K8)

ceq  < G > 
     # N { Ps } |- (P1 = P2) -> (R1 -> R2)
     Rest
     ==========
     ax8 N with Q and X
     C
=
     < G > 
     Rest
     ==========
     C
if Q [ P1 / X ] =a= R1 andBool Q [ P2 / X ] =a= R2
. 

--- (K9)

ceq < G > 
    # N { Ps } |- (E Y . (Q = Y)) -> ((A X . P) -> R)
    Rest
    ==========
    ax N
    C
=
    < G > 
    Rest
    ==========
    C
if P [ Q / X ] =a= R 
.

ceq < G > 
    # N { Ps } |- (E Y . (Q = Y)) -> (R -> E X . P)
    Rest
    ==========
    ax N
    C
=
    < G > 
    Rest
    ==========
    C
if P [ Q / X ] =a= R 
.

--- monotonic of symbols
--- |- (Q -> R) -> (s(P1,...,Q,...,Pn) -> s(P1,...,R,...,Pn))
var Sigma : Symbol . vars LeftPatternList RightPatternList : PatternList .

eq < G >
    # N { Ps } |- (Q -> R) -> (Sigma(LeftPatternList, Q, RightPatternList)
                               -> Sigma(LeftPatternList, R, RightPatternList))
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

--- Inference Rules

--- Modus Ponens

eq  < G > 
    # N { Ps } |- P 
    Rest 
    ========== 
    mp N with Q
    C
=
    < G +Int 2 > 
    # G { Ps } |- Q 
    # G +Int 1 { Ps } |- Q -> P
    Rest 
    ========== 
    C 
.

--- Universal Generalization

eq  < G >
    # N { Ps } |- (A X . P)
    Rest 
    ==========
    uu N 
    C
=
    < G +Int 1 > 
    # G { Ps } |- P 
    Rest
    ========== 
    C 
. 

--- Deduction Theorem

ceq < G >
    # N { Ps } |- P -> Q
    Rest
    ==========
    deduce N
    C
=
    < G +Int 1 >
    # G { Ps P } |- Q
    Rest
    ==========
    C
if P is-closed-pattern
.

--- Conjunction Splitting

eq  < G > 
    # N { Ps } |- P /\ Q
    Rest
    ==========
    split N 
    C
=
    < G +Int 2 > 
    # G { Ps } |- P 
    # G +Int 1 { Ps } |- Q
    Rest
    ==========
    C
.

--- Inclusion Rule

ceq < G >
    # N { P Ps } |- Q
    Rest
    ==========
    ax N
    C 
=
    < G >
    Rest
    ==========
    C
if P =a= Q
.

--- Domain Specific Rules

--- Nat



eq < G >
    # N { Ps } |- E X . (X = zero())
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.


eq < G >
    # N { Ps } |- E X . (X = one())
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |- E X . (X = two())
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |- E X . (X = three())
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |- E X . (X = four())
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |- E X . (X = five())
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |- E X . (X = six())
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |- E X . (X = seven())
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |- E X . (X = eight())
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |- E X . (X = nine())
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

var Term : Var .

eq < G >
    # N { Ps } |- A X . A Y . E Term . (Term = plus(X, Y))
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

--- Seq

eq < G >
    # N { Ps } |- E X . (X = epsilon()) 
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

vars S1 S2 : Var .

eq < G >
    # N { Ps } |- A S1 . A S2 . E X . (concat(S1, S2) = X)
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |- A X . (concat(epsilon(), X) = X)
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |- A X . (concat(X, epsilon()) = X)
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |- A X . A Y . A Z . (concat(concat(X, Y), Z) = concat(X, concat(Y, Z)))
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

vars HEAD REST : Var .
   --- any sequence is either empty or head^rest
eq < G >
    # N { Ps } |- epsilon() \/ (E HEAD . E REST . concat(HEAD, REST))
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C


eq < G >
    # N { Ps } |- A X . A S . A Y . A T . 
                 ((concat(X, S) = concat(Y, T)) = (X = Y) /\ (S = T))
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

--- Map
vars H H1 H2 H3 : Pattern .
eq < G >
    # N { Ps } |- separatingconjunction(emp(), H) = H
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |- separatingconjunction(H1, H2) = separatingconjunction(H2, H1)
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |- separatingconjunction(separatingconjunction(H1, H2), H3) =
                  separatingconjunction(H1, separatingconjunction(H2, H3)) 
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
   # N { Ps } |- mapsto(zero(), P) = bot)
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

vars C1 C2 : Var .
eq < G >
   # N { Ps } |- A X . A C1 . A C2 . separatingconjunction(mapsto(X, C1), mapsto(X, C2)) = bot
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
   # N { Ps } |- A X . (mapstoseq(X, epsilon()) = emp())
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
   # N { Ps } |- A X . A HEAD . A REST . 
                (mapstoseq(X, concat(HEAD, REST)) =
                 separatingconjunction(mapsto(X, HEAD), mapstoseq(plus(X, one()), REST)))
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
   # N { Ps } |- list(zero(), epsilon()) = emp()
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
   # N { Ps } |- A X . A HEAD . A REST . ((list(X, concat(HEAD, REST))) = E Z . separatingconjunction(mapstoseq(X, concat(HEAD, Z)), list(Z, REST)))
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

endfm

