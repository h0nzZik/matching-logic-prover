--- This module is based on syntax.maude.
--- This module provides a Hilbert style deductive system for matching logic.
--- This module provides all axioms and inference rules in the deductive system.
--- Also, this module provides inference rules that come as metatheorems of
--- the deductive system, aiming to ease the proving process.
--- Axioms and axiom schemas of domains are also included in this deductive
--- system, including those for natural numbers, sequences of numbers, heaps,
--- and linked lists.
--- Last Update on 13 Jan 2016 by Xiaohong

load syntax .

fmod ML-DEDUCTIVESYSTEM is
  including ML-SYNTAX * (op __ to _union-VarSet_) .
  --- op __ is the union operator that merge two variable sets to one set.
  --- we redefine __ to be the union operator for sets of patterns.

  sorts PatternSet Premise Entailment . 
  subsort Pattern < PatternSet .

--- PatternSet is different from PatternList.
--- PatternSet is communitive.
  op .PatternSet : -> PatternSet .
  op __ : PatternSet PatternSet -> PatternSet 
    [assoc comm id: .PatternSet format(d n d) prec 85] .
  op {_} : PatternSet -> Premise [format(d n d d)] .
--- {} is a syntatic sugar
  op {} : -> Premise .  eq {} = {.PatternSet} .

--- define entailment
  op _|-_ : Premise Pattern -> Entailment [format(d n y no) prec 81].

--- define proof obligations
  sort ProofObligation .
  op #__ : Int Entailment -> ProofObligation [format(d d d d) prec 83] .
  op .ProofObligation : -> ProofObligation [format(d n)] .
  op __ : ProofObligation ProofObligation -> ProofObligation 
    [assoc comm id: .ProofObligation format(n n d) prec 85] .

--- define commands
  sort Command .
  op skip : -> Command [format(d d)] .
  op __ : Command Command -> Command [assoc id: skip format(d n d) prec 85] .

  op ax_ : Int -> Command [prec 81] .               --- use axioms (K1-K7,K9) to resolve patterns
  op ax8_with_and_ : Int Pattern Var -> Command [prec 81] . --- provide a pattern and a variable to use axiom (K8)
  op mp_with_ : Int Pattern -> Command [prec 81] .  --- provide a pattern to use modus ponens
  op uu_ : Int -> Command [prec 81] .               --- use universal generalization
  op deduce_ : Int -> Command [prec 81] .           --- use closed-form deductive theorem
  op floor_ : Int -> Command [prec 81] .            --- use Floor Elimination rule
  op split_ : Int -> Command [prec 81] .            --- use conjunction splitting


  sort Result .  op QED : -> Result .
  op <_>_==========_ : Int ProofObligation Command -> Result [format(n d d n d n d) prec 89] .
  

  var P P1 P2 Q Q1 Q2 R R1 R2 : Pattern .
  var Rest : ProofObligation .
  var C : Command .
  var N M G : Int .
  var X Y Z S T : Var .
  var F : Symbol .
  vars Ps Qs Rs : PatternSet .

--- We reach QED when there is no more proof obligation.
eq  < G > .ProofObligation
    ==========
    skip
= QED .

--- Axiom Schemas

--- (K1)
eq  < G > 
    # N { Ps } |- (P -> (Q -> P))
    Rest
    ========== 
    ax N 
    C
= 
    < G > 
    Rest 
    ========== 
    C
.

--- (K2)
eq  < G > 
    # N { Ps } |- (P -> (Q -> R)) -> (( P -> Q ) -> ( P -> R )) 
    Rest 
    ========== 
    ax N
    C
= 
    < G > 
    Rest 
    ========== 
    C 
.

--- (K3)
eq  < G > 
    # N { Ps } |- ( ~ P -> ~ Q ) -> ( Q -> P )
    Rest 
    ========== 
    ax N 
    C
= 
    < G > 
    Rest 
    ========== 
    C 
.

--- (TAUTOLOGY)
eq  < G > 
    # N { Ps } |- P = P
    Rest
    ========== 
    ax N 
    C
= 
    < G > 
    Rest 
    ========== 
    C
.


--- (K4)

ceq < G > 
    # N { Ps } |- (forall X . (P -> Q)) -> (P -> (forall X . Q))
    Rest 
    ========== 
    ax N 
    C
=
    < G > 
    Rest 
    ========== 
    C 
if X not-occur-free-in P
.


--- (K5)

eq < G > 
    # N { Ps } |- exists Y . (X = Y)
    Rest 
    ========== 
    ax N 
    C
=
    < G > 
    Rest 
    ========== 
    C 
.

--- (K6)
--- resolve axiom forall X . P -> P [ Y / X ], which needs a method that
--- given X, P, and Q, determine whether there exist a Y such that
--- Q =a= P [ Y / X ]
--- such method is called ML-K6 : Var Pattern Pattern -> Bool.
--- IMPORTANT : ML-K6 assumes X occurs free in P
op ML-K6___ : Var Pattern Pattern -> Bool .

--- Assumption : X in fv(P)
--- ML-K6 X P Q
--- step 1 : get fv(Q)
---   ML-K6 X P Q => ML-K6-AUX X P Q (fv Q)
--- step 2 : if fv(Q) is empty then return false
---   ML-K6-AUX X P Q emptyset => false 
--- step 3 : pick Y from (fv Q) and try Q =a= P [ Y / X ]
---   ML-K6-AUX X P Q (Y::Ys) => Q =a= P [ Y / X ] orBool ML-K6-AUX X P Q Ys
var Ys : VarSet .
op ML-K6-AUX____ : Var Pattern Pattern VarSet -> Bool .
eq ML-K6 X P Q = ML-K6-AUX X P Q fv(Q) .
eq ML-K6-AUX X P Q .VarSet = false .
eq ML-K6-AUX X P Q (Y union-VarSet Ys) = (Q =a= P [ Y / X ]) orBool (ML-K6-AUX X P Q Ys) .

ceq < G > 
    # N { Ps } |- (forall X . P -> Q)
    Rest 
    ========== 
    ax N
    C
=
    < G > 
    Rest 
    ========== 
    C
if X occur-free-in P andBool ML-K6 X P Q
.
--- (K8)

ceq  < G > 
     # N { Ps } |- (P1 = P2) -> (R1 -> R2)
     Rest
     ==========
     ax8 N with Q and X
     C
=
     < G > 
     Rest
     ==========
     C
if (Q [ P1 / X ] =a= R1) andBool (Q [ P2 / X ] =a= R2)
. 

--- (K9)

ceq < G > 
    # N { Ps } |- (exists Y . (Q = Y)) -> ((forall X . P) -> R)
    Rest
    ==========
    ax N
    C
=
    < G > 
    Rest
    ==========
    C
if P [ Q / X ] =a= R 
.

ceq < G > 
    # N { Ps } |- (exists Y . (Q = Y)) -> (R -> exists X . P)
    Rest
    ==========
    ax N
    C
=
    < G > 
    Rest
    ==========
    C
if P [ Q / X ] =a= R 
.

--- monotonic of symbols
--- |- (Q -> R) -> (s(P1,...,Q,...,Pn) -> s(P1,...,R,...,Pn))
var Sigma : Symbol . vars LeftPatternList RightPatternList : PatternList .

eq < G >
    # N { Ps } |- floor(Q -> R) -> (Sigma(LeftPatternList, Q, RightPatternList)
                               -> Sigma(LeftPatternList, R, RightPatternList))
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

--- Inference Rules

--- Modus Ponens

eq  < G > 
    # N { Ps } |- P 
    Rest 
    ========== 
    mp N with Q
    C
=
    < G +Int 2 > 
    # G { Ps } |- Q 
    # G +Int 1 { Ps } |- Q -> P
    Rest 
    ========== 
    C 
.

--- Universal Generalization

eq  < G >
    # N { Ps } |- (forall X . P)
    Rest 
    ==========
    uu N 
    C
=
    < G +Int 1 > 
    # G { Ps } |- P 
    Rest
    ========== 
    C 
. 

--- Floor Elimination

eq  < G >
    # N { Ps } |- floor(P)
    Rest 
    ==========
    floor N 
    C
=
    < G +Int 1 > 
    # G { Ps } |- P 
    Rest
    ========== 
    C 
. 

--- Deduction Theorem

ceq < G >
    # N { Ps } |- floor(P) -> Q
    Rest
    ==========
    deduce N
    C
=
    < G +Int 1 >
    # G { Ps P } |- Q
    Rest
    ==========
    C
if P is-closed-pattern
.

--- Conjunction Splitting

eq  < G > 
    # N { Ps } |- P /\ Q
    Rest
    ==========
    split N 
    C
=
    < G +Int 2 > 
    # G { Ps } |- P 
    # G +Int 1 { Ps } |- Q
    Rest
    ==========
    C
.

--- Inclusion Rule

ceq < G >
    # N { P Ps } |- Q
    Rest
    ==========
    ax N
    C 
=
    < G >
    Rest
    ==========
    C
if P =a= Q
.

--- Domain Specific Rules

--- Nat



eq < G >
    # N { Ps } |- exists X . (X = zero())
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.


eq < G >
    # N { Ps } |- exists X . (X = one())
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |- exists X . (X = two())
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |- exists X . (X = three())
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |- exists X . (X = four())
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |- exists X . (X = five())
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |- exists X . (X = six())
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |- exists X . (X = seven())
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |- exists X . (X = eight())
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |- exists X . (X = nine())
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

var Term : Var .

eq < G >
    # N { Ps } |- forall X . forall Y . exists Term . (Term = plus(X, Y))
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

--- Seq

eq < G >
    # N { Ps } |- exists X . (X = epsilon()) 
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

vars S1 S2 : Var .

eq < G >
    # N { Ps } |- forall S1 . forall S2 . exists X . (concat(S1, S2) = X)
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |-  forall S2 . forall S1 . exists X . (concat(S1, S2) = X)
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |- forall X . (concat(epsilon(), X) = X)
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |- forall X . (concat(X, epsilon()) = X)
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |- forall X . forall Y . forall Z . (concat(concat(X, Y), Z) = concat(X, concat(Y, Z)))
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

vars HEAD REST : Var .
   --- any sequence is either empty or head^rest
eq < G >
    # N { Ps } |- epsilon() \/ (exists HEAD . exists REST . concat(HEAD, REST))
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C

.

eq < G >
    # N { Ps } |- forall X . forall S . forall Y . forall T . 
                 ((concat(X, S) = concat(Y, T)) = (X = Y) /\ (S = T))
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

--- Map
vars H H1 H2 H3 : Pattern .
eq < G >
    # N { Ps } |- merge(emp(), H) = H
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |- merge(H, emp()) = H
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |- merge(H1, H2) = merge(H2, H1)
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
    # N { Ps } |- merge(merge(H1, H2), H3) =
                  merge(H1, merge(H2, H3)) 
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
   # N { Ps } |- mapsto(zero(), P) = bot
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

vars C1 C2 : Var .
eq < G >
   # N { Ps } |- forall X . forall C1 . forall C2 . merge(mapsto(X, C1), mapsto(X, C2)) = bot
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
   # N { Ps } |- forall X . (mapstoseq(X, epsilon()) = emp())
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
   # N { Ps } |- forall X . forall HEAD . forall REST . 
                (mapstoseq(X, concat(HEAD, REST)) =
                 merge(mapsto(X, HEAD), mapstoseq(plus(X, one()), REST)))
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
   # N { Ps } |- list(zero(), epsilon()) = emp()
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

eq < G >
   # N { Ps } |- forall X . forall HEAD . forall REST . ((list(X, concat(HEAD, REST))) = exists Z . merge(mapstoseq(X, concat(HEAD, Z)), list(Z, REST)))
    Rest
    ==========
    ax N
    C
=
    < G >
    Rest
    ==========
    C
.

endfm

