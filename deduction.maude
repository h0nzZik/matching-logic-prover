--- This file provides a Hilbert style deductive system for matching logic
--- Last Update on 25 Dec 2016 by Xiaohong

load syntax .

fmod ML-DEDUCTIVESYSTEM is
  including ML-SYNTAX .

  sorts PatternSet Premise Entailment . 
  subsort Pattern < PatternSet .

--- PatternSet is different from PatternList.
--- PatternSet is communitive.

  op .PatternSet : -> PatternSet .
  op __ : PatternSet PatternSet -> PatternSet [assoc comm id: .PatternSet prec 50] .
  op {} : -> Premise .  op {_} : PatternSet -> Premise .
--- {} is a syntatic sugar
  eq {} = {.PatternSet} .

  op _|-_ : Premise Pattern -> Entailment .

--- define proof obligations
  sort ProofObligations .
  op #__ : Int Entailment -> ProofObligations .
  op done : -> ProofObligations .
  op __ : ProofObligations ProofObligations -> ProofObligations [assoc comm id: done prec 50] .

--- define commands
  sort Command .
  op skip : -> Command [format(d d)] .
  op __ : Command Command -> Command [assoc id: skip format(n n d) prec 50] .

  op ax_ : Int -> Command [prec 40] .               --- use axioms (K1-K7,K9) to resolve patterns
  op ax8_with_and_ : Int Pattern Var -> Command [prec 40] . --- provide a pattern and a variable to use axiom (K8)
  op mp_with_ : Int Pattern -> Command [prec 40] .  --- provide a pattern to use modus ponens
  op uu_ : Int -> Command [prec 40] .               --- use universal generalization
  op deduce_ : Int -> Command [prec 40] .           --- use closed-form deductive theorem
  op split_ : Int -> Command [prec 40] .            --- use conjunction splitting


  sort Result .  --- for no use
  op <_>_==========_ : Int ProofObligations Command -> Result [format(n d d n n n d) prec 60] .



  var P P1 P2 Q Q1 Q2 R R1 R2 : Pattern .
  var Rest : ProofObligations .
  var C : Command .
  var N M G : Int .
  var X Y Z : Var .
  var F : Symbol .
  vars Ps Qs Rs : PatternSet .

--- Axiom Schemas

--- (K1)
eq  < G > 
    # N { Ps } |- (P -> (Q -> P))
    Rest
    ========== 
    ax N 
    C
= 
    < G > 
    Rest 
    ========== 
    C
.

--- (K2)
eq  < G > 
    # N { Ps } |- (P -> (Q -> R)) -> (( P -> Q ) -> ( P -> R )) 
    Rest 
    ========== 
    ax N
    C
= 
    < G > 
    Rest 
    ========== 
    C 
.

--- (K3)
eq  < G > 
    # N { Ps } |- ( ~ P -> ~ Q ) -> ( Q -> P )
    Rest 
    ========== 
    ax N 
    C
= 
    < G > 
    Rest 
    ========== 
    C 
.

--- (K4)

ceq < G > 
    # N { Ps } |- (A X . (P -> Q)) -> (P -> (A X . Q))
    Rest 
    ========== 
    ax N 
    C
=
    < G > 
    Rest 
    ========== 
    C 
if X not-occur-free-in P
.


--- (K5)

ceq < G > 
    # N { Ps } |- (A X . P -> P)
    Rest 
    ========== 
    ax N 
    C
=
    < G > 
    Rest 
    ========== 
    C 
if X not-occur-free-in P
.

--- (K6)
--- resolve axiom A X . P -> P [ Y / X ], which needs a method that
--- given X, P, and Q, determine whether there exist a Y such that
--- Q =a= P [ Y / X ]
--- such method is called ML-K6 : Var Pattern Pattern -> Bool.
--- IMPORTANT : ML-K6 assumes X occurs free in P
op ML-K6___ : Var Pattern Pattern -> Bool .

--- Assumption : X in fv(P)
--- ML-K6 X P Q
--- step 1 : get fv(Q)
---   ML-K6 X P Q => ML-K6-AUX X P Q (fv Q)
--- step 2 : if fv(Q) is empty then return false
---   ML-K6-AUX X P Q emptyset => false 
--- step 3 : pick Y from (fv Q) and try Q =a= P [ Y / X ]
---   ML-K6-AUX X P Q (Y::Ys) => Q =a= P [ Y / X ] orBool ML-K6-AUX X P Q Ys
var Ys : ML-ALPHA-VarSet .
op ML-K6-AUX____ : Var Pattern Pattern ML-ALPHA-VarSet -> Bool .
eq ML-K6 X P Q = ML-K6-AUX X P Q (ML-ALPHA-fv Q) .
eq ML-K6-AUX X P Q ML-ALPHA-emptyset = false .
eq ML-K6-AUX X P Q (ML-ALPHA-union Y Ys) = (Q =a= P [ Y / X ] orBool ML-K6-AUX X P Q Ys) .

ceq < G > 
    # N { Ps } |- (A X . P -> Q)
    Rest 
    ========== 
    ax N
    C
=
    < G > 
    Rest 
    ========== 
    C
if X occur-free-in P andBool ML-K6 X P Q
.

--- (K7)

eq  < G > 
    # N { Ps } |- P = P
    Rest 
    ========== 
    ax N
    C
=
    < G > 
    Rest 
    ========== 
    C 
.

--- (K8)

ceq  < G > 
     # N { Ps } |- (P1 = P2) -> (R1 -> R2)
     Rest
     ==========
     ax8 N with Q and X
     C
=
     < G > 
     Rest
     ==========
     C
if Q [ P1 / X ] =a= R1 andBool Q [ P2 / X ] =a= R2
. 

--- (K9)

ceq < G > 
    # N { Ps } |- (E Y . (Q = Y)) -> ((A X . P) -> R)
    Rest
    ==========
    ax N
    C
=
    < G > 
    Rest
    ==========
    C
if P [ Q / X ] =a= R 
.

--- Inference Rules

--- Modus Ponens

eq  < G > 
    # N { Ps } |- P 
    Rest 
    ========== 
    mp N with Q
    C
=
    < G +Int 2 > 
    # G { Ps } |- Q 
    # G +Int 1 { Ps } |- Q -> P
    Rest 
    ========== 
    C 
.

--- Universal Generalization

eq  < G >
    # N { Ps } |- (A X . P)
    Rest 
    ==========
    uu N 
    C
=
    < G +Int 1 > 
    # G { Ps } |- P 
    Rest
    ========== 
    C 
. 

--- Deduction Theorem

ceq < G >
    # N { Ps } |- P -> Q
    Rest
    ==========
    deduce N
    C
=
    < G +Int 1 >
    # G { Ps P } |- Q
    Rest
    ==========
    C
if P is-closed-pattern
.

--- Conjunction Splitting

eq  < G > 
    # N { Ps } |- P /\ Q
    Rest
    ==========
    split N 
    C
=
    < G +Int 2 > 
    # G { Ps } |- P 
    # G +Int 1 { Ps } |- Q
    Rest
    ==========
    C
.

--- Inclusion Rule

ceq < G >
    # N { P Ps } |- Q
    Rest
    ==========
    ax N
    C 
=
    < G >
    Rest
    ==========
    C
if P =a= Q
.

endfm
