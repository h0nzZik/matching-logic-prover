declare_unification_type(bt,  [arreq,eq,eqset]).
declare_unification_type(bst, [arreq,eq,eqset,eq,eq]).

unfold(bt(H,X,F),
  [
  body([], [], [eq(X,0), eqset(F,emptyset)]),
  body([2,3],
       [bt(H,X1,F1),
        bt(H,X2,F2)],
       [gt(X,0), 
        eq(X1,ref(H,plus(X,1))),
        eq(X2,ref(H,plus(X,2))),
        z3_not(mem(X,F1)),
        z3_not(mem(X,F2)),
        eqset(emptyset,inter(F1,F2)),
        eqset(F,add(union(F1,F2), X))])
  ]).

unfold(bst(H,X,F,MIN,MAX),
  [
  body([], [], [eq(X,0), eqset(F,emptyset)]),
  body([], [],
       [gt(X,0), 
        eq(0, ref(H, plus(X,1))),
        eq(0, ref(H, plus(X,2))),
        eq(MIN,X),
        eq(MAX,X),
        eqset(F,singleton(X))]),
  body([2,3,4,5],
       [bst(H,X1,F1,MIN1,MAX1),
        bst(H,X2,F2,MIN2,MAX2)],
       [gt(X,0), 
        eq(X1, ref(H, plus(X,1))),
        eq(X2, ref(H, plus(X,2))),
        gt(X,MAX1),
        gt(MIN2,X),
        eq(MIN,MIN1),
        eq(MAX,MAX2),
        z3_not(mem(X,F1)),
        eqset(F3,add(F1,X)),
        eqset(emptyset,inter(F3,F2)),
        eqset(F,union(F3,F2))])
  ]).

run_bst_bt :-
  GAtoms =[bst(H, X, F, MIN, MAX)],
  HAtoms =[bt(H, X, F)],
  lprove(4,GAtoms,[],HAtoms,[]),
  !,
  printf("BST-BT PROVED.\n", []).

run :-
  run_bst_bt,
  !,
  printf("PROOF SUCCEED.\n", []).

run :-
  printf("PROOF FAILED\n", []).


:- consult('solver_main_extracted.clpr').

:- run, halt.
