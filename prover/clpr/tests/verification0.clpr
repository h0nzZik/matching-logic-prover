inductionlimit(4).
unfolddepthbound(4).

traceleftbound(4).
tracerightbound(4).


% reach(Stmts, S_init, I_init, S_fin, I_fin)
% Stmts is an array of integers, representing "increments".
% reach(...) holds, if 
% S_init + Stmts[I_init] + Stmts[I_init + 1] + ... + Stmts[I_fin - 1] = S_fin

% It is defined in an inductive way.

declare_unification_type(reach, [arreq, eq, eq, eq, eq]).

unfold(reach(Stmts, S_init, I_init, S_fin, I_fin),
  [
  body([],
       [eq(I_init, I_fin),
        eq(S_init, S_fin)]),
  body([reach(Stmts, S_new, I_new, S_fin, I_fin)],
       [gt(I_fin, I_init),
        eq(Inc, ref(Stmts, I_init)),
        eq(S_new, plus(S_init, Inc)),
        eq(I_new, plus(I_init, 1))])
  ]).


% Let Stmts = [1, 2, 3, ..., 10]
%     S_init = 0, I_init = 0, I_fin = 10
% Then S_fin = 1 + 2 + ... + 10 = 55

% However, due to induction limitation, I cannot prove the above.
% If I set all parameters to 4, I can prove the case when I_fin = 3.
% In this case S_fin = 1 + 2 + 3 = 6

% I tried to set all parameters to 10, but I got an error about
% not enough code space.

run_ex_1 :-
  init_counters,
  addunfoldlevel(0, 0, 
                 [reach(Stmts, S_init, I_init, S_fin, I_fin)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [eq(ref(Stmts, 0), 1),
          eq(ref(Stmts, 1), 2),
          eq(ref(Stmts, 2), 3),
          eq(ref(Stmts, 3), 4),
          eq(ref(Stmts, 4), 5),
          eq(ref(Stmts, 5), 6),
          eq(ref(Stmts, 6), 7),
          eq(ref(Stmts, 7), 8),
          eq(ref(Stmts, 8), 9),
          eq(ref(Stmts, 9), 10),
          eq(I_init, 0),
          eq(I_fin, 3),
          eq(S_init, 0)],
         [], UnfoldableHAtoms, 
         [eq(S_fin, 6)],
         []),
  !,
  show_counters,
  printf("PROGRAM VERIFIED.\n", []).

run :-
  run_ex_1,
  !,
  printf("PROOF SUCCEED.\n", []).

run :-
  printf("PROOF FAILED\n", []).


:- consult('solver_main.clpr').

:- run, halt.
