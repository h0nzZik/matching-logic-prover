inductionlimit(1).
unfolddepthbound(1).

traceleftbound(1).
tracerightbound(1).

declare_unification_type(dllist_seg, [arreq,eq,eq,eq,eqset]).
declare_unification_type(dllist, [arreq,eq,eq,eqset]).
declare_unification_type(dllist_seg_left, [arreq,eq,eq,eq,eqset]).


unfold(dllist(H,X,N,F),
  [
  body([], [eq(X,0), 
            eq(N,0),
            eqset(F,emptyset)]),
  body([dllist(H,T,N1,F1)],
       [gt(X,0), 
        gt(T,0),
        eq(T, ref(H, plus(X,1))),
        eq(X, ref(H, plus(T,2))),
        eq(N,plus(N1,1)),
        z3_not(mem(X, F1)),
        eqset(F, add(F1, X))])
  ]).

unfold(dllist_seg(H,X,Y,N,F),
  [
  body([], [eq(X,Y), eq(N,0), eqset(F,emptyset)]),
  body([dllist_seg(H,X,T,N1,F1)],
       [gt(T, 0),
        gt(Y, 0),
        eq(T, ref(H, plus(Y, 2))),
        eq(Y, ref(H, plus(T, 1))),
        eq(N, plus(N1,1)),
        z3_not(mem(T, F1)),
        eqset(F, add(F1, T))])
  ]).

unfold(dllist_seg_left(H,X,Y,N,F),
  [
  body([], [eq(X,Y), eq(N,0), eqset(F,emptyset)]),
  body([dllist_seg_left(H,T,Y,N1,F1)],
       [gt(X, 0),
        gt(T, 0),
        eq(T, ref(H, plus(X, 1))),
        eq(X, ref(H, plus(T, 2))),
        eq(N, plus(N1,1)),
        z3_not(mem(X, F1)),
        eqset(F, add(F1, X))])
  ]).

run_before_loop :-
  init_counters,
  addunfoldlevel(0, 0, [dllist_seg(H0, X, LL, N0, F0),
                        dllist(H0, LL, N1, F1)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [dllist_seg(H0, OLDX, X, I, F2),
                        dllist_seg(H0, X, LL, N0, F0),
                        dllist(H0, LL, N1, F1)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [eqset(emptyset,inter(F0,F1)),
          eq(X, OLDX),
          eq(I,0),
          eq(TMP,0),
          eqset(F2,emptyset)],
         [], UnfoldableHAtoms, 
         [eqset(emptyset,inter(F2,F0)),
          eqset(emptyset,inter(F0,F1))], []),
  !,
  show_counters,
  printf("BEFORE-LOOP PROVED.\n", []).



run_in_loop :-
  init_counters,
  addunfoldlevel(0, 0, [dllist_seg(H0, OLDX, X, I, F2),
                        dllist_seg_left(H0, X, LL, N0, F0),
                        dllist(H0, LL, N1, F1)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [dllist_seg(H0, OLDX, X2, I1, F3),
                        dllist_seg_left(H0, X2, LL, N4, F4),
                        dllist(H0, LL, N1, F1)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [eqset(emptyset,inter(F2,F0)),
          eqset(emptyset,inter(F0,F1)),

          gt(X, 0),
          gt(X, LL),
          eq(I1,plus(I,1)),
          eq(X2, ref(H0,plus(X,1))),
          eq(TMP, 0),
          
          eqset(F3,add(F2,X)),
          eqset(F4,del(F0,X)),
          eq(N4,minus(N0,1))
         ],
         [], UnfoldableHAtoms, 
         [eqset(emptyset,inter(F3,F4)),
          eqset(emptyset,inter(F4,F1))], []),
  !,
  show_counters,
  printf("INV PROVED.\n", []).



run_after_loop1 :-
  init_counters,
  addunfoldlevel(0, 0, [dllist_seg(H0, OLDX, LL, N0, F0),
                        dllist(H0, LL, N1, F1)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [dllist(H0, OLDX, N2, F2)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [eqset(emptyset,inter(F0,F1)),
          eqset(F2,union(F0,F1)),
          eq(N2,plus(N0,N1))
         ],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("AFTER LOOP1 PROVED.\n", []).


run_after_loop2 :-
  init_counters,
  addunfoldlevel(0, 0, [dllist_seg(H0, OLDX, X, I, F2),
                        dllist_seg(H0, X, LL, N0, F0),
                        dllist(H0, LL, N1, F1)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [dllist_seg(H0, OLDX, LL, RET, F2),
                        dllist(H0, LL, N1, F1)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [eqset(emptyset,inter(F2,F0)),
          eqset(emptyset,inter(F0,F1)),
          eqset(emptyset,inter(F2,F1)),
          
          gt(X,0),
          eq(X,LL),
          eq(RET, I)],
         [], UnfoldableHAtoms, 
         [eqset(emptyset,inter(F2,F1)),
          gt(LL,0)], []),
  !,
  show_counters,
  printf("AFTER LOOP2 PROVED.\n", []).

run :-
  run_before_loop,
  run_in_loop,
  run_after_loop1,
  run_after_loop2,
  !,
  printf("PROOF SUCCEED.\n", []).

run :-
  printf("PROOF FAILED\n", []).


:- consult('../solver_main.clpr').

:- run, halt.
