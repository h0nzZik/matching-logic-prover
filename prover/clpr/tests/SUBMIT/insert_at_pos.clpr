inductionlimit(1).
unfolddepthbound(2).

traceleftbound(1).
tracerightbound(2).

declare_unification_type(list_seg, [arreq,eq,eq,eq,eqset]).
declare_unification_type(list, [arreq,eq,eq,eqset]).
declare_unification_type(list_append, [arreq,eq,eq,eq,eq,eqset]).
declare_unification_type(list_insert, [arreq,eq,eq,eq,eq,eqset]).
declare_unification_type(disj, [arreq,eq,eq,eq,eq,eqset]).


unfold(list_seg(H,X,Y,N,F),
  [
  body([], [eq(X,Y), eq(N,0), eqset(F,emptyset)]),
  body([list_seg(H,X,T,N1,F1)],
       [gt(T, 0),
        eq(N, plus(N1,1)),
        eq(Y, ref(H, plus(T, 1))),
        z3_not(mem(T, F1)),
        eqset(F, add(F1, T))])
  ]).

unfold(list(H,X,N,F),
  [
  body([], [eq(X,0),eq(N,0),eqset(F,emptyset)]),
  body([list(H,T,N1,F1)],
       [gt(X,0), 
        eq(N,plus(N1,1)),
        eq(T, ref(H, plus(X,1))),
        z3_not(mem(X, F1)),
        eqset(F, add(F1, X))])
  ]).

% (((oldx l= nil) => (((ret l= newx) & (ret |-> loc next: tmp; int key: d)) & (tmp l= nil))) &
%	((~ (oldx l= nil)) => (lseg^(ret, newx) * ((newx |-> loc next: tmp; int key: d) & (tmp l= nil))))));
unfold(list_append(H,OLDX,RET,NEWX,N,F),
  [
  body([], 
       [eq(OLDX,0),
        eq(N,1),
        eq(RET,NEWX), 
        eq(ref(H, plus(RET, 1)), 0),
        eqset(F,singleton(NEWX))]),
  body([list_seg(H,RET,NEWX,N1,F1)],
       [gt(OLDX,0),
        eq(N,plus(N1,1)),
        eq(ref(H, plus(NEWX, 1)), 0),
        z3_not(mem(NEWX,F1)),
        eqset(F, add(F1,NEWX))])
  ]).

%((((len < oldpos) | (oldpos < 0)) => (lseg^(ret, newx) * ((newx |-> loc next: tmp; int key: d) & (tmp l= nil)))) &
%(((0 <= oldpos) & (oldpos <= len)) => (((lseg^(ret, newx) & (lseg-length^(ret, newx) i= oldpos)) 
%* list^(newx)) & ((newx |-> int key: d) * true)))));
unfold(list_insert(H,RET,NEWX,OLDPOS,LEN,F),
  [
  body([list_seg(H,RET,NEWX,N1,F1)],
       [gt(OLDPOS,LEN),
        eq(LEN,plus(N1,1)),
        eq(ref(H, plus(NEWX, 1)), 0),
        z3_not(mem(NEWX,F1)),
        eqset(F, add(F1,NEWX))]),
  body([list_seg(H,RET,NEWX,N1,F1)],
       [gt(0,OLDPOS),
        eq(LEN,plus(N1,1)),
        eq(ref(H, plus(NEWX, 1)), 0),
        z3_not(mem(NEWX,F1)),
        eqset(F, add(F1,NEWX))]),
  body([list_seg(H,RET,NEWX,OLDPOS,F1),
        list(H,NEWX,N2,F2)],
       [geq(OLDPOS,0),
        geq(LEN,OLDPOS),
        eq(LEN,plus(N2,OLDPOS)),
        eqset(emptyset,inter(F1,F2)),
        eqset(F, union(F1,F2))])
  ]).

%((((prev l= nil) & (tmp l= oldx)) | (((lseg^(oldx, prev) * (prev |-> loc next: tmp))
unfold(disj(H,PREV,TMP,OLDX,N,F),
  [
  body([], 
       [eq(PREV,0), 
        eq(TMP,OLDX)]),
  body([list_seg(H,OLDX,PREV,N1,F1)], 
       [eq(ref(H,plus(PREV,1)),TMP),
        eq(N,plus(N1,1)),
        z3_not(mem(PREV,F1)),
        eqset(F,add(F1,PREV))])
  ]).


%bb insert-post1-pre:
%pre: (((list^(x) & (x l= oldx)) & (length^(x) i= len)) & (pos i= oldpos));
%post: list^(x);
%{
%	assume (pos < 0);
%}
run_post1_pre :-
  init_counters,
  addunfoldlevel(0, 0, [list(H0, X, N0, F0)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [list(H0, X, N0, F0)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(0, POS)],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("post1_pre PROVED.\n", []).


%method gslistappend(loc x, int d)
%requires: (list^(x) & (x l= oldx));
%ensures: (list^(ret) & (((oldx l= nil) => (((ret l= newx) & (ret |-> loc next: tmp; int key: d)) & (tmp l= nil))) &
%												  ((~ (oldx l= nil)) => (lseg^(ret, newx) * ((newx |-> loc next: tmp; int key: d) & (tmp l= nil))))));

%bb insert-post1:
%pre: (((list^(x) & (x l= oldx)) & (length^(x) i= len)) & (pos i= oldpos));
%post: (list^(ret) & ((((len < oldpos) | (oldpos < 0)) => (lseg^(ret, newx) * ((newx |-> loc next: tmp; int key: d) & (tmp l= nil)))) &
%	(((0 <= oldpos) & (oldpos <= len)) => (((lseg^(ret, newx) & (lseg-length^(ret, newx) i= oldpos)) * list^(newx)) & ((newx |-> int key: d) * true)))));
%{
%	assume (pos < 0);
%	loc ret := gslistappend(x, d);
%}
run_post1 :-
  init_counters,
  addunfoldlevel(0, 0, [list_append(H0,OLDX,RET,NEWX,LEN,F0)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [list_insert(H0,RET,NEWX,POS,LEN,F0)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(0, POS)],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("post1 PROVED.\n", []).


%bb insert-post2-pre:
%pre: ((((list^(x) & (x l= oldx)) & (length^(x) i= len)) & (pos i= oldpos)) & (0 < len));
%post: list^(x);
%{
%	assume (0 <= pos);
%	assume (pos i== 0);
%}
run_post2_pre :-
  init_counters,
  addunfoldlevel(0, 0, [list(H0, X, N0, F0)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [list(H0, X, N0, F0)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [eq(0, POS)],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("post2_pre PROVED.\n", []).


%method gslistprepend(loc x, int d)
%requires: ((list^(x) & (kk s= keys^(x))) & (x l= oldx)) ;
%ensures: (list^(ret) & ((ret l= newx) & (((ret |-> loc next: oldx; int key: d) * list^(oldx)) & (keys^(ret) s= (kk union (singleton d))))));

%bb insert-post2:
%pre: ((((list^(x) & (x l= oldx)) & (length^(x) i= len)) & (pos i= oldpos)) & (0 < len));
%post: (list^(ret) & ((((len < oldpos) | (oldpos < 0)) => (lseg^(ret, newx) * ((newx |-> loc next: tmp; int key: d) & (tmp l= nil)))) &
% (((0 <= oldpos) & (oldpos <= len)) => (((lseg^(ret, newx) & (lseg-length^(ret, newx) i= oldpos)) * list^(newx)) & ((newx |-> int key: d) * true)))));
%{
%	assume (0 <= pos);
%	assume (pos i== 0);
%	loc ret := gslistprepend(x, d);
%}
run_post2 :-
  init_counters,
  addunfoldlevel(0, 0, [list(H0,X,LEN,F0)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [list(H0,NEWX,N1,F1)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [eq(RET,NEWX),
          gt(RET,0),
          eq(ref(H0,plus(RET,1)),X),
          z3_not(mem(RET,F0)),
          eq(N1,plus(LEN,1)),
          eqset(F1,add(F0,RET)),
          
          gt(LEN,0),
          eq(POS,0)],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("post2 PROVED.\n", []).


%bb insert-loop-pre:
%pre: (((list^(x) & (x l= oldx)) & (length^(x) i= len)) & (pos i= oldpos));
%post:((((newx |-> loc next: temp; int key: d) & (temp l= nil)) * ((((list^(oldx) & (x l= oldx)) & (~ (oldx l= nil))) & (((0 < oldpos) & (0 <= pos)) & (len i= length^(oldx)))) &
%		  ((((prev l= nil) & (tmp l= oldx)) & 
%		  (lseg^(oldx, tmp) & ((lseg-length^(x, tmp) + pos) i= oldpos))) * list^(tmp)))) |
%	    (((newx |-> loc next: temp; int key: d) & (temp l= nil)) * ((((list^(oldx) & (x l= oldx)) & (~ (oldx l= nil))) & (((0 < oldpos) & (0 <= pos)) & (len i= length^(oldx)))) &
%		  (((lseg^(oldx, prev) * (prev |-> loc next: tmp)) & 
%		  (lseg^(oldx, tmp) & ((lseg-length^(x, tmp) + pos) i= oldpos))) * list^(tmp)))));
%{
%	assume (0 <= pos);
%	assume (! (pos i== 0));
%	malloc newx;
%	loc temp := nil;
%	loc newx.next := temp;
%	int newx.key := d;
%	assume (! (x l== nil));
%	loc prev := nil;
%	loc tmp := x;
%}
run_loop_pre :-
  init_counters,
  addunfoldlevel(0, 0, [list(H0,X,LEN,F0)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [list_seg(H0,OLDX,TMP,N1,F1),
                        list(H0,TMP,N2,F2),
                        disj(H0,PREV,TMP,OLDX,N3,F3)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [eq(X,OLDX),
          eq(POS,OLDPOS),
          
          gt(POS,0),
          gt(NEWX,0),
          z3_not(mem(NEWX,F0)),
          eq(ref(H0, plus(NEWX, 1)), 0),
          gt(X,0),
          eq(PREV,0),
          eq(TMP,X)],
         [], UnfoldableHAtoms, 
         [eqset(emptyset,inter(F1,F2)),
          eq(OLDPOS,plus(POS,N1))], []),
  !,
  show_counters,
  printf("LOOP PRE PROVED.\n", []).


%bb insert-loop-inductive:
%pre: ( (((newx |-> loc next: temp; int key: d) & (temp l= nil)) * ((((list^(oldx) & (x l= oldx)) & (~ (oldx l= nil))) & (((0 < oldpos) & (0 <= pos)) & (len i= length^(oldx)))) &
%		  ((((prev l= nil) & (tmp l= oldx)) & (lseg^(oldx, tmp) & ((lseg-length^(x, tmp) + pos) i= oldpos))) * list^(tmp)))) |
%	    (((newx |-> loc next: temp; int key: d) & (temp l= nil)) * ((((list^(oldx) & (x l= oldx)) & (~ (oldx l= nil))) & (((0 < oldpos) & (0 <= pos)) & (len i= length^(oldx)))) &
%		  (((lseg^(oldx, prev) * (prev |-> loc next: tmp)) & (lseg^(oldx, tmp) & ((lseg-length^(x, tmp) + pos) i= oldpos))) * list^(tmp))))
%	  );
%post: ( (((newx |-> loc next: temp; int key: d) & (temp l= nil)) * ((((list^(oldx) & (x l= oldx)) & (~ (oldx l= nil))) & (((0 < oldpos) & (0 <= pos)) & (len i= length^(oldx)))) &
%		  ((((prev l= nil) & (tmp l= oldx)) & (lseg^(oldx, tmp) & ((lseg-length^(x, tmp) + pos) i= oldpos))) * list^(tmp)))) |
%	    (((newx |-> loc next: temp; int key: d) & (temp l= nil)) * ((((list^(oldx) & (x l= oldx)) & (~ (oldx l= nil))) & (((0 < oldpos) & (0 <= pos)) & (len i= length^(oldx)))) &
%		  (((lseg^(oldx, prev) * (prev |-> loc next: tmp)) & (lseg^(oldx, tmp) & ((lseg-length^(x, tmp) + pos) i= oldpos))) * list^(tmp))))
%	  );
%{
%	assume ((0 < pos) && (! (tmp l== nil)));
%	int pos1 := pos - 1;
%	int pos := pos1;
%	loc prev := tmp;
%	loc tmp := prev.next;
%}
run_in_loop :-
  init_counters,
  addunfoldlevel(0, 0, [list_seg(H0,OLDX,TMP,N1,F1),
                        list(H0,TMP,N2,F2),
                        disj(H0,PREV,TMP,OLDX,N3,F3)
                        ],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [list_seg(H0,OLDX,PREV2,N4,F4),
                        list(H0,TMP2,N5,F5)                       
                        ],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [eqset(emptyset,inter(F1,F2)),
          eq(OLDPOS,plus(POS,N1)),
          
          gt(OLDX,0),
          gt(POS,0),
          gt(TMP,0),
          eq(POS1,minus(POS,1)),
          eq(PREV2,TMP),
          eq(TMP2,ref(H0,plus(TMP,1))),
          eq(N4,N1),
          eq(N5,minus(N2,1)),
          eqset(F4,F1),
          eqset(F5,del(F2,TMP)),
          eqset(F6,add(F4,TMP)),
          eq(N6,plus(N4,1))
          ],
         [], UnfoldableHAtoms, 
         [eqset(emptyset,inter(F6,F5)),
          eq(OLDPOS,plus(POS1,N6))], []),
  !,
  show_counters,
  printf("INV PROVED.\n", []).


%bb insert-post3:
%pre: (((list^(x) & (x l= oldx)) & (length^(x) i= len)) & (pos i= oldpos));
%post: (list^(ret) & ((((len < oldpos) | (oldpos < 0)) => (lseg^(ret, newx) * ((newx |-> loc next: temp; int key: d) & (temp l= nil)))) &
%	                 (((0 <= oldpos) & (oldpos <= len)) => (((lseg^(ret, newx) & (lseg-length^(ret, newx) i= oldpos)) * list^(newx)) & ((newx |-> int key: d) * true)))));
%{
%	assume (0 <= pos);
%	assume (! (pos i== 0));
%	malloc newx;
%	loc temp := nil;
%	loc newx.next := temp;
%	int newx.key := d;
%	assume (x l== nil);
%	loc ret := newx;
%}
run_post3 :-
  init_counters,
  addunfoldlevel(0, 0, [list(H0, X, LEN, F0)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(POS,0),
          gt(NEWX,0),
          z3_not(mem(NEWX,F0)),
          eq(ref(H0, plus(NEWX, 1)), 0),
          eq(X,0),
          eq(RET,NEWX)
         ],
         [], UnfoldableHAtoms, 
         [z3_not(mem(NEWX,F0)),
          eq(ref(H0, plus(NEWX, 1)), 0)], []),
  !,
  show_counters,
  printf("AFTER3 PROVED.\n", []).

%bb insert-loop-post4:
%pre: ( (((newx |-> loc next: temp; int key: d) & (temp l= nil)) * ((((list^(oldx) & (x l= oldx)) & (~ (oldx l= nil))) & (((0 < oldpos) & (0 <= pos)) & (len i= length^(oldx)))) &
%		  ((((prev l= nil) & (tmp l= oldx)) & (lseg^(oldx, tmp) & ((lseg-length^(x, tmp) + pos) i= oldpos))) * list^(tmp)))) |
%	    (((newx |-> loc next: temp; int key: d) & (temp l= nil)) * ((((list^(oldx) & (x l= oldx)) & (~ (oldx l= nil))) & (((0 < oldpos) & (0 <= pos)) & (len i= length^(oldx)))) &
%		  (((lseg^(oldx, prev) * (prev |-> loc next: tmp)) & (lseg^(oldx, tmp) & ((lseg-length^(x, tmp) + pos) i= oldpos))) * list^(tmp))))
%	  );
%post: (list^(ret) & ((((len < oldpos) | (oldpos < 0)) => (lseg^(ret, newx) * ((newx |-> loc next: tmp; int key: d) & (tmp l= nil)))) &
%	                 (((0 <= oldpos) & (oldpos <= len)) => (((lseg^(ret, newx) & (lseg-length^(ret, newx) i= oldpos)) * list^(newx)) & ((newx |-> int key: d) * true)))));
%{
%	assume ((pos <= 0) || (tmp l== nil));
%	assume (prev l== nil);
%	loc newx.next := x;
%	loc x := newx;
%	loc ret := x;
%}
run_post4 :-
  init_counters,
  addunfoldlevel(0, 0, [list_seg(H0,OLDX,TMP,N1,F1),
                        list(H0,TMP,N2,F2)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [list(H1,RET,N4,F4)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [eqset(emptyset,inter(F1,F2)),
          
          gt(NEWX,0),
          eqset(F3,union(F1,F2)),
          z3_not(mem(NEWX,F3)),
          arrassign(H1, upd(H0, plus(NEWX, 1), OLDX)),
          eq(RET,NEWX),
          eqset(F4,add(F3,NEWX))
         ],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("AFTER4 PROVED.\n", []).


%bb insert-loop-post5:
%pre: ( (((newx |-> loc next: temp; int key: d) & (temp l= nil)) * ((((list^(oldx) & (x l= oldx)) & (~ (oldx l= nil))) & (((0 < oldpos) & (0 <= pos)) & (len i= length^(oldx)))) &
%		  ((((prev l= nil) & (tmp l= oldx)) & (lseg^(oldx, tmp) & ((lseg-length^(x, tmp) + pos) i= oldpos))) * list^(tmp)))) |
%	    (((newx |-> loc next: temp; int key: d) & (temp l= nil)) * ((((list^(oldx) & (x l= oldx)) & (~ (oldx l= nil))) & (((0 < oldpos) & (0 <= pos)) & (len i= length^(oldx)))) &
%		  (((lseg^(oldx, prev) * (prev |-> loc next: tmp)) & (lseg^(oldx, tmp) & ((lseg-length^(x, tmp) + pos) i= oldpos))) * list^(tmp))))
%	  );
%post: (list^(ret) & ((((len < oldpos) | (oldpos < 0)) => (lseg^(ret, newx) * ((newx |-> loc next: tmp; int key: d) & (tmp l= nil)))) &
%	                 (((0 <= oldpos) & (oldpos <= len)) => (((lseg^(ret, newx) & (lseg-length^(ret, newx) i= oldpos)) * list^(newx)) & ((newx |-> int key: d) * true)))));
%{
%	assume ((pos <= 0) || (tmp l== nil));
%	assume (! (prev l== nil));
%	loc newx.next := tmp;
%	loc prev.next := newx;
%	loc ret := x;
%}
run_post5 :-
  init_counters,
  addunfoldlevel(0, 0, [list_seg(H0,OLDX,PREV,N1,F1),
                        list(H0,TMP,N2,F2)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [list_seg(H2,OLDX,NEWX,OLDPOS,F5),
                        list(H2,NEWX,N6,F6)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [z3_not(mem(PREV,F1)),
          eqset(F5,add(F1,PREV)),
          eqset(emptyset,inter(F5,F2)),
          eq(TMP,ref(H0,plus(PREV,1))),
          eq(OLDPOS1,plus(POS,N1)),
          eq(OLDPOS,plus(OLDPOS1,1)),
          
          eq(0,POS),
          gt(NEWX,0),
          eqset(F3,union(F5,F2)),
          z3_not(mem(NEWX,F3)),
          arrassign(H1, upd(H0, plus(NEWX, 1), TMP)),
          gt(PREV,0),
          arrassign(H2, upd(H1, plus(PREV, 1), NEWX)),
          eqset(F6,add(F2,NEWX))
         ],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("AFTER5 PROVED.\n", []).



run :-
  run_post1_pre,
  run_post1,
  run_post2_pre,
  run_post2,
  run_loop_pre,
  run_in_loop,
  run_post3,
  run_post4,
  run_post5,
  !,
  printf("PROOF SUCCEED.\n", []).

run :-
  printf("PROOF FAILED\n", []).


:- consult('../solver_main.clpr').

:- run, halt.
