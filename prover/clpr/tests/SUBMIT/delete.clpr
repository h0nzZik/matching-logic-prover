inductionlimit(2).
unfolddepthbound(2).

traceleftbound(2).
tracerightbound(1).

declare_unification_type(dcllist_right, [arreq,eq,eq,eqset]).
declare_unification_type(dcllist_left, [arreq,eq,eq,eqset]).

unfold(dcllist_right(H,X,Y,F),
  [
  body([], [eq(X,Y), eqset(F,emptyset)]),
  body([dcllist_right(H,X,T,F1)],
       [gt(T, 0),
        eq(Y, ref(H, plus(T, 1))),
        gt(Y, 0),
        eq(T, ref(H, plus(Y, 2))),
        z3_not(mem(T, F1)),
        eqset(F, add(F1, T))])
  ]).

unfold(dcllist_left(H,X,Y,F),
  [
  body([], [eq(X,Y), eqset(F,emptyset)]),
  body([dcllist_left(H,T,Y,F1)],
       [gt(X, 0),
        eq(T, ref(H, plus(X, 1))),
        gt(T, 0),
        eq(X, ref(H, plus(T, 2))),
        z3_not(mem(X, F1)),
        eqset(F, add(F1, X))])
  ]).

% Here we only prove the obligation cannot be handled by [7]
% It is the lemma stated in their system

run_lemma :-
  init_counters,
  addunfoldlevel(0, 0, [dcllist_left(H0, X, Y, F0)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [dcllist_right(H0, X, Y, F0)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("BEFORE PROVED.\n", []).


run :-
  run_lemma,
  !,
  printf("PROOF SUCCEED.\n", []).

run :-
  printf("PROOF FAILED\n", []).


:- consult('solver_main.clpr').

:- run, halt.
