inductionlimit(1).
unfolddepthbound(2).

traceleftbound(2).
tracerightbound(1).

declare_unification_type(bst, [arreq,eq,eqset,eq,eq]).
declare_unification_type(bst_with_leftmost_hole, [arreq,eq,eq,eqset,eq,eq]).

unfold(bst(H,X,F,MIN,MAX),
  [
  body([], [eq(X,0), eqset(F,emptyset)]),
  body([bst(H,L,F1,MIN1,MAX1),
        bst(H,R,F2,MIN2,MAX2)],
       [gt(X,0), 
        eq(L, ref(H, plus(X,1))),
        eq(R, ref(H, plus(X,2))),
        gt(X,MAX1),
        gt(MIN2,X),
        eq(MIN,MIN1),
        eq(MAX,MAX2),
        z3_not(mem(X,F1)),
        eqset(F3,add(F1,X)),
        eqset(emptyset,inter(F3,F2)),
        eqset(F,union(F3,F2))])
  ]).

unfold(bst_with_leftmost_hole(H,X,HOLE,F,MIN,MAX),
  [
  body([], [eq(X,HOLE), eqset(F,emptyset)]),
  body([], [eq(X,0), eqset(F,emptyset)]),
  body([bst_with_leftmost_hole(H,X,PARENT,F1,MIN1,MAX1),
        bst(H,R,F2,MIN2,MAX2)],
       [gt(PARENT,0), 
        eq(HOLE, ref(H, plus(PARENT,1))),
        eq(R, ref(H, plus(PARENT,2))),
        eq(PARENT,MIN)
       ])
  ]).

% In [24], remove_root_iter calls find_left_most_iter.
% Here, we inline find_left_most_iter instead
% in order to create a true iterative method.

%method bst-find-leftmost(loc x)
%requires: ((bst^(x) & (keys^(x) s= xks2)) & ((~ (x l= nil)) & ((x |-> loc left: xlft) * (~ (xlft l= nil))))) ;
%ensures: ((
%	( bst-with-leftmost-hole^(x, ret) *  
%	  ( (ret |-> loc left: clft; loc right: crgt; int key: cky) * 
%	    ( ( ((clft |-> loc left: clftlft; loc right: clftrgt; int key: clftky) * ((clftlft l= nil) & (bst^(clftrgt) & (clftky lt-set keys^(clftrgt))))) & (keys^(clft) set-lt cky) )
%	      * (bst^(crgt) & (cky lt-set keys^(crgt))) ) 
%	   ) )
%      & (keys^(ret) lt keys-leftmost^(x, ret)) 
%      ) & (xks2 s= (keys^(ret) union keys-leftmost^(x, ret)))) ;



%bb bst-removeroot-iter-left-nil:
%pre: ((bst^(x) & (keys^(x) s= xks)) & ((x |-> int key: ky) * true)) ;
%post: (bst^(ret) & (keys^(ret) s= (xks setminus (singleton ky)))) ;
%{
%	loc xl := x.left;
%	loc xr := x.right;
%	assume (xl l== nil);
%	free x;
%	loc ret := xr;
%}

%bb bst-removeroot-iter-right-nil:
%pre: ((bst^(x) & (keys^(x) s= xks)) & ((x |-> int key: ky) * true)) ;
%post: (bst^(ret) & (keys^(ret) s= (xks setminus (singleton ky)))) ;
%{
%	loc xl := x.left;
%	loc xr := x.right;
%	assume (! (xl l== nil));
%	assume (xr l== nil);
%	free x;
%	loc ret := xl;
%}

%bb bst-removeroot-iter-rightleft-nil:
%pre: ((bst^(x) & (keys^(x) s= xks)) & ((x |-> int key: ky) * true)) ;
%post: (bst^(ret) & (keys^(ret) s= (xks setminus (singleton ky)))) ;
%{
%	loc xl := x.left;
%	loc xr := x.right;
%	assume (! (xl l== nil));
%	assume (! (xr l== nil));
%	loc xrl := xr.left;
%	loc xrr := xr.right;
%	int xrk := xr.key;
%	assume (xrl l== nil);
%	free xr;
%	loc x.right := xrr;
%	int x.key := xrk;
%	loc ret := x;
%}

%bb bst-removeroot-iter-call:
%pre: ((bst^(x) & (keys^(x) s= xks)) & ((x |-> int key: ky) * true)) ;
%post: (bst^(ret) & (keys^(ret) s= (xks setminus (singleton ky)))) ;
%{
%	loc xl := x.left;
%	loc xr := x.right;
%	assume (! (xl l== nil));
%	assume (! (xr l== nil));
%	loc xrl := xr.left;
%	loc xrr := xr.right;
%	int xrk := xr.key;
%	assume (! (xrl l== nil));
%	loc temp := bst-find-leftmost(xr);
%	loc tmpl := temp.left;
%	loc tmplr := tmpl.right;
%	int tmplk := tmpl.key;
%	int x.key := tmplk;
%	loc temp.left := tmplr;
%	free tmpl;
%	loc ret := x;
%}


%bb bst-find-leftmost-before-loop:
%pre: ((bst^(x) & (keys^(x) s= xks)) & ((~ (x l= nil)) & ((x |-> loc left: xlft) * (~ (xlft l= nil))))) ;
%post: ((
%	( bst-with-leftmost-hole^(x, curr) *  
%	  ( (curr |-> loc left: clft; loc right: crgt; int key: cky) * 
%	    ( ( ((clft |-> loc left: clftlft; loc right: clftrgt; int key: clftky) * ((bst^(clftlft) 
%       & (keys^(clftlft) set-lt clftky)) * (bst^(clftrgt) & (clftky lt-set keys^(clftrgt))))) & (keys^(clft) set-lt cky) )
%	      * (bst^(crgt) & (cky lt-set keys^(crgt))) ) 
%	   ) )
%      & (keys^(curr) lt keys-leftmost^(x, curr)) 
%      ) & (xks s= (keys^(curr) union keys-leftmost^(x, curr)))) ;
%{
%	loc curr := x;
%	loc clft := curr.left;
%	loc crgt := curr.right;
%	int cky := curr.key;
%	loc clftlft := clft.left;
%	loc clftrgt := clft.right;
%	int clftky := clft.key;
%}
run_before_loop :-
  init_counters,
  addunfoldlevel(0, 0, [bst(H0, X, F0, MIN0, MAX0)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [bst_with_leftmost_hole(H0, X, CURR, F1, MIN1, MAX1),
                        bst(H0,CLL,F21,MIN21,MAX21),
                        bst(H0,CLR,F22,MIN22,MAX22),
                        bst(H0,CR,F3,MIN3,MAX3)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(X,0),
          eq(CURR,X),
          eq(CL,ref(H0,plus(X,1))),
          eq(CR,ref(H0,plus(X,2))),
          gt(CL,0),
          eq(CLL,ref(H0,plus(CL,1))),
          eq(CLR,ref(H0,plus(CL,2))),
          eqset(emptyset,F1)          
         ],
         [], UnfoldableHAtoms, 
         [eq(CL,ref(H0,plus(X,1))),
          eq(CR,ref(H0,plus(X,2))),
          eq(CLL,ref(H0,plus(CL,1))),
          eq(CLR,ref(H0,plus(CL,2)))
         ], []),
  !,
  show_counters,
  printf("BEFORE LOOP PROVED.\n", []).


%bb bst-find-leftmost-in-loop:
%pre: ((
%	( bst-with-leftmost-hole^(x, curr) *  
%	  ( (curr |-> loc left: clft; loc right: crgt; int key: cky) * 
%	    ( ( ((clft |-> loc left: clftlft; loc right: clftrgt; int key: clftky) 
%* ((bst^(clftlft) & (keys^(clftlft) set-lt clftky)) * (bst^(clftrgt) 
%& (clftky lt-set keys^(clftrgt))))) & (keys^(clft) set-lt cky) )
%	      * (bst^(crgt) & (cky lt-set keys^(crgt))) ) 
%	   ) )
%      & (keys^(curr) lt keys-leftmost^(x, curr)) 
%      ) & (xks s= (keys^(curr) union keys-leftmost^(x, curr)))) ;
%post: ((
%	( bst-with-leftmost-hole^(x, curr1) *  
%	  ( (curr1 |-> loc left: clft1; loc right: crgt1; int key: cky1) * 
%	    ( ( ((clft1 |-> loc left: clftlft1; loc right: clftrgt1; int key: clftky1) 
%* ((bst^(clftlft1) & (keys^(clftlft1) set-lt clftky1)) * (bst^(clftrgt1) 
%& (clftky1 lt-set keys^(clftrgt1))))) & (keys^(clft1) set-lt cky1) )
%	      * (bst^(crgt1) & (cky1 lt-set keys^(crgt1))) ) 
%	   ) )
%      & (keys^(curr1) lt keys-leftmost^(x, curr1)) 
%      ) & (xks s= (keys^(curr1) union keys-leftmost^(x, curr1)))) ;
%{
%	loc clft := curr.left;
%	loc crgt := curr.right;
%	int cky := curr.key;
%	loc clftlft := clft.left;
%	loc clftrgt := clft.right;
%	int clftky := clft.key;
%	assume (! (clftlft l== nil));
%	loc curr1 := clft;
%	loc clft1 := curr1.left;
%	loc crgt1 := curr1.right;
%	int cky1 := curr1.key;
%	loc clftlft1 := clft1.left;
%	loc clftrgt1 := clft1.right;
%	int clftky1 := clft1.key;
%}
run_in_loop :-
  init_counters,
  addunfoldlevel(0, 0, [bst_with_leftmost_hole(H0, X, CURR, F1, MIN1, MAX1),
                        bst(H0,CR,F3,MIN3,MAX3)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [bst_with_leftmost_hole(H0, X, CL, F4, MIN4, MAX4)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(CURR,0),
          eq(CL,ref(H0,plus(CURR,1))),
          eq(CR,ref(H0,plus(CURR,2))),
          gt(CL,0),
          eq(CLL,ref(H0,plus(CL,1))),
          eq(CLR,ref(H0,plus(CL,2))),
          gt(CLL,0),
          eq(CLLL,ref(H0,plus(CLL,1))),
          eq(CLLR,ref(H0,plus(CLL,2))),
          eq(CURR,MIN4)
         ],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("IN LOOP PROVED.\n", []).

%bb bst-find-leftmost-after-loop:
%pre: ((
%	( bst-with-leftmost-hole^(x, curr) *  
%	  ( (curr |-> loc left: clft; loc right: crgt; int key: cky) * 
%	    ( ( ((clft |-> loc left: clftlft; loc right: clftrgt; int key: clftky) 
%* ((bst^(clftlft) & (keys^(clftlft) set-lt clftky)) * (bst^(clftrgt) 
%& (clftky lt-set keys^(clftrgt))))) & (keys^(clft) set-lt cky) )
%	      * (bst^(crgt) & (cky lt-set keys^(crgt))) ) 
%	   ) )
%      & (keys^(curr) lt keys-leftmost^(x, curr)) 
%      ) & (xks s= (keys^(curr) union keys-leftmost^(x, curr)))) ;
%post: ((
%	( bst-with-leftmost-hole^(x, ret) *  
%	  ( (ret |-> loc left: clft; loc right: crgt; int key: cky) * 
%	    ( ( ((clft |-> loc left: clftlft; loc right: clftrgt; int key: clftky) * ((clftlft l= nil) & (bst^(clftrgt) 
%& (clftky lt-set keys^(clftrgt))))) & (keys^(clft) set-lt cky) )
%	      * (bst^(crgt) & (cky lt-set keys^(crgt))) ) 
%	   ) )
%      & (keys^(ret) lt keys-leftmost^(x, ret)) 
%      ) & (xks s= (keys^(ret) union keys-leftmost^(x, ret)))) ;
%{
%	loc clft := curr.left;
%	loc crgt := curr.right;
%	int cky := curr.key;
%	loc clftlft := clft.left;
%	loc clftrgt := clft.right;
%	int clftky := clft.key;
%	assume (clftlft l== nil);
%	loc ret := curr;
%}
run_after_loop :-
  init_counters,
  addunfoldlevel(0, 0, [bst_with_leftmost_hole(H0, X, CURR, F1, MIN1, MAX1),
                        bst(H0,CLL,F21,MIN21,MAX21),
                        bst(H0,CLR,F22,MIN22,MAX22),
                        bst(H0,CR,F3,MIN3,MAX3)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [bst_with_leftmost_hole(H0, X, RET, F1, MIN1, MAX1),
                        bst(H0,CLL,F21,MIN21,MAX21),
                        bst(H0,CLR,F22,MIN22,MAX22),
                        bst(H0,CR,F3,MIN3,MAX3)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(CURR,0),
          eq(CL,ref(H0,plus(CURR,1))),
          eq(CR,ref(H0,plus(CURR,2))),
          gt(CL,0),
          eq(CLL,ref(H0,plus(CL,1))),
          eq(CLR,ref(H0,plus(CL,2))),
          eq(CLL,0),
          eq(CURR,MIN4),
          eq(RET,CURR)
         ],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("AFTER LOOP PROVED.\n", []).

run :-
  run_before_loop,
  run_in_loop,
  run_after_loop,
  !,
  printf("PROOF SUCCEED.\n", []).

run :-
  printf("PROOF FAILED\n", []).


:- consult('../solver_main.clpr').

:- run, halt.
