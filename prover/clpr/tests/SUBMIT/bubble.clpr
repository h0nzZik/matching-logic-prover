inductionlimit(1).
unfolddepthbound(2).

traceleftbound(2).
tracerightbound(2).

declare_unification_type(list, [arreq,eq,eq,eqset]).
declare_unification_type(sorted_list, [arreq,eq,eq,eq,eqset]).


unfold(list(H,X,N,F),
  [
  body([], [eq(X,0), eq(N, 0), eqset(F,emptyset)]),
  body([list(H,T,N1,F1)],
       [gt(X,0), 
        eq(T, ref(H, plus(X,1))),
        z3_not(mem(X, F1)),
        eqset(F, add(F1, X)),
        eq(N, plus(N1,1))])
  ]).


unfold(sorted_list(H,X,N,L,F),
  [
  body([], [gt(X,0), 
            eq(0, ref(H, plus(X, 1))), 
            eq(L, ref(H, plus(X, 2))),
            eq(N, 1), 
            eqset(F,singleton(X))]),
  body([sorted_list(H,T,N1,L1,F1)],
       [gt(X,0), 
        eq(T, ref(H, plus(X, 1))),
        eq(L, ref(H, plus(X, 2))),
        gt(L1, L),
        z3_not(mem(X, F1)),
        eqset(F, add(F1, X)),
        eq(N, plus(N1,1))])
  ]).


% Here we only prove the obligation cannot be handled by [7]
% It is the lemma stated in their system

run_lemma :-
  init_counters,
  addunfoldlevel(0, 0, [sorted_list(H, X, N, L, F)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [list(H, X, N, F)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("LEMMA PROVED.\n", []).


:- consult('../solver_main.clpr').

:- run_lemma, halt.
