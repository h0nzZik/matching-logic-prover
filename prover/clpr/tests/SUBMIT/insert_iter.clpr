inductionlimit(1).
unfolddepthbound(1).

traceleftbound(1).
tracerightbound(1).

declare_unification_type(sorted_list, [arreq,eq,eqset]).
declare_unification_type(sorted_lseg, [arreq,eq,eq,eqset]).

unfold(sorted_list(H,X,F),
  [
  body([], [eq(X,0), eqset(F,emptyset)]),
  body([],
       [gt(X,0), 
        eq(0, ref(H, plus(X,1))),
        eqset(F, singleton(X))]),
  body([sorted_list(H,T,F1)],
       [gt(X,0), 
        eq(T, ref(H, plus(X,1))),
        gt(X,T),
        z3_not(mem(X, F1)),
        eqset(F, add(F1, X))])
  ]).

unfold(sorted_lseg(H,X,Y,F),
  [
  body([], [eq(X,Y), eqset(F,emptyset)]),
  body([sorted_lseg(H,X,T,F1)],
       [gt(T, 0),
        eq(Y, ref(H, plus(T, 1))),
        gt(T,Y),
        z3_not(mem(T, F1)),
        eqset(F, add(F1, T))])
  ]).


%bb insert-nil:
%pre: ((sorted^(x) & (kk s= keys^(x))) & (~ (k i-in kk))) ;
%post: (sorted^(ret) & (keys^(ret) s= (kk union (singleton k)))) ;
%{
%	assume (x l== nil);
%	malloc y;
%	int y.key := k;
%	loc ret := y; 
%}
run_nil :-
  init_counters,
  addunfoldlevel(0, 0, [sorted_list(H0, X, F0)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [sorted_list(H0, RET, F1)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [eq(X,0),
          gt(Y,0),
          z3_not(mem(Y,F0)),
          eq(0,ref(H0,plus(Y,1))),
          eq(RET,Y)
         ],
         [], UnfoldableHAtoms, 
         [eqset(F1,add(F0,Y))], []),
  !,
  show_counters,
  printf("NIL PROVED.\n", []).

%bb insert-before-head:
%pre: ((sorted^(x) & (kk s= keys^(x))) & (~ (k i-in kk))) ;
%post: (sorted^(ret) & (keys^(ret) s= (kk union (singleton k)))) ;
%{
%	assume (! (x l== nil));
%	int xk := x.key;
%	assume (k <= xk);
%	malloc y;
%	int y.key := k;
%	loc y.next := x;
%	loc ret := y;
%}
run_before_head :-
  init_counters,
  addunfoldlevel(0, 0, [sorted_list(H0, X, F0)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [sorted_list(H0, RET, F1)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(X,0),
          gt(Y,0),
          gt(Y,X),
          z3_not(mem(Y,F0)),
          eq(X,ref(H0,plus(Y,1))),
          eq(RET,Y)
         ],
         [], UnfoldableHAtoms, 
         [eqset(F1,add(F0,Y))], []),
  !,
  show_counters,
  printf("BEFORE HEAD PROVED.\n", []).



%bb insert-before-loop:
%pre: ((sorted^(x) & (kk s= keys^(x))) & (~ (k i-in kk))) ;
%post: ( sorted^(x) &
%      ( ((sorted^(curr) & ((xk lt-set keys^(curr)) & (~ (k i-in keys^(curr))))) * ((prev |-> loc next: curr; int key: xk) & (xk < k))) * 
%       lseg^(x, prev) ) ) ;
%{
%	assume (! (x l== nil));
%	int xk := x.key;
%	assume (! (k <= xk));
%	loc prev := x;
%	loc curr := x.next;
%}
run_before_loop :-
  init_counters,
  addunfoldlevel(0, 0, [sorted_list(H0, Y, F0)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [sorted_lseg(H0, Y, CURR, F1),
                        sorted_list(H0, NXT, F2)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(Y,0),
          eq(CURR,Y),
          eq(NXT,ref(H0,plus(Y,1))),
          gt(NXT,0)
         ],
         [], UnfoldableHAtoms, 
         [z3_not(mem(CURR,F1)),
          eq(NXT,ref(H0,plus(CURR,1))),
          eqset(F3,add(F1,CURR)),
          eqset(emptyset,inter(F3,F2)),
          gt(CURR,NXT),
          eqset(F0,union(F3,F2))], []),
  !,
  show_counters,
  printf("BEFORE PROVED.\n", []).

%bb insert-in-loop:
%pre: ( ((sorted^(curr) & ((prevk lt-set keys^(curr)) & (~ (k i-in keys^(curr))))) * ((prev |-> loc next: curr; int key: prevk) & (prevk < k))) * 
%       (lseg^(x, prev) & (lseg-keys^(x, prev) set-lt prevk)) ) ;
%post: ( ((sorted^(curr1) & ((currk lt-set keys^(curr1)) & (~ (k i-in keys^(curr1))))) * ((prev1 |-> loc next: curr1; int key: currk) & (currk < k))) * 
%       (lseg^(x, prev1) & (lseg-keys^(x, prev1) set-lt currk)) ) ;
%{
%	assume (! (curr l== nil));
%	int currk := curr.key;
%	assume (! (k <= currk));
%	loc prev1 := curr;
%	loc curr1 := curr.next;
%}
run_in_loop :-
  init_counters,
  addunfoldlevel(0, 0, [sorted_lseg(H0, Y, CURR, F1),
                        sorted_list(H0, NXT, F2)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [sorted_lseg(H0, Y, CURR1, F4),
                        sorted_list(H0, NXT1, F5)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(CURR,0),
          z3_not(mem(CURR,F1)),
          eq(NXT,ref(H0,plus(CURR,1))),
          eqset(F3,add(F1,CURR)),
          eqset(emptyset,inter(F3,F2)),
          gt(CURR,NXT),
          eqset(F0,union(F3,F2)),
          
          gt(NXT,0),
          eq(CURR1,NXT),
          eq(NXT1,ref(H0,plus(NXT,1))),
          eqset(F4,add(F1,CURR)),
          eqset(F5,del(F2,NXT)),
          gt(NXT1,0)],
         [], UnfoldableHAtoms, 
         [gt(CURR1,0),
          z3_not(mem(CURR1,F4)),
          eq(NXT1,ref(H0,plus(CURR1,1))),
          eqset(F6,add(F4,CURR1)),
          eqset(emptyset,inter(F6,F5)),
          gt(CURR1,NXT1),
          eqset(F0,union(F6,F5))], []),
  !,
  show_counters,
  printf("IN LOOP PROVED.\n", []).

%bb insert-after-loop:
%pre: ( (((keys^(curr) union (singleton prevk)) union lseg-keys^(x, prev)) s= kk) &
%      ( ((sorted^(curr) & ((prevk lt-set keys^(curr)) & (~ (k i-in keys^(curr))))) * ((prev |-> loc next: curr; int key: prevk) & (prevk < k))) * 
%       (lseg^(x, prev) & (lseg-keys^(x, prev) set-lt prevk)) ) ) ;
%post: (sorted^(x) & (keys^(x) s= (kk union (singleton k)))) ;
%{
%	int currk := curr.key;
%	assume ((curr l== nil) || ((! (curr l== nil)) && (k <= currk)));
%	malloc y;
%	int y.key := k;
%	loc y.next := curr;
%	loc prev.next := y;
%}
run_after_loop :-
  init_counters,
  addunfoldlevel(0, 0, [sorted_lseg(H0, Y, CURR, F1),
                        sorted_list(H0, CURR, F2)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [sorted_list(H0, Y, F3)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [eqset(emptyset,inter(F1,F2)),
          eqset(F3,union(F1,F2))],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("AFTER LOOP PROVED.\n", []).

run :-
  run_nil,
  run_before_head,
  run_before_loop,
  run_in_loop,
  run_after_loop,
  !,
  printf("PROOF SUCCEED.\n", []).

run :-
  printf("PROOF FAILED\n", []).


:- consult('../solver_main.clpr').

:- run, halt.
