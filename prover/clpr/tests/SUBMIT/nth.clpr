inductionlimit(1).
unfolddepthbound(1).

traceleftbound(1).
tracerightbound(1).

declare_unification_type(list_seg, [arreq,eq,eq,eq,eqset]).
declare_unification_type(list, [arreq,eq,eq,eqset]).


unfold(list_seg(H,X,Y,N,F),
  [
  body([], [eq(X,Y), eq(N,0), eqset(F,emptyset)]),
  body([list_seg(H,X,T,N1,F1)],
       [gt(T, 0),
        eq(N, plus(N1,1)),
        eq(Y, ref(H, plus(T, 1))),
        z3_not(mem(T, F1)),
        eqset(F, add(F1, T))])
  ]).

unfold(list(H,X,N,F),
  [
  body([], [eq(X,0),eq(N,0),eqset(F,emptyset)]),
  body([list(H,T,N1,F1)],
       [gt(X,0), 
        eq(N,plus(N1,1)),
        eq(T, ref(H, plus(X,1))),
        z3_not(mem(X, F1)),
        eqset(F, add(F1, X))])
  ]).


%bb nth-before-loop:
%pre: ((list^(x) & (0 <= n)) & ((oldx l= x) & (oldn i= n)));
%post: ((list^(oldx) & ((lseg^(oldx, x) & 
%      ((lseg-length^(oldx, x) + n) i= oldn)) * list^(x))) & (0 <= n));
%{
%	loc tmp := nil;
%}
run_before_loop :-
  init_counters,
  addunfoldlevel(0, 0, [list(H0, OldX, N0, F0)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [list_seg(H0, OldX, X, N1, F1),
                        list(H0, X, N2, F2)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [eq(X, OldX),
          eq(OldN,N),
          geq(N,0)],
         [], UnfoldableHAtoms, 
         [eqset(emptyset,inter(F1,F2)),
          eq(OldN, plus(N1, N))], []),
  !,
  show_counters,
  printf("BEFORE-LOOP PROVED.\n", []).



%bb nth-in-loop:
%pre: ((list^(oldx) & ((lseg^(oldx, x) & 
%     ((lseg-length^(oldx, x) + n) i= oldn)) * list^(x))) & (0 <= n));
%post: ((list^(oldx) & ((lseg^(oldx, x) & 
%     ((lseg-length^(oldx, x) + n) i= oldn)) * list^(x))) & (0 <= n));
%{
%	assume ((0 < n) && (! (x l== nil)));
%	int n1 := n - 1;
%	int n := n1;
%	loc tmp := x.next;
%	loc x := tmp;
%}
run_in_loop :-
  init_counters,
  addunfoldlevel(0, 0, [list_seg(H0, OldX, X, N1, F1),
                        list(H0, X, N2, F2)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [list_seg(H0, OldX, TMP, N3, F3),
                        list(H0, TMP, N4, F4)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [eqset(emptyset,inter(F1,F2)),
          eq(OldN, plus(N1, N)),

          gt(X, 0),
          gt(N, 0),

          eq(Nn, minus(N, 1)),
          eq(TMP, ref(H0, plus(X, 1)))],
         [], UnfoldableHAtoms, 
         [eq(emptyset, inter(F3, F4)),
          eq(OldN, plus(N3, Nn))], []),
  !,
  show_counters,
  printf("INV PROVED.\n", []).



%bb nth-after-loop:
%pre: ((list^(oldx) & ((lseg^(oldx, x) & 
%     ((lseg-length^(oldx, x) + n) i= oldn)) * list^(x))) & (0 <= n));
%post: (list^(oldx) & (((length^(oldx) <= oldn) & (ret l= nil)) | 
%      ((oldn < length^(oldx)) & ((lseg^(oldx, ret) & 
%      (lseg-length^(oldx, ret) i= oldn)) * list^(ret)))));
%{
%	assume ((! (0 < n)) || (x l== nil));
%	loc ret := x;
%}
run_after_loop1 :-
  init_counters,
  addunfoldlevel(0, 0, [list_seg(H0, OldX, X, N1, F1),
                        list(H0, X, N2, F2)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [list_seg(H0, OldX, RET, N3, F3),
                        list(H0, RET, N4, F4)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [eqset(emptyset,inter(F1,F2)),
          eq(OldN, plus(N1, N)),
          gt(N2,0),
          eq(N, 0),
          eq(RET, X)],
         [], UnfoldableHAtoms, 
         [gt(plus(N1,N2),OldN),
          eq(emptyset, inter(F3, F4)),
          eq(OldN, N3)], []),
  !,
  show_counters,
  printf("AFTER LOOP1 PROVED.\n", []).

run_after_loop2 :-
  init_counters,
  addunfoldlevel(0, 0, [list_seg(H0, OldX, X, N1, F1),
                        list(H0, X, N2, F2)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [list(H0, OldX, N3, F3)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [eqset(emptyset,inter(F1,F2)),
          eqset(F3, union(F1, F2)),
          eq(N3, plus(N1,N2))],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("AFTER LOOP2 PROVED.\n", []).


run :-
  run_before_loop,
  run_in_loop,
  run_after_loop1,
  run_after_loop2,
  !,
  printf("PROOF SUCCEED.\n", []).

run :-
  printf("PROOF FAILED\n", []).


:- consult('../solver_main.clpr').

:- run, halt.
