inductionlimit(2).
unfolddepthbound(2).

traceleftbound(2).
tracerightbound(2).

declare_unification_type(sorted_list, [arreq,eq,eqset]).
declare_unification_type(sorted_lseg, [arreq,eq,eq,eqset]).

unfold(sorted_list(H,X,F),
  [
  body([], [eq(X,0), eqset(F,emptyset)]),
  body([],
       [gt(X,0), 
        eq(0, ref(H, plus(X,1))),
        eqset(F, singleton(X))]),
  body([sorted_list(H,T,F1)],
       [gt(X,0), 
        eq(T, ref(H, plus(X,1))),
        gt(X,T),
        z3_not(mem(X, F1)),
        eqset(F, add(F1, X))])
  ]).

unfold(sorted_lseg(H,X,Y,F),
  [
  body([], [eq(X,Y), eqset(F,emptyset)]),
  body([sorted_lseg(H,X,T,F1)],
       [gt(T, 0),
        eq(Y, ref(H, plus(T, 1))),
        gt(T,Y),
        z3_not(mem(T, F1)),
        eqset(F, add(F1, T))])
  ]).

run_lemma :-
  init_counters,
  addunfoldlevel(0, 0, [sorted_lseg(H0, X, Y, F1),
                        sorted_list(H0, Z, F2)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [sorted_list(H1, X, F3)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(Y,0),
          gt(Y,Z),
          eqset(F4,add(F1,Y)),
          eqset(emptyset,inter(F4,F2)),
          eqset(F3,union(F4,F2)),
          arrassign(H1, upd(H0, plus(Y, 1), Z))
         ],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("LEMMA PROVED.\n", []).

run :-
  run_lemma,
  !,
  printf("PROOF SUCCEED.\n", []).

run :-
  printf("PROOF FAILED\n", []).


:- consult('../solver_main.clpr').

:- run, halt.
