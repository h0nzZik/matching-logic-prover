inductionlimit(1).
unfolddepthbound(1).

traceleftbound(1).
tracerightbound(1).

declare_unification_type(bst, [arreq,eq,eqset,eq,eq]).
declare_unification_type(bst2, [arreq,eq,eqset,eq,eq]).
declare_unification_type(bst_with_hole, [arreq,eq,eq,eqset,eq,eq,eq]).
declare_unification_type(bst_with_hole_left, [arreq,eq,eq,eqset,eq,eq,eq]).

unfold(bst(H,X,F,MIN,MAX),
  [
  body([], [eq(X,0), eqset(F,emptyset)]),
  body([bst(H,L,F1,MIN1,MAX1),
        bst(H,R,F2,MIN2,MAX2)],
       [gt(X,0), 
        eq(L, ref(H, plus(X,1))),
        eq(R, ref(H, plus(X,2))),
        gt(X,MAX1),
        gt(MIN2,X),
        eq(MIN,MIN1),
        eq(MAX,MAX2),
        z3_not(mem(X,F1)),
        eqset(F3,add(F1,X)),
        eqset(emptyset,inter(F3,F2)),
        eqset(F,union(F3,F2))])
  ]).

unfold(bst2(H,X,F,MIN,MAX),
  [
  body([], [eq(X,0), eqset(F,emptyset)]),
  body([bst2(H,L,F1,MIN1,MAX1),
        bst2(H,R,F2,MIN2,MAX2)],
       [])
  ]).

unfold(bst_with_hole_left(H,X,HOLE,F,MIN,MAX,KEY),
  [
  body([], [eq(X,HOLE), eqset(F,emptyset)]),
  body([bst_with_hole_left(H,L,HOLE,F1,MIN1,MAX1,KEY),
        bst2(H,R,F2,MIN2,MAX2)],
       [gt(X,0), 
        eq(L, ref(H, plus(X,1))),
        eq(R, ref(H, plus(X,2))),
        gt(X,KEY),
        gt(X,MAX1),
        gt(MIN2,X),
        z3_not(mem(X,F1)),
        eqset(F3,add(F1,X)),
        eqset(emptyset,inter(F3,F2)),
        eqset(F,union(F3,F2))]),
  body([bst2(H,L,F1,MIN1,MAX1),
        bst_with_hole_left(H,R,HOLE,F2,MIN2,MAX2,KEY)],
       [gt(X,0), 
        eq(L, ref(H, plus(X,1))),
        eq(R, ref(H, plus(X,2))),
        gt(KEY,X),
        gt(X,MAX1),
        gt(MIN2,X),
        z3_not(mem(X,F1)),
        eqset(F3,add(F1,X)),
        eqset(emptyset,inter(F3,F2)),
        eqset(F,union(F3,F2))])
  ]).


unfold(bst_with_hole(H,X,HOLE,F,MIN,MAX,KEY),
  [
  body([], [eq(X,HOLE), eqset(F,emptyset)]),
  body([bst_with_hole(H,X,PARENT,F1,MIN1,MAX1,KEY),
        bst(H,R,F2,MIN2,MAX2)],
       [gt(PARENT,0), 
        eq(HOLE, ref(H, plus(PARENT,1))),
        eq(R, ref(H, plus(PARENT,2))),
        gt(PARENT,KEY),
        eq(PARENT,MIN)
       ]),
  body([bst(H,L,F1,MIN1,MAX1),
        bst_with_hole(H,X,PARENT,F2,MIN2,MAX2,KEY)],
       [gt(PARENT,0), 
        eq(L, ref(H, plus(PARENT,1))),
        eq(HOLE, ref(H, plus(PARENT,2))),
        gt(KEY,PARENT),
        eq(MAX,PARENT)
       ])
  ]).

%method bst-removeroot(loc x)
%requires: ((bst^(x) & (keys^(x) s= xkss)) & ((x |-> int key: kyy) * true)) ;
%ensures: (bst^(ret) & (keys^(ret) s= (xkss setminus (singleton kyy)))) ;

%bb bst-delete-root:
%pre: ((bst^(x) & (keys^(x) s= xks)) & ((~ (x l= nil)) & (k i-in xks)));
%post: (bst^(ret) & (keys^(ret) s= (xks setminus (singleton k)))) ;
%{
%	int xk := x.key;
%	assume (xk i== k);
%	loc ret := bst-removeroot(x);
%}
run_delete_root :-
  init_counters,
  addunfoldlevel(0, 0, [bst(H0, RET, F1, MIN1, MAX1)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [bst(H0, RET, F1, MIN1, MAX1)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(X,0),
          mem(K,FX),
          eqset(F1,del(FX,K))
         ],
         [], UnfoldableHAtoms, 
         [eqset(F1,del(FX,K))], []),
  !,
  show_counters,
  printf("DELETE ROOT PROVED.\n", []).

%bb bst-delete-before-loop1:
%pre: ((bst^(x) & (keys^(x) s= xks)) & ((~ (x l= nil)) & (k i-in xks)));
%post: ( ((bst-with-hole-k^(x, prt) * bst^(prt)) & (((keys-lt-k^(x, prt) lt keys^(prt)) & (keys^(prt) lt keys-gt-k^(x, prt))) & 
%				(((keys-with-hole-k^(x, prt) union keys^(prt)) s= xks) & ((keys-with-hole-k^(x, prt) intersection keys^(prt)) s= emptyset)))) & 
%       (((~ (curr l= nil)) * (k i-in keys^(curr))) 
%& (((prt |-> loc left: curr; int key: pky) * (k < pky)) | ((prt |-> loc right: curr; int key: pky) * (pky < k)))) ) ;
%{
%	int xk := x.key;
%	assume (k < xk);
%	int pky := xk;
%	loc prt := x;
%	loc curr := x.left;
%}
run_before_loop1 :-
  init_counters,
  addunfoldlevel(0, 0, [bst(H0, X, F0, MIN0, MAX0)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [bst_with_hole(H0, X, PRT, F1, MIN1, MAX1, KEY),
                        bst(H0, PRT, F0, MIN0, MAX0)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(X,0),
          mem(K,FX),
          gt(X,K),
          eq(PRT,X),
          eq(CURR,ref(H0,plus(X,1)))
         ],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("BEFORE LOOP 1 PROVED.\n", []).

%bb bst-delete-before-loop2:
%pre: ((bst^(x) & (keys^(x) s= xks)) & ((~ (x l= nil)) & (k i-in xks)));
%post: ( ((bst-with-hole-k^(x, prt) * bst^(prt)) & (((keys-lt-k^(x, prt) lt keys^(prt)) & (keys^(prt) lt keys-gt-k^(x, prt))) & 
%				(((keys-with-hole-k^(x, prt) union keys^(prt)) s= xks) & ((keys-with-hole-k^(x, prt) intersection keys^(prt)) s= emptyset)))) & 
%       (((~ (curr l= nil)) * (k i-in keys^(curr))) & (((prt |-> loc left: curr; int key: pky) * (k < pky)) | ((prt |-> loc right: curr; int key: pky) * (pky < k)))) ) ;
%{
%	int xk := x.key;
%	assume (xk < k);
%	int pky := xk;
%	loc prt := x;
%	loc curr := x.right;
%}
run_before_loop2 :-
  init_counters,
  addunfoldlevel(0, 0, [bst(H0, X, F0, MIN0, MAX0)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [bst_with_hole(H0, X, PRT, F1, MIN1, MAX1, KEY),
                        bst(H0, PRT, F0, MIN0, MAX0)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(X,0),
          mem(K,FX),
          gt(X,K),
          eq(PRT,X),
          eq(CURR,ref(H0,plus(X,1)))
         ],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("BEFORE LOOP 2 PROVED.\n", []).


%bb bst-delete-in-loop1:
%pre: ( ((bst-with-hole-k^(x, prt) * bst^(prt)) & (((keys-lt-k^(x, prt) lt keys^(prt)) & (keys^(prt) lt keys-gt-k^(x, prt))) & 
%				(((keys-with-hole-k^(x, prt) union keys^(prt)) s= xks) & ((keys-with-hole-k^(x, prt) intersection keys^(prt)) s= emptyset)))) & 
%       (((~ (curr l= nil)) * (k i-in keys^(curr))) & (((prt |-> loc left: curr; int key: pky) * (k < pky)) | ((prt |-> loc right: curr; int key: pky) * (pky < k)))) ) ;
%post: ( ((bst-with-hole-k^(x, prt1) * bst^(prt1)) & (((keys-lt-k^(x, prt1) lt keys^(prt1)) & (keys^(prt1) lt keys-gt-k^(x, prt1))) & 
%				(((keys-with-hole-k^(x, prt1) union keys^(prt1)) s= xks) & ((keys-with-hole-k^(x, prt1) intersection keys^(prt1)) s= emptyset)))) & 
%       (((~ (curr1 l= nil)) * (k i-in keys^(curr1))) & (((prt1 |-> loc left: curr1; int key: pky1) * (k < pky1)) | ((prt1 |-> loc right: curr1; int key: pky1) * (pky1 < k)))) ) ;
%{
%	int pky := prt.key;
%	int currk := curr.key;
%	assume (k < currk);
%	loc prt1 := curr;
%	loc curr1 := curr.left;
%	int pky1 := currk;
%}
run_in_loop1 :-
  init_counters,
  addunfoldlevel(0, 0, [bst_with_hole(H0, X, PRT, F1, MIN1, MAX1, KEY),
                        bst(H0, PRT, F2, MIN2, MAX2)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [bst_with_hole(H0, X, PRT1, F3, MIN3, MAX3, KEY),
                        bst(H0, PRT1, F4, MIN4, MAX4)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(PRT,0),
          eq(PRT1,ref(H0,plus(PRT,1))),
          gt(PRT1,0),
          gt(PRT,KEY),
          eq(PRT,MIN3)
         ],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("IN LOOP 1 PROVED.\n", []).

%bb bst-delete-in-loop2:
%pre: ( ((bst-with-hole-k^(x, prt) * bst^(prt)) & (((keys-lt-k^(x, prt) lt keys^(prt)) & (keys^(prt) lt keys-gt-k^(x, prt))) & 
%				(((keys-with-hole-k^(x, prt) union keys^(prt)) s= xks) & ((keys-with-hole-k^(x, prt) intersection keys^(prt)) s= emptyset)))) & 
%       (((~ (curr l= nil)) * (k i-in keys^(curr))) & (((prt |-> loc left: curr; int key: pky) * (k < pky)) | ((prt |-> loc right: curr; int key: pky) * (pky < k)))) ) ;
%post: ( ((bst-with-hole-k^(x, prt1) * bst^(prt1)) & (((keys-lt-k^(x, prt1) lt keys^(prt1)) & (keys^(prt1) lt keys-gt-k^(x, prt1))) & 
%				(((keys-with-hole-k^(x, prt1) union keys^(prt1)) s= xks) & ((keys-with-hole-k^(x, prt1) intersection keys^(prt1)) s= emptyset)))) & 
%       (((~ (curr1 l= nil)) * (k i-in keys^(curr1))) & (((prt1 |-> loc left: curr1; int key: pky1) * (k < pky1)) | ((prt1 |-> loc right: curr1; int key: pky1) * (pky1 < k)))) ) ;
%{
%	int pky := prt.key;
%	int currk := curr.key;
%	assume (currk < k);
%	loc prt1 := curr;
%	loc curr1 := curr.right;
%	int pky1 := currk;
%}
run_in_loop2 :-
  init_counters,
  addunfoldlevel(0, 0, [bst_with_hole(H0, X, PRT, F1, MIN1, MAX1, KEY),
                        bst(H0, PRT, F2, MIN2, MAX2)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [bst_with_hole(H0, X, PRT1, F3, MIN3, MAX3, KEY),
                        bst(H0, PRT1, F4, MIN4, MAX4)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(PRT,0),
          eq(PRT1,ref(H0,plus(PRT,2))),
          gt(PRT1,0),
          gt(KEY,PRT),
          eq(PRT,MAX3)
         ],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("IN LOOP 2 PROVED.\n", []).

%method bst-removeroot(loc x)
%requires: ((bst^(x) & (keys^(x) s= xkss)) & ((x |-> int key: kyy) * true)) ;
%ensures: (bst^(ret) & (keys^(ret) s= (xkss setminus (singleton kyy)))) ;

%bb bst-delete-after-loop1:
%pre: ( ((bst-with-hole-k^(x, prt) * bst^(prt)) & (((keys-lt-k^(x, prt) lt keys^(prt)) & (keys^(prt) lt keys-gt-k^(x, prt))) & 
%				(((keys-with-hole-k^(x, prt) union keys^(prt)) s= xks) & ((keys-with-hole-k^(x, prt) intersection keys^(prt)) s= emptyset)))) & 
%       (((~ (curr l= nil)) * (k i-in keys^(curr))) & (((prt |-> loc left: curr; int key: pky) * (k < pky)) | ((prt |-> loc right: curr; int key: pky) * (pky < k)))) ) ;
%post: (bst^(ret) & (keys^(ret) s= (xks setminus (singleton k)))) ;
%{
%	int pky := prt.key;
%	int currk := curr.key;
%	assume (k i== currk);
%	loc tmp := bst-removeroot(curr);
%	assume (k < pky);
%	loc prt.left := tmp;
%	loc ret := x;
%}
run_after_loop1 :-
  init_counters,
  addunfoldlevel(0, 0, [bst_with_hole_left(H0, X, PRT, F0, MIN0, MAX0,KEY),
                        bst2(H0, CURR, F1, MIN1, MAX1)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [bst2(H1, RET, F2, MIN2, MAX2)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(CURR,0),
          gt(PRT,0),
          arrassign(H1, upd(H0, plus(PRT, 1), CURR)),
          eq(RET,X)
         ],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("AFTER LOOP 1 PROVED.\n", []).


%bb bst-delete-after-loop2:
%pre: ( ((bst-with-hole-k^(x, prt) * bst^(prt)) & (((keys-lt-k^(x, prt) lt keys^(prt)) & (keys^(prt) lt keys-gt-k^(x, prt))) & 
%				(((keys-with-hole-k^(x, prt) union keys^(prt)) s= xks) & ((keys-with-hole-k^(x, prt) intersection keys^(prt)) s= emptyset)))) & 
%       (((~ (curr l= nil)) * (k i-in keys^(curr))) & (((prt |-> loc left: curr; int key: pky) * (k < pky)) | ((prt |-> loc right: curr; int key: pky) * (pky < k)))) ) ;
%post: (bst^(ret) & (keys^(ret) s= (xks setminus (singleton k)))) ;
%{
%	int pky := prt.key;
%	int currk := curr.key;
%	assume (k i== currk);
%	loc tmp := bst-removeroot(curr);
%	assume (! (k < pky));
%	loc prt.right := tmp;
%	loc ret := x;
%}
run_after_loop2 :-
  init_counters,
  addunfoldlevel(0, 0, [bst_with_hole_left(H0, X, PRT, F0, MIN0, MAX0,KEY),
                        bst2(H0, CURR, F1, MIN1, MAX1)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [bst2(H1, RET, F2, MIN2, MAX2)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(CURR,0),
          gt(PRT,0),
          arrassign(H1, upd(H0, plus(PRT, 2), CURR)),
          eq(RET,X)
         ],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("AFTER LOOP 2 PROVED.\n", []).

run :-
  run_delete_root,
  run_before_loop1,
  run_before_loop2,
  run_in_loop1,
  run_in_loop2,
  run_after_loop1,
  run_after_loop2,
  !,
  printf("PROOF SUCCEED.\n", []).

run :-
  printf("PROOF FAILED\n", []).


:- consult('../solver_main.clpr').

:- run, halt.
