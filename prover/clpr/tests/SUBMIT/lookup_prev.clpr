inductionlimit(1).
unfolddepthbound(1).

traceleftbound(1).
tracerightbound(1).

declare_unification_type(sorted, [arreq,eq,eqset]).
declare_unification_type(sorted_lseg, [arreq,eq,eq,eqset]).

unfold(sorted(H,X,F),
  [
  body([], [eq(X,0), eqset(F,emptyset)]),
  body([sorted(H,T,F1)],
       [gt(X,0), 
        eq(T, ref(H, plus(X,1))),
        gt(T,0),
        gt(ref(H, plus(T,0)), ref(H, plus(X,0))),
        z3_not(mem(X, F1)),
        eqset(F, add(F1, X))])
  ]).

unfold(sorted_lseg(H,X,Y,F),
  [
  body([], [eq(X,Y), eqset(F,emptyset)]),
  body([sorted_lseg(H,X,T,F1)],
       [gt(T,0), 
        eq(Y, ref(H, plus(T,1))),
        gt(Y,0),
        gt(ref(H, plus(Y,0)), ref(H, plus(T,0))),
        z3_not(mem(T, F1)),
        eqset(F, add(F1, T))])
  ]).

%bb lookupprev-before-loop:
%pre: ((sorted-sll^(head) & (locs^(head) s= hks)) & (~ (head l= nil)));
%post: ( (sorted-sll^(head) & (locs^(head) s= hks)) & 
%	( ((prev l= nil) & (head l= curr)) |
%	((~ (prev l= nil)) & ( (sorted-sll^(curr) & (pk lt-set locs^(curr))) * 
%	((sorted-lseg^(head, prev) & ((lseg-locs^(head, prev) set-lt pk) & (pk <= idx))) * (prev |-> loc next: curr; int location: pk)) )) ) );
%{
%	loc prev := nil;
%	loc curr := head;
%}
run_before_loop :-
  init_counters,
  addunfoldlevel(0, 0, [sorted(H0, X, F0)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [sorted(H0, X, F0)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(X,0),
          
          eq(PREV,0),
          eq(CURR,X)],
         [], UnfoldableHAtoms, 
         [eq(PREV,0),
          eq(CURR,X)], []),
  !,
  show_counters,
  printf("BEFORE LOOP PROVED.\n", []).

%bb lookupprev-in-loop:
%pre: ( (sorted-sll^(head) & (locs^(head) s= hks)) & 
%	( ((prev l= nil) & (head l= curr)) |
%	((~ (prev l= nil)) & ( (sorted-sll^(curr) & (pk lt-set locs^(curr))) * 
%	((sorted-lseg^(head, prev) & ((lseg-locs^(head, prev) set-lt pk) & (pk <= idx))) * (prev |-> loc next: curr; int location: pk)) )) ) );
%post: ( (sorted-sll^(head) & (locs^(head) s= hks)) & 
%	( ((prev1 l= nil) & (head l= curr1)) |
%	((~ (prev1 l= nil)) & ( (sorted-sll^(curr1) & (ck lt-set locs^(curr1))) * 
%	((sorted-lseg^(head, prev1) & ((lseg-locs^(head, prev1) set-lt ck) & (ck <= idx))) * (prev1 |-> loc next: curr1; int location: ck)) )) ) );
%{
%	assume (! (curr l== nil));
%	int ck := curr.location;
%	assume (ck <= idx);
%	loc prev1 := curr;
%	loc curr1 := curr.next;
%}
run_in_loop :-
  init_counters,
  addunfoldlevel(0, 0, [sorted_lseg(H0, X, PREV, F0),
                        sorted(H0, CURR, F1)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [sorted_lseg(H0, X, PREV1, F2),
                        sorted(H0, CURR1, F3)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(PREV,0),
          eq(ref(H0, plus(PREV,1)), CURR),
          z3_not(mem(PREV,F0)),
          eqset(F4,add(F0,PREV)),
          eqset(emptyset,inter(F4,F1)),
          
          geq(IDX, ref(H0,plus(PREV,0))),
          geq(IDX, ref(H0,plus(CURR,0))),
          gt(CURR,0),
          gt(ref(H0,plus(CURR,0)),ref(H0,plus(PREV,0))),
          
          eq(PREV1,CURR),
          eq(CURR1,ref(H0,plus(CURR,1))),
          gt(CURR1,0),
          eqset(F2,add(F0,PREV)),
          eqset(F3,del(F1,CURR)),
          eqset(F5,add(F2,PREV1)),
          eqset(F6,union(F4,F1))
         ],
         [], UnfoldableHAtoms, 
         [gt(PREV1,0),
          eq(ref(H0, plus(PREV1,1)), CURR1),
          z3_not(mem(PREV1,F2)),
          eqset(emptyset,inter(F5,F3)),
          geq(IDX, ref(H0,plus(PREV1,0))),
          gt(ref(H0,plus(CURR1,0)),ref(H0,plus(PREV1,0))),
          eqset(F6,union(F5,F3))], []),
  !,
  show_counters,
  printf("IN LOOP PROVED.\n", []).



%bb lookupprev-after-loop1:
%pre: ( (sorted-sll^(head) & (locs^(head) s= hks)) & 
%	( ((prev l= nil) & (head l= curr)) |
%	((~ (prev l= nil)) & ( (sorted-sll^(curr) & (pk lt-set locs^(curr))) * 
%	((sorted-lseg^(head, prev) & ((lseg-locs^(head, prev) set-lt pk) & (pk <= idx))) * (prev |-> loc next: curr; int location: pk)) )) ) );
%post: ( (sorted-sll^(head) & (locs^(head) s= hks)) & 
%	( ((ret l= nil) & (idx lt-set locs^(head))) |
%	((~ (ret l= nil)) & ( (sorted-sll^(rn) & (idx lt-set locs^(rn))) * 
%	((sorted-lseg^(head, ret) & ((lseg-locs^(head, ret) set-lt rk) & (rk <= idx))) * (ret |-> loc next: rn; int location: rk)) )) ) );
%{
%	assume (curr l== nil);
%	loc rn := prev.next;
%	int rk := prev.location;
%	loc ret := prev;
%}
run_after_loop1 :-
  init_counters,
  addunfoldlevel(0, 0, [sorted_lseg(H0, X, PREV, F0),
                        sorted(H0, CURR, F1)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [sorted_lseg(H0, X, PREV, F0),
                        sorted(H0, CURR, F1)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(PREV,0),
          eq(ref(H0, plus(PREV,1)), CURR),
          z3_not(mem(PREV,F0)),
          eqset(F4,add(F0,PREV)),
          eqset(emptyset,inter(F4,F1)),
          
          geq(IDX, ref(H0,plus(PREV,0))),
          eq(CURR,0)
         ],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("AFTER LOOP 1 PROVED.\n", []).

%bb lookupprev-after-loop2:
%pre: ( (sorted-sll^(head) & (locs^(head) s= hks)) & 
%	( ((prev l= nil) & (head l= curr)) |
%	((~ (prev l= nil)) & ( (sorted-sll^(curr) & (pk lt-set locs^(curr))) * 
%	((sorted-lseg^(head, prev) & ((lseg-locs^(head, prev) set-lt pk) & (pk <= idx))) * (prev |-> loc next: curr; int location: pk)) )) ) );
%post: ( (sorted-sll^(head) & (locs^(head) s= hks)) & 
%	( ((ret l= nil) & (idx lt-set locs^(head))) |
%	((~ (ret l= nil)) & ( (sorted-sll^(rn) & (idx lt-set locs^(rn))) * 
%	((sorted-lseg^(head, ret) & ((lseg-locs^(head, ret) set-lt rk) & (rk <= idx))) * (ret |-> loc next: rn; int location: rk)) )) ) );
%{
%	assume (! (curr l== nil));
%	int ck := curr.location;
%	assume (idx < ck);
%	loc rn := prev.next;
%	int rk := prev.location;
%	loc ret := prev;
%}
run_after_loop2 :-
  init_counters,
  addunfoldlevel(0, 0, [sorted_lseg(H0, X, PREV, F0),
                        sorted(H0, CURR, F1)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [sorted_lseg(H0, X, PREV, F0),
                        sorted(H0, CURR, F1)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(PREV,0),
          eq(ref(H0, plus(PREV,1)), CURR),
          z3_not(mem(PREV,F0)),
          eqset(F4,add(F0,PREV)),
          eqset(emptyset,inter(F4,F1)),
          
          geq(IDX, ref(H0,plus(PREV,0))),
          gt(CURR,0),
          gt(ref(H0,plus(CURR,0)),ref(H0,plus(PREV,0))),
          
          gt(ref(H0,plus(CURR,0)), IDX)
          
         ],
         [], UnfoldableHAtoms, 
         [gt(ref(H0,plus(CURR,0)), IDX)], []),
  !,
  show_counters,
  printf("AFTER LOOP 2 PROVED.\n", []).

run_after_loop3 :-
  init_counters,
  addunfoldlevel(0, 0, [sorted_lseg(H0, X, PREV, F1),
                        sorted(H0, PREV, F2)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [sorted(H0, X, F3)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [eqset(emptyset,inter(F1,F2)),
          eqset(F3,union(F1,F2))],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("AFTER LOOP 3 PROVED.\n", []).


run :-
  run_before_loop,
  run_in_loop,
  run_after_loop1,
  run_after_loop2,
  run_after_loop3,
  !,
  printf("PROOF SUCCEED.\n", []).

run :-
  printf("PROOF FAILED\n", []).


:- consult('../solver_main.clpr').

:- run, halt.
