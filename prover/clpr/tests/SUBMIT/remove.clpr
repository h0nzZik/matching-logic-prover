inductionlimit(1).
unfolddepthbound(1).

traceleftbound(1).
tracerightbound(1).

declare_unification_type(list_seg, [arreq,eq,eq,eqset]).
declare_unification_type(list, [arreq,eq,eqset]).
declare_unification_type(list_mem, [eq,eq,eqset,eqset]).
declare_unification_type(list_remove, [arreq,eq,eq,eq,eq,eqset]).
declare_unification_type(list_seg_left, [arreq,eq,eq,eqset]).

unfold(list_seg(H,X,Y,F),
  [
  body([], [eq(X,Y), eqset(F,emptyset)]),
  body([list_seg(H,X,T,F1)],
       [gt(T, 0),
        eq(Y, ref(H, plus(T, 1))),
        z3_not(mem(T, F1)),
        eqset(F, add(F1, T))])
  ]).

unfold(list_seg_left(H,X,Y,F),
  [
  body([], [eq(X,Y), eqset(F,emptyset)]),
  body([list_seg_left(H,T,Y,F1)],
       [gt(X, 0),
        eq(T, ref(H, plus(X, 1))),
        z3_not(mem(X, F1)),
        eqset(F, add(F1, X))])
  ]).

unfold(list(H,X,F),
  [
  body([], [eq(X,0), eqset(F,emptyset)]),
  body([list(H,T,F1)],
       [gt(X,0), 
        eq(T, ref(H, plus(X,1))),
        z3_not(mem(X, F1)),
        eqset(F, add(F1, X))])
  ]).

%    ((((~ (d i-in keys^(tmp))) => (keys^(x) s= (kk setminus (singleton d)))))
unfold(list_mem(DATA,TMP,F_OLD,F_NEW),
  [
  body([],[eq(DATA,TMP)]),
  body([],[gt(DATA,TMP),
           eqset(F_NEW,del(F_OLD,DATA))])
  ]).

%    (((prev l= nil) & (tmp l= x) & list^(x)) 
%    | (((lseg^(x, prev) & (~ (d i-in lseg-keys^(x, prev)))) 
%       * ((prev |-> loc next: tmp; int key: tp) & (~ (d i= tp)))) * list^(tmp))));
unfold(list_remove(H,X,PREV,TMP,DATA,F_NEW),
  [
  body([list(H,X,F)], 
       [eq(PREV,0), 
        eq(TMP,X), 
        eqset(F_NEW,F)]),
  body([list_seg(H,X,PREV,F1),
        list(H,TMP,F_TMP)],
       [eq(ref(H, plus(PREV,1)),TMP),
        z3_not(mem(PREV, F_TMP)),
        eqset(inter(F1,F_TMP),emptyset),
        z3_not(mem(DATA, F1)),
        gt(DATA,PREV),
        eqset(F3, union(F1,F_TMP)),
        eqset(F_NEW, add(F3, PREV))])
  ]).

%bb remove-loop-pre:
%pre: ((kk s= keys^(x)) & (list^(x) & ((~ (d i-in keys^(x))) | (((lseg^(x, y) & (~ (d i-in lseg-keys^(x, y)))) * (y |-> loc next: z; int key: d)) * list^(z)))));
%post: ((kk s= keys^(x)) & ((((prev l= nil) & (tmp l= x)) & list^(x)) | 
%	((((lseg^(x, prev) & (~ (d i-in lseg-keys^(x, prev)))) * ((prev |-> loc next: tmp; int key: tp) 
%	& (~ (d i= tp)))) * (lseg^(tmp, y) & (~ (d i-in lseg-keys^(tmp, y))))) * ((y |-> loc next: z; int key: d) * list^(z)))));
%{
%	loc prev := nil;
%	loc tmp := x;
%}
run_remove_loop_pre :-
  init_counters,
  addunfoldlevel(0, 0, [list(H0, X, F0)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [list(H0, X, F0)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [eq(PREV, 0),
          eq(TMP, X)],
         [], UnfoldableHAtoms, 
         [eq(PREV, 0),
          eq(TMP, X)], []),
  !,
  show_counters,
  printf("remove_loop_pre PROVED.\n", []).

%bb remove-loop-inductive:
%pre: ((kk s= keys^(x)) & ((((prev l= nil) & (tmp l= x)) & list^(x)) | 
%	((((lseg^(x, prev) & (~ (d i-in lseg-keys^(x, prev)))) * ((prev |-> loc next: tmp; int key: tp) 
%& (~ (d i= tp)))) * (lseg^(tmp, y) & (~ (d i-in lseg-keys^(tmp, y))))) * ((y |-> loc next: z; int key: d) * list^(z)))));
%post: ((kk s= keys^(x)) & ((((prev l= nil) & (tmp l= x)) & list^(x)) | 
%	((((lseg^(x, prev) & (~ (d i-in lseg-keys^(x, prev)))) * ((prev |-> loc next: tmp; int key: tp) 
%& (~ (d i= tp)))) * (lseg^(tmp, y) & (~ (d i-in lseg-keys^(tmp, y))))) * ((y |-> loc next: z; int key: d) * list^(z)))));
%{
%	assume (! (tmp l== nil));
%	int tk := tmp.key;
%	assume (! (tk i== d));
%	loc prev := tmp;
%	loc tmp := prev.next;
%	int tp := prev.key;
%}
run_remove_loop_ind :-
  init_counters,
  addunfoldlevel(0, 0, [list_seg(H0,X,PREV,F0),
                        list_seg_left(H0,TMP,Y,F1),
                        list(H0,Z,F2)
                       ],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [list_seg(H0,X,PREV2,F3),
                        list_seg_left(H0,TMP2,Y,F4),
                        list(H0,Z,F2)
                        ],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [z3_not(mem(PREV,F0)),
          eqset(F3,add(F0,PREV)),
          z3_not(mem(Y,F1)),
          eqset(F5,add(F1,Y)),
          eqset(emptyset,inter(F3,F1)),
          eqset(emptyset,inter(F5,F2)),

          gt(PREV,0),
          eq(TMP,ref(H0,plus(PREV,1))),
          gt(Y,0),
          eq(Z,ref(H0,plus(Y,1))),
          
          z3_not(mem(DATA,F0)),
          z3_not(mem(DATA,F1)),
          gt(PREV,DATA),
          eq(Y,DATA),
          
          gt(TMP,0),
          gt(TMP,DATA),
          eq(PREV2,TMP),
          eq(TMP2,ref(H0,plus(PREV2,1))),

          gt(TMP,Y),
          z3_not(mem(TMP2,F3)),
          eqset(F4,del(F1,TMP))
         ],
         [], UnfoldableHAtoms, 
         [z3_not(mem(PREV2,F3)),
          eqset(F6,add(F3,PREV)),
          z3_not(mem(Y,F4)),
          eqset(F7,add(F4,Y)),
          eqset(emptyset,inter(F6,F4)),
          eqset(emptyset,inter(F7,F2)),
          
          z3_not(mem(DATA,F3)),
          z3_not(mem(DATA,F4)),
          gt(PREV2,DATA)], []),
  !,
  show_counters,
  printf("remove_loop_ind PROVED.\n", []).


%bb remove-loop-post1:
%pre: ((kk s= keys^(x)) & ((((prev l= nil) & (tmp l= x)) & list^(x)) | 
%	((((lseg^(x, prev) & (~ (d i-in lseg-keys^(x, prev)))) * ((prev |-> loc next: tmp; int key: tp) 
%& (~ (d i= tp)))) * (lseg^(tmp, y) & (~ (d i-in lseg-keys^(tmp, y))))) * ((y |-> loc next: z; int key: d) * list^(z)))));
%post: (list^(ret) & (((~ (d i-in kk)) => (keys^(ret) s= kk)) &
%				     ((d i-in kk) => (lseg^(ret, z) * list^(z)))));
%{
%	assume (tmp l== nil);
%	loc ret := x;
%}
run_remove_loop_post1 :-
  init_counters,
  addunfoldlevel(0, 0, [list(H0,X,F0)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [list(H0, RET, F0)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [eq(PREV,0),
          eq(TMP,X),
          eq(TMP, 0),
          eq(RET, X)],
         [], UnfoldableHAtoms, 
         [z3_not(mem(DATA,F0))], []),
  !,
  show_counters,
  printf("remove_loop_post1 PROVED.\n", []).

%bb remove-loop-post2:
%pre: ((kk s= keys^(x)) & ((((prev l= nil) & (tmp l= x)) & list^(x)) | 
%	((((lseg^(x, prev) & (~ (d i-in lseg-keys^(x, prev)))) * ((prev |-> loc next: tmp; int key: tp) 
%& (~ (d i= tp)))) * (lseg^(tmp, y) & (~ (d i-in lseg-keys^(tmp, y))))) * ((y |-> loc next: z; int key: d) * list^(z)))));
%post: (list^(ret) & (((~ (d i-in kk)) => (keys^(ret) s= kk)) &
%				     ((d i-in kk) => (lseg^(ret, z) * list^(z)))));
%{
%	assume (! (tmp l== nil));
%	int tk := tmp.key;
%	assume (tk i== d));
%	assume (! (prev l== nil));
%	loc t := tmp.next;
%	loc prev.next := t;
%	free tmp;
%	loc ret := x;
%}
run_remove_loop_post2 :-
  init_counters,
  addunfoldlevel(0, 0, [list_seg(H0,X,PREV,F0),
                        list_seg(H0,TMP,Y,F1),
                        list(H0,Z,F2)
                       ],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [list_seg(H1, RET, Z, F5),
                        list(H1,Z,F2)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [z3_not(mem(PREV,F0)),
          eqset(F3,add(F0,PREV)),
          z3_not(mem(Y,F1)),
          eqset(F4,add(F1,Y)),
          eqset(emptyset,inter(F3,F1)),
          eqset(emptyset,inter(F4,F2)),
          eqset(emptyset,inter(F3,F2)),

          gt(PREV,0),
          eq(TMP,ref(H0,plus(PREV,1))),
          gt(Y,0),
          eq(Z,ref(H0,plus(Y,1))),
          
          z3_not(mem(DATA,F0)),
          z3_not(mem(DATA,F1)),
          gt(PREV,DATA),
          eq(Y,DATA),
          
          gt(TMP, 0),
          eq(TMP,DATA),
          arrassign(H1, upd(H0, plus(PREV, 1), ref(H0, plus(TMP,1)))),
          eq(RET, X)],
         [], UnfoldableHAtoms, 
         [eqset(emptyset,inter(F5,F2))], []),
  !,
  show_counters,
  printf("remove_loop_post2 PROVED.\n", []).



%bb remove-loop-post3:
%pre: ((kk s= keys^(x)) & ((((prev l= nil) & (tmp l= x)) & list^(x)) | 
%	((((lseg^(x, prev) & (~ (d i-in lseg-keys^(x, prev)))) * ((prev |-> loc next: tmp; int key: tp) & (~ (d i= tp)))) * (lseg^(tmp, y) & (~ (d i-in lseg-keys^(tmp, y))))) * ((y |-> loc next: z; int key: d) * list^(z)))));
%post: (list^(ret) & (((~ (d i-in kk)) => (keys^(ret) s= kk)) &
%				     ((d i-in kk) => (lseg^(ret, z) * list^(z)))));
%{
%	assume (! (tmp l== nil));
%	int tk := tmp.key;
%	assume (tk i== d));
%	assume (prev l== nil);
%	loc x := tmp.next;
%	free tmp;
%}
run_remove_loop_post3 :-
  init_counters,
  addunfoldlevel(0, 0, [list(H0, X, F0)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [list_seg(H0, RET, Z, F1),
                        list(H0, Z, F2)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [eq(PREV,0),
          eq(TMP,X),
          
          gt(TMP, 0),
          eq(TMP,DATA),
          eq(RET, ref(H0,plus(TMP,1)))],
         [], UnfoldableHAtoms, 
         [eqset(emptyset,inter(F1,F2))], []),
  !,
  show_counters,
  printf("remove_loop_post3 PROVED.\n", []).

run_remove_loop_post4 :-
  init_counters,
  addunfoldlevel(0, 0, [list_seg(H0, X, PREV, F0),
                        list(H0, PREV, F1)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [list(H0, X, F2)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [eqset(emptyset,inter(F0,F1)),
          eqset(F2,union(F0,F1))
         ],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("remove_loop_post4 PROVED.\n", []).



run :-
  run_remove_loop_pre,
  run_remove_loop_ind,
  run_remove_loop_post1,
  run_remove_loop_post2,
  run_remove_loop_post3,
  run_remove_loop_post4,
  !,
  printf("PROOF SUCCEED.\n", []).

run :-
  printf("PROOF FAILED\n", []).


:- consult('../solver_main.clpr').

:- run, halt.
