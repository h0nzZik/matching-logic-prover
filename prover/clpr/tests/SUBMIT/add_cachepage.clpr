inductionlimit(1).
unfolddepthbound(1).

traceleftbound(1).
tracerightbound(2).

declare_unification_type(sorted, [arreq,eq,eqset]).
declare_unification_type(sorted_lseg, [arreq,eq,eq,eqset]).

unfold(sorted(H,X,F),
  [
  body([], [eq(X,0), eqset(F,emptyset)]),
  body([sorted(H,T,F1)],
       [gt(X,0), 
        eq(T, ref(H, plus(X,1))),
        gt(T,0),
        gt(ref(H, plus(T,0)), ref(H, plus(X,0))),
        z3_not(mem(X, F1)),
        eqset(F, add(F1, X))])
  ]).

unfold(sorted_lseg(H,X,Y,F),
  [
  body([], [eq(X,Y), eqset(F,emptyset)]),
  body([sorted_lseg(H,T,Y,F1)],
       [gt(X,0), 
        eq(T, ref(H, plus(X,1))),
        gt(T,0),
        gt(ref(H, plus(T,0)), ref(H, plus(X,0))),
        z3_not(mem(X, F1)),
        eqset(F, add(F1, X))])
  ]).

%  bb add-nil:
%  pre: ((((sorted-sll^(head) & (locs^(head) s= hks)) & (~ (pk i-in hks))) 
%  & (~ (head l= nil))) * ((page |-> loc next: nill; int location: pk) & (nill l= nil)));
%  post: (sorted-sll^(ret) & (locs^(ret) s= (hks union (singleton pk))));
%  {
%	  assume (head l== nil);
%	  loc page.next := nill;
%	  loc ret := page;
%  }
run_add_nil :-
  init_counters,
  addunfoldlevel(0, 0, [sorted(H0, X, F0)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [sorted(H1, RET, F1)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(X,0),
          gt(Y,0),
          z3_not(mem(Y,F0)),
          
          eq(X,0),
          arrassign(H1, upd(H0, plus(Y,1),0)),
          eq(RET,Y)],
         [], UnfoldableHAtoms, 
         [eqset(F1,union(F0,singleton(Y)))], []),
  !,
  show_counters,
  printf("add-nil PROVED.\n", []).


%  method lookupprev(loc head, int idx)
%  requires: ((sorted-sll^(head) & (locs^(head) s= hkss)) & (~ (head l= nil)));
%  ensures: ( (sorted-sll^(head) & (locs^(head) s= hkss)) &
%	  ( ((ret l= nil) & (idx lt-set locs^(head))) |
%	  ((~ (ret l= nil)) & ( (sorted-sll^(rn) & (idx lt-set locs^(rn))) * 
%	  ((sorted-lseg^(head, ret) & ((lseg-locs^(head, ret) set-lt rk) & (rk <= idx))) 
%  * (ret |-> loc next: rn; int location: rk)) )) ) );

%  bb add-prev-nil:
%  pre: ((((sorted-sll^(head) & (locs^(head) s= hks)) & (~ (pk i-in hks))) 
%  & (~ (head l= nil))) * ((page |-> loc next: nill; int location: pk) & (nill l= nil)));
%  post: (sorted-sll^(ret) & (locs^(ret) s= (hks union (singleton pk))));
%  {
%	  assume (! (head l== nil));
%	  loc prev := lookupprev(head; pk);
%	  assume (prev l== nil);
%	  loc page.next := head;
%	  loc ret := page;
%  }
run_add_prev_nil :-
  init_counters,
  addunfoldlevel(0, 0, [sorted(H0, X, F0)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [sorted(H1, RET, F1)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(X,0),
          gt(Y,0),
          z3_not(mem(Y,F0)),
          eq(ref(H0, plus(Y,1)), 0),
          eq(IND, ref(H0,plus(Y,0))),
          
          gt(ref(H0,plus(X,0)),IND),
          
          eq(PREV,0),
          arrassign(H1, upd(H0, plus(Y,1), X)),
          eq(RET,Y)],
         [], UnfoldableHAtoms, 
         [eqset(F1,union(F0,singleton(Y)))], []),
  !,
  show_counters,
  printf("add-prev-nil PROVED.\n", []).


%  bb add-prev-not-nil:
%  pre: ((((sorted-sll^(head) & (locs^(head) s= hks)) & (~ (pk i-in hks))) 
%  & (~ (head l= nil))) * ((page |-> loc next: nill; int location: pk) & (nill l= nil)));
%  post: (sorted-sll^(ret) & (locs^(ret) s= (hks union (singleton pk))));
%  {
%	  assume (! (head l== nil));
%	  loc prev := lookupprev(head; pk);
%	  assume (! (prev l== nil));
%	  loc prevn := prev.next;
%	  loc page.next := prevn;
%	  loc prev.next := page;
%	  loc ret := head;
%  }
run_add_prev_not_nil :-
  init_counters,
  addunfoldlevel(0, 0, [sorted_lseg(H0, X, PREV, F1),
                        sorted(H0, PREV, F2)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [sorted(H0, X, F3)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [eqset(emptyset,inter(F1,F2)),
          eqset(F3,union(F1,F2))],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("add-prev-not-nil PROVED.\n", []).

run :-
  run_add_nil,
  run_add_prev_nil,
  run_add_prev_not_nil,
  !,
  printf("PROOF SUCCEED.\n", []).

run :-
  printf("PROOF FAILED\n", []).


:- consult('../solver_main.clpr').

:- run, halt.
