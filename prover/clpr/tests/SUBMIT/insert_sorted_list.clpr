inductionlimit(2).
unfolddepthbound(3).

traceleftbound(3).
tracerightbound(3).

declare_unification_type(sorted_list, [arreq,eq,eqset]).
declare_unification_type(sorted_lseg, [arreq,eq,eq,eqset]).
declare_unification_type(sorted_lseg_left, [arreq,eq,eq,eqset]).

unfold(sorted_list(H,X,F),
  [
  body([], [eq(X,0), eqset(F,emptyset)]),
  body([],
       [gt(X,0), 
        eq(0, ref(H, plus(X,1))),
        eqset(F, singleton(X))]),
  body([sorted_list(H,T,F1)],
       [gt(X,0), 
        eq(T, ref(H, plus(X,1))),
        gt(X,T),
        z3_not(mem(X, F1)),
        eqset(F, add(F1, X))])
  ]).

unfold(sorted_lseg(H,X,Y,F),
  [
  body([], [eq(X,Y), eqset(F,emptyset)]),
  body([sorted_lseg(H,X,T,F1)],
       [gt(T, 0),
        eq(Y, ref(H, plus(T, 1))),
        gt(T,Y),
        z3_not(mem(T, F1)),
        eqset(F, add(F1, T))])
  ]).

unfold(sorted_lseg_left(H,X,Y,F),
  [
  body([], [eq(X,Y), eqset(F,emptyset)]),
  body([sorted_lseg_left(H,T,Y,F1)],
       [gt(X, 0),
        eq(T, ref(H, plus(X, 1))),
        gt(X,T),
        z3_not(mem(X, F1)),
        eqset(F, add(F1, X))])
  ]).

%bb insert-sorted-post1:
%pre: (sorted-list^(x) & (kk s= keys^(x)));
%post: (sorted-list^(ret) & (keys^(ret) s= (kk union (singleton d))));
%{
%	loc tmp := x;
%	loc prev := nil;
%	loc tmpnext := nil;
%	assume (x l== nil);
%	malloc newx;
%	int newx.key := d;
%	loc nill := nil;
%	loc newx.next := nill;
%	loc ret := newx;
%}
run_post1 :-
  init_counters,
  addunfoldlevel(0, 0, [sorted_list(H0, X, F0)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [sorted_list(H0, RET, F1)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [eq(X,0),
          gt(Y,0),
          z3_not(mem(Y,F0)),
          eq(0,ref(H0,plus(Y,1))),
          eq(RET,Y)
         ],
         [], UnfoldableHAtoms, 
         [eqset(F1,add(F0,Y))], []),
  !,
  show_counters,
  printf("POST1 PROVED.\n", []).


%bb insert-sorted-loop-pre:
%pre: (sorted-list^(x) & (kk s= keys^(x)));
%post: (((~ (x l= nil)) & (cmp i= (d - tk))) &
%			((keys^(x) s= kk) & ((sorted-list^(x) & ((sorted-lseg^(x, tmp) & ((lseg-keys^(x, tmp) set-lt d) 
%& (lseg-keys^(x, tmp) set-lt tk))) * (sorted-list^(tmp) & ((tmp |-> loc next: tmpnext; int key: tk) * sorted-list^(tmpnext))))) &
%	(((prev l= nil) & (tmp l= x)) | 
%((((sorted-lseg^(x, prev) & (lseg-keys^(x, prev) set-lt tp)) * (prev |-> loc next: tmp; int key: tp)) & sorted-lseg^(x, tmp)) * true)))));
%{
%	loc tmp := x;
%	loc prev := nil;
%	loc tmpnext := nil;
%	assume (! (x l== nil));
%	int tk := x.key;
%	int cmp := d - tk;
%	loc tmpnext := tmp.next;
%}
run_before_loop :-
  init_counters,
  addunfoldlevel(0, 0, [sorted_list(H0, Y, F0)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [sorted_lseg(H0, Y, CURR, F1),
                        sorted_list(H0, NXT, F2)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(Y,0),
          eq(CURR,Y),
          eq(NXT,ref(H0,plus(Y,1))),
          gt(NXT,0)
         ],
         [], UnfoldableHAtoms, 
         [z3_not(mem(CURR,F1)),
          eq(NXT,ref(H0,plus(CURR,1))),
          eqset(F3,add(F1,CURR)),
          eqset(emptyset,inter(F3,F2)),
          gt(CURR,NXT),
          eqset(F0,union(F3,F2))], []),
  !,
  show_counters,
  printf("BEFORE PROVED.\n", []).


%bb insert-sorted-loop-inductive:
%pre: (((~ (x l= nil)) & (cmp i= (d - tk))) &
%			((keys^(x) s= kk) & ((sorted-list^(x) & ((sorted-lseg^(x, tmp) & ((lseg-keys^(x, tmp) set-lt d) & (lseg-keys^(x, tmp) set-lt tk))) * (sorted-list^(tmp) & ((tmp |-> loc next: tmpnext; int key: tk) * sorted-list^(tmpnext))))) &
%			                    (((prev l= nil) & (tmp l= x)) | ((((sorted-lseg^(x, prev) & (lseg-keys^(x, prev) set-lt tp)) * (prev |-> loc next: tmp; int key: tp)) & sorted-lseg^(x, tmp)) * true)))));
%post: (((~ (x l= nil)) & (cmp i= (d - tk))) &
%			((keys^(x) s= kk) & ((sorted-list^(x) & ((sorted-lseg^(x, tmp) & ((lseg-keys^(x, tmp) set-lt d) & (lseg-keys^(x, tmp) set-lt tk))) * (sorted-list^(tmp) & ((tmp |-> loc next: tmpnext; int key: tk) * sorted-list^(tmpnext))))) &
%			                    (((prev l= nil) & (tmp l= x)) | ((((sorted-lseg^(x, prev) & (lseg-keys^(x, prev) set-lt tp)) * (prev |-> loc next: tmp; int key: tp)) & sorted-lseg^(x, tmp)) * true)))));
%{
%	assume ((!(tmpnext l== nil)) && (0 < cmp));
%	loc prev := tmp;
%	int tp := prev.key;
%	loc tmp := prev.next;
%	loc tmpnext := tmp.next;
%	int tk := tmp.key;
%	int cmp := d - tk;
%}
run_in_loop :-
  init_counters,
  addunfoldlevel(0, 0, [sorted_lseg(H0, Y, CURR, F1),
                        sorted_list(H0, NXT, F2)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [sorted_lseg(H0, Y, CURR1, F4),
                        sorted_list(H0, NXT1, F5)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(CURR,0),
          z3_not(mem(CURR,F1)),
          eq(NXT,ref(H0,plus(CURR,1))),
          eqset(F3,add(F1,CURR)),
          eqset(emptyset,inter(F3,F2)),
          gt(CURR,NXT),
          eqset(F0,union(F3,F2)),
          
          gt(NXT,0),
          eq(CURR1,NXT),
          eq(NXT1,ref(H0,plus(NXT,1))),
          eqset(F4,add(F1,CURR)),
          eqset(F5,del(F2,NXT)),
          gt(NXT1,0)],
         [], UnfoldableHAtoms, 
         [gt(CURR1,0),
          z3_not(mem(CURR1,F4)),
          eq(NXT1,ref(H0,plus(CURR1,1))),
          eqset(F6,add(F4,CURR1)),
          eqset(emptyset,inter(F6,F5)),
          gt(CURR1,NXT1),
          eqset(F0,union(F6,F5))], []),
  !,
  show_counters,
  printf("IN LOOP PROVED.\n", []).


%bb insert-sorted-post2:
%pre: (((~ (x l= nil)) & (cmp i= (d - tk))) &
%			((keys^(x) s= kk) & ((sorted-list^(x) & ((sorted-lseg^(x, tmp) & ((lseg-keys^(x, tmp) set-lt d) & (lseg-keys^(x, tmp) set-lt tk))) * (sorted-list^(tmp) & ((tmp |-> loc next: tmpnext; int key: tk) * sorted-list^(tmpnext))))) &
%			                    (((prev l= nil) & (tmp l= x)) | ((((sorted-lseg^(x, prev) & (lseg-keys^(x, prev) set-lt tp)) * (prev |-> loc next: tmp; int key: tp)) & sorted-lseg^(x, tmp)) * true)))));
%post: (sorted-list^(ret) & (keys^(ret) s= (kk union (singleton d))));
%{
%	assume ((tmpnext l== nil) || (cmp <= 0));
%	malloc newx;
%	loc nill := nil;
%	loc newx.next := nill;
%	int newx.key := d;
%	loc tmpnext := tmp.next;
%	assume ((tmpnext l== nil) && (0 < cmp));
%	loc tmp.next := newx;
%	loc ret := x;
%}
run_post2 :-
  init_counters,
  addunfoldlevel(0, 0, [sorted_lseg_left(H0, Y, CURR, F1),
                        sorted_list(H0, NXT, F2)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [sorted_lseg_left(H1, Y, NEWX, F3)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(NEWX,0),
          z3_not(mem(NEWX,F1)),
          eq(ref(H0, plus(NEWX, 1)), 0),
          
          gt(CURR,0),
          eq(ref(H0, plus(CURR, 1)), NXT),
          eq(NXT,0),
          gt(CURR,NEWX),
          arrassign(H1, upd(H0, plus(CURR,1), NEWX)),
          eqset(F3, add(F1, CURR))],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("POST2 PROVED.\n", []).

%bb insert-sorted-post3:
%pre: (((~ (x l= nil)) & (cmp i= (d - tk))) &
%			((keys^(x) s= kk) & ((sorted-list^(x) & ((sorted-lseg^(x, tmp) & ((lseg-keys^(x, tmp) set-lt d) & (lseg-keys^(x, tmp) set-lt tk))) * (sorted-list^(tmp) & ((tmp |-> loc next: tmpnext; int key: tk) * sorted-list^(tmpnext))))) &
%			                    (((prev l= nil) & (tmp l= x)) | ((((sorted-lseg^(x, prev) & (lseg-keys^(x, prev) set-lt tp)) * (prev |-> loc next: tmp; int key: tp)) & sorted-lseg^(x, tmp)) * true)))));
%post: (sorted-list^(ret) & (keys^(ret) s= (kk union (singleton d))));
%{
%	assume ((tmpnext l== nil) || (cmp <= 0));
%	malloc newx;
%	loc nill := nil;
%	loc newx.next := nill;
%	int newx.key := d;
%	loc tmpnext := tmp.next;
%	assume ((! (tmpnext l== nil)) || (cmp <= 0));
%	assume (prev l== nil);
%	loc newx.next := x;
%	loc ret := newx;
%}
run_post3 :-
  init_counters,
  addunfoldlevel(0, 0, [sorted_list(H0, Y, F1)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [sorted_list(H1, NEWX, F2)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(NEWX,0),
          z3_not(mem(NEWX,F1)),
          eq(ref(H0, plus(NEWX, 1)), 0),
          gt(NEWX,Y),
          arrassign(H1, upd(H0, plus(NEWX,1), Y))
         ],
         [], UnfoldableHAtoms, 
         [eqset(F2,add(F1,NEWX))], []),
  !,
  show_counters,
  printf("POST3 PROVED.\n", []).

%bb insert-sorted-post4:
%pre: (((~ (x l= nil)) & (cmp i= (d - tk))) &
%			((keys^(x) s= kk) & ((sorted-list^(x) & ((sorted-lseg^(x, tmp) & ((lseg-keys^(x, tmp) set-lt d) & (lseg-keys^(x, tmp) set-lt tk))) * (sorted-list^(tmp) & ((tmp |-> loc next: tmpnext; int key: tk) * sorted-list^(tmpnext))))) &
%			                    (((prev l= nil) & (tmp l= x)) | ((((sorted-lseg^(x, prev) & (lseg-keys^(x, prev) set-lt tp)) * (prev |-> loc next: tmp; int key: tp)) & sorted-lseg^(x, tmp)) * true)))));
%post: (sorted-list^(ret) & (keys^(ret) s= (kk union (singleton d))));
%{
%	assume ((tmpnext l== nil) || (cmp <= 0));
%	malloc newx;
%	loc nill := nil;
%	loc newx.next := nill;
%	int newx.key := d;
%	loc tmpnext := tmp.next;
%	assume ((! (tmpnext l== nil)) || (cmp <= 0));
%	assume (! (prev l== nil));
%	loc newx.next := tmp;
%	loc prev.next := newx;
%	loc ret := x;
%}
run_post4 :-
  init_counters,
  addunfoldlevel(0, 0, [sorted_lseg(H0, Y, CURR, F1),
                        sorted_list(H0, CURR, F2)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [sorted_list(H0, Y, F3)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [eqset(emptyset,inter(F1,F2)),
          eqset(F3,union(F1,F2))],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("POST4 PROVED.\n", []).


run :-
  run_post1,
  run_before_loop,
  run_in_loop,
  run_post2,
  run_post3,
  run_post4,
  !,
  printf("PROOF SUCCEED.\n", []).

run :-
  printf("PROOF FAILED\n", []).


:- consult('../solver_main.clpr').

:- run, halt.
