inductionlimit(1).
unfolddepthbound(3).

traceleftbound(1).
tracerightbound(1).


declare_unification_type(simpleq, [arreq,eq,eq,eqset]).
declare_unification_type(list_seg, [arreq,eq,eq,eqset]).


unfold(list_seg(H,X,Y,F),
  [
  body([], [eq(X,Y), eqset(F,emptyset)]),
  body([list_seg(H,T,Y,F1)],
       [gt(X, 0),
        eq(T, ref(H, plus(X, 1))),
        z3_not(mem(X, F1)),
        eqset(F, add(F1, X))])
  ]).


unfold(simpleq(H,Fst,Lst,F),
  [
  body([],
	     [eq(Fst, Lst),
	      eqset(F, emptyset)]),
	body([simpleq(H,Fst1,Lst,F1)],
	     [gt(Fst, 0),
	      eq(Fst1, ref(H, plus(Fst, 1))),
	      z3_not(mem(Fst, F1)),
	      eqset(F, add(F1, Fst))])
  ]).

run_not_nil :-
	init_counters,
 	addunfoldlevel(0, 0, [list_seg(H,Fst,MidElm,F1),
	                      simpleq(H,MidElm,Lst,F2)],
		       UnfoldableGAtoms),
  addunfoldlevel(0, 0, [simpleq(H,Fst,Lst,F_F)],
 		       UnfoldableHAtoms),
	lprove(0, 0, 0,
	       [], UnfoldableGAtoms,
	       [eqset(inter(F1, F2), emptyset),
          eqset(F_F, union(F1, F2))],
	       [], UnfoldableHAtoms, 
	       [], []),
	show_counters, !,
  printf("PROOF SUCCEEDED.\n", []).


run_not_nil :-
	printf("Proof Failed\n", []),
	show_counters.

:- consult('../solver_main.clpr').

:- run_not_nil, halt.
