inductionlimit(1).
unfolddepthbound(1).

traceleftbound(1).
tracerightbound(1).

declare_unification_type(dllist_seg, [arreq,eq,eq,eqset]).
declare_unification_type(dllist, [arreq,eq,eqset]).
declare_unification_type(dllist_last, [arreq,eq,eq,eqset]).


unfold(dllist_seg(H,X,Y,F),
  [
  body([], [eq(X,Y), eqset(F,emptyset)]),
  body([dllist_seg(H,X,T,F1)],
       [gt(T, 0),
        gt(Y, 0),
        eq(T, ref(H, plus(Y, 2))),
        eq(Y, ref(H, plus(T, 1))),
        z3_not(mem(T, F1)),
        eqset(F, add(F1, T))])
  ]).

unfold(dllist(H,X,F),
  [
  body([], [eq(X,0), eqset(F,emptyset)]),
  body([dllist(H,T,F1)],
       [gt(X,0), 
        gt(T,0),
        eq(T, ref(H, plus(X,1))),
        eq(X, ref(H, plus(T,2))),
        z3_not(mem(X, F1)),
        eqset(F, add(F1, X))])
  ]).


%(((oldx l= nil) => (ret l= nil)) &
%((~ (oldx l= nil)) => (lseg^(oldx, ret) * ((ret |-> loc next: temp; int key: kx) & (temp l= nil)))))
unfold(dllist_last(H,X,LAST,F),
  [
  body([], [eq(X,0), eq(LAST,0), eqset(F,emptyset)]),
  body([dllist_seg(H,X,LAST,F1)],
       [gt(X,0),
        eq(ref(H, plus(LAST, 1)), 0),
        z3_not(mem(LAST,F1)),
        eqset(F, add(F1,LAST))])
  ]).

run_nil :-
  init_counters,
  addunfoldlevel(0, 0, [dllist(H0, X, F0)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [dllist_last(H0,OLDX,LAST,F0)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [eq(X, OLDX),
          eq(TMP, 0),
          eq(X, 0),
          eq(LAST, X)],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("NIL PROVED.\n", []).



run_before_loop :-
  init_counters,
  addunfoldlevel(0, 0, [dllist(H0, OLDX, F0)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [dllist_seg(H0, OLDX, X, F1),
                        dllist(H0, TMP, F2)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [eq(OLDX,X),
          gt(X,0),
          eq(ref(H0, plus(X, 1)), TMP)],
         [], UnfoldableHAtoms, 
         [eq(ref(H0, plus(X, 1)), TMP),
          z3_not(mem(X,F1)),
          z3_not(mem(X,F2))], []),
  !,
  show_counters,
  printf("BEFORE PROVED.\n", []).

run_in_loop :-
  init_counters,
  addunfoldlevel(0, 0, [dllist_seg(H0, OLDX, X, F1),
                        dllist(H0, TMP, F2)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [dllist_seg(H0, OLDX, X2, F3),
                        dllist(H0, TMP2, F4)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(X,0),
          eq(ref(H0, plus(X, 1)), TMP),
          eq(ref(H0, plus(TMP, 2)), X),
          z3_not(mem(X,F1)),
          z3_not(mem(X,F2)),
          
          eq(X2, TMP),
          gt(TMP, 0),
          eq(TMP2, ref(H0, plus(TMP,1))),
          eq(TMP, ref(H0, plus(TMP2,2))),
          eqset(F3,add(F1,X)),
          z3_not(mem(TMP,F3)),
          eqset(F4,del(F2,TMP))
         ],
         [], UnfoldableHAtoms, 
         [eq(ref(H0, plus(X2, 1)), TMP2),
          eq(ref(H0, plus(TMP2, 2)), X2),
          z3_not(mem(X2,F3)),
          z3_not(mem(X2,F4))], []),
  !,
  show_counters,
  printf("INV PROVED.\n", []).

run_after_loop1 :-
  init_counters,
  addunfoldlevel(0, 0, [dllist_seg(H0, OLDX, X, F1),
                        dllist(H0, TMP, F2)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [dllist_last(H0, OLDX, LAST, F3)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [gt(OLDX,0),
          gt(X,0),
          eq(ref(H0, plus(X, 1)), TMP),
          z3_not(mem(X,F1)),
          z3_not(mem(X,F2)),
          
          eq(TMP, 0),
          eq(LAST,X)
         ],
         [], UnfoldableHAtoms, 
         [eqset(F3,add(F1,LAST))], []),
  !,
  show_counters,
  printf("AFTER1 PROVED.\n", []).

run_after_loop2 :-
  init_counters,
  addunfoldlevel(0, 0, [dllist_seg(H0, OLDX, X, F1),
                        dllist(H0, X, F2)],
                 UnfoldableGAtoms),
  addunfoldlevel(0, 0, [dllist(H0, OLDX, F3)],
                 UnfoldableHAtoms),
  lprove(0, 0, 0,
         [], UnfoldableGAtoms,
         [eqset(emptyset,inter(F1,F2)),
          eqset(F3,union(F1,F2))
         ],
         [], UnfoldableHAtoms, 
         [], []),
  !,
  show_counters,
  printf("AFTER2 PROVED.\n", []).

run :-
  run_nil,
  run_before_loop,
  run_in_loop,
  run_after_loop1,
  run_after_loop2,
  !,
  printf("PROOF SUCCEED.\n", []).

run :-
  printf("PROOF FAILED\n", []).


:- consult('../solver_main.clpr').

:- run, halt.
