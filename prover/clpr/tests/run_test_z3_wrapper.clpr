%-------------------------------------------------------------------------%
% extern_solver_unsat_core(+NegImplied,+CL,-ML)
%-------------------------------------------------------------------------%
% * If NegImplied is of the form [L] where L is a list of constraints
% c1,...,cn then NegImplied is interpreted as a conjunction of the
% constraints c1,...cn.
%
% * If NegImplied is of the form [L1,...Ln] where each Li is a list of
% constraints then NegImplied is interpreted as a disjunction of each
% Li
%
% ML has the same length than CL. If the i-th element of ML is marked
% ('o') then the i-th element of CL is part of the unsat core.
%-------------------------------------------------------------------------%

% Linear arithmetic
test_extern_solver_unsat_core_1:-	
	extern_solver_unsat_core([[gt(X1,5),gt(Y,0)]],
				 [assign(X0,1),
				  assign(X1,plus(X0,1)),
				  assign(Y,5)],ML1),
	print_message("computed ML:%\n",[ML1]),
	print_message("must be  ML:[o, o, _]\n",[]),
	extern_solver_unsat_core([[gt(A1,0),gt(B,5)]],
				 [assign(A0,1),
				  assign(A1,plus(A0,1)),
				  assign(B,5)],ML2),
	print_message("computed ML:%\n",[ML2]),
	print_message("must be  ML:[_, _, o]\n",[]),
	print_message("should raise an error\n",[]),		
	extern_solver_unsat_core([[gt(P1,0),gt(Q,5)]],
				 [assign(P0,1),
				  assign(P1,plus(P0,1)),
				  assign(Q,6)],ML3),
	print_message("computed ML:%\n",[ML3]).
test_extern_solver_unsat_core_2:-
	extern_solver_unsat_core([[gt(1,X)],[gt(X,1)],[gt(Y,1)],[gt(1,Y)]],
				 [assign(X,1),assign(Y,1)],ML),
	print_message("computed ML:%\n",[ML]),
	print_message("must be  ML:[o,o]\n",[]).
test_extern_solver_unsat_core_3 :-
	extern_solver_unsat_core([[eq(X, 5.000000), eq(Y, 10.000000)]],
				 [assign(X, 5.000000), assign(Y, 0)],ML),
	print_message("computed ML:%\n",[ML]),
	print_message("must be  ML:[_,o]\n",[]).
% Arrays+Linear arithmetic
test_extern_solver_unsat_core_4 :-
	extern_solver_unsat_core([[gt(Z0,8),gt(8,Z0)]],
				 [arrassign(A1,upd(_A0,X0,3)),arrassign(A2,upd(A1,Y0,5)),
				  gt(X0,Y0),eq(ref(A2,Y0),Z0)], ML),
	print_message("computed ML:%\n",[ML]),
	print_message("must be  ML:[_,o]\n",[]).	


test_entailment_1 :-
	entailment_check(
	[gt(_h31954, 0), 
	 eqset(inter(_h31962, _h33268), emptyset), 
	 eqset(inter(_h31962, _h33255), emptyset), 
	 eqset(inter(_h33268, _h33255), emptyset), 
	 eq(_h31983, 0), 
	 gt(_h31988, 0), 
	 eqset(_h31993, union(_h31962, _h33268)), 
	 eqset(_h32001, union(_h31993, _h33255)), 
	 z3_not(mem(_h31988, _h32001)), 
	 arrassign(_h32016, upd(_h32019, plus(_h31988, 1), _h32021)), 
	 eq(_h32028, _h31988)],

	[gt(_h31954, 0), 
	 eq(ref(_h32016, plus(_h31988, 1)), _h32039), 
	 eqset(inter(_h33268, _h33255), emptyset), 
	 z3_not(mem(_h31988, _h33255)), 
	 eqset(add(_h32001, _h31988), add(union(_h33268, _h33255), _h31988)),
         tt], [], []), !.

% defined by Xiaohong to test CLPR-Z3 translation.

test_arr_0 :-
  z3_check_sat_from_list(
  [arrassign(A2, upd(A1, X1, Y1)),
   eq(Z, 0),
   eq(ref(A3, 1), X2),
   eq(ref(A3, 2), 3),
   eq(ref(A3, plus(Z, 1)), X1),
   eq(ref(A3, plus(Z, 2)), Y1),
   z3_not(eq(ref(A2, X2), 3))],
   Res),
	print_solver_result(Res),
 	true.

test_arr_1 :-
	z3_check_implies([arrassign(A1,upd(_A0,Y0,3)), arrassign(A2,upd(A1,Y0,5)), arrassign(_A3, upd(A2, _, 1))],
                         [eq(3, ref(A1, Y0)), eq(5, ref(A2, Y0))], 
			 Res),
	printf("Res = %\n", [Res]).




test_arr_2 :-
	z3_check_implies(
	[gt(_h5426, 0), 
	 gt(_h5431, 0), 
	 gt(_h5436, 0), 
	 z3_not(mem(_h5431, _h5444)), 
	 z3_not(eq(_h5426, _h5436)), 
	 z3_not(eq(_h5431, _h5436)), 
	 z3_not(eq(_h5436, plus(_h5426, 1))), 
	 z3_not(eq(_h5431, _h5426)), 
	 eq(_h5479, _h5436), 
	 z3_not(eq(_h5431, plus(_h5426, 1))), 
	 eq(_h5479, ref(_h5497, plus(_h5426, 1))), 
	 gt(_h5479, 0), 
	 eq(_h5436, ref(_h5497, plus(_h5426, 2))), 
	 arrassign(_h5521, upd(_h5497, plus(_h5431, 1), _h5479)), 
	 eq(0, ref(_h5497, plus(_h5436, 1))), 
	 arrassign(_h5544, upd(_h5521, plus(_h5426, 1), _h5431)), 
	 eqset(_h5444, singleton(_h5479)), 
	 eqset(_h5563, add(_h5444, _h5431)), 
	 eq(_h5571, ref(_h5544, plus(_h5426, 1))), 
	 %arrassign(_h5582, upd(_h5544, plus(_h5426, 1), _h5587)), 
	 eq(_h5594, ref(_h5544, plus(_h5426, 2)))
        ],
	[gt(_h5426, 0), 
	 gt(_h5594, 0), 
	 z3_not(eq(_h5426, _h5587)), 
	 gt(_h5594, 0), 
	 z3_not(eq(_h5426, _h5594)), 
	 gt(_h5571, 0), 
	 z3_not(eq(_h5594, plus(_h5426, 1))), 
	 eq(_h5587, _h5594),
	 z3_not(eq(_h5426, _h5571)), 
	 z3_not(eq(_h5571, plus(_h5426, 1))), 
	 z3_not(eq(_h5571, _h5594)), 
	 eq(_h5571, ref(_h5544, plus(_h5426, 1))), 
	 eq(_h5594, ref(_h5544, plus(_h5426, 2))), 
	 eq(_h5587, ref(_h5544, plus(_h5571, 1))), 
	 eq(0, ref(_h5544, plus(_h5594, 1))), 
	 eqset(_h5563, add(singleton(_h5587), _h5571)), 
	 z3_not(mem(_h5426, _h5563)), tt], Res),

	printf("Res = %\n", [Res]), !.


test_arr_3 :-
	z3_check_implies(
	[gt(_h5457, 0), 
	 gt(_h5462, 0), 
	 gt(_h5467, 0), 
	 z3_not(mem(_h5462, _h5475)), 
	 z3_not(eq(_h5457, _h5467)), 
	 z3_not(eq(_h5462, _h5467)), 
	 z3_not(eq(_h5467, plus(_h5457, 1))), 
	 z3_not(eq(_h5462, _h5457)), 
	 eq(_h5510, _h5467), 
	 z3_not(eq(_h5462, plus(_h5457, 1))), 
	 eq(_h5510, ref(_h5528, plus(_h5457, 1))), 
	 gt(_h5510, 0), 
	 eq(_h5467, ref(_h5528, plus(_h5457, 2))), 
	 arrassign(_h5552, upd(_h5528, plus(_h5462, 1), _h5510)), 
	 eq(0, ref(_h5528, plus(_h5467, 1))), 
	 arrassign(_h5575, upd(_h5552, plus(_h5457, 1), _h5462)), 
	 eqset(_h5475, singleton(_h5510)), 
	 eqset(_h5594, add(_h5475, _h5462)), 
	 eq(_h5602, ref(_h5575, plus(_h5457, 1))), 
	 eq(_h5613, ref(_h5575, plus(_h5457, 2)))
        ],
	[gt(_h5457, 0), 
	 gt(_h5613, 0), 
	 z3_not(eq(_h5457, _h5613)), 
	 gt(_h5613, 0), 
	 z3_not(eq(_h5457, _h5613)),
	 gt(_h5602, 0),
	 z3_not(eq(_h5613, plus(_h5457, 1))), 
	 z3_not(eq(_h5457, _h5602)),
	 z3_not(eq(_h5602, plus(_h5457, 1))),
	 z3_not(eq(_h5602, _h5613)), 
	 eq(_h5602, ref(_h5575, plus(_h5457, 1))), 
	 eq(_h5613, ref(_h5575, plus(_h5457, 2))), 
	 eq(_h5613, ref(_h5575, plus(_h5602, 1))), 
	 eq(0, ref(_h5575, plus(_h5613, 1))), 
	 eqset(_h5594, add(singleton(_h5613), _h5602)), 
	 z3_not(mem(_h5457, _h5594)), 
	 tt], Res),
	printf("Res = %\n", [Res]), !.
:- consult('z3_wrapper.clpr').


% Change test_arr_0 to other tests to run them
run :- test_arr_0.
:- run, halt.
