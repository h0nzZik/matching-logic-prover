declare_unification_type(list_segment, [arreq, eq, eq, eqset]) .
declare_unification_type(find        , [arreq, eq, eq, eqset, eq, eq]) .

unfold( list_segment(Heap, Begin, End, F)
      , body( []
            , []
            , [ eq(Begin, End)
              , eqset(F, emptyset)
              ]
            )
      , body( []
            , [ list_segment(Heap, Next, End, F1) ]
            , [ z3_not(eq(Begin, End))
              , next(Heap, Begin, Next)
              , nextHeaplet(Begin, F, F1)
              ]

unfold( find(Heap, Begin, End, F, Element, Ret)
      , [ % If Begin == End, return Null
          body( []
              , [] 
              , [ eq(Begin, End)
                , eq(Ret, 0)
                ]
              )
        , % If dereferencing the pointer gives us the value, return the current location
          body( []
              , []
              , [ deref(Heap, Begin, X)
                , z3_not(eq(Begin, End))
                , eq(Ret, Begin)
                ]
              )
        , % Otherwise, recurse
          body( [2,4,6]
              , [find(Heap, Next, End, F1, Element, Ret)]
              , [ next(Heap, Begin, Next)
                , nextHeaplet(Begin, F, F1)
                , z3_not(eq(Begin, End))
                , deref(Heap, Begin, V)
                , z3_not(V, X)
                ]
              )
        ]
      ) .

list_segment(Heap, Begin, End, F) -> find(Heap, Begin, End, F, 4, Ret)
