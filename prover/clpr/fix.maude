mod FIX is

  ---- This is the main module where the prover
  ---- is implemented. It includes a syntax for
  ---- the logic and definitions of general purpose
  ---- proof rules, including (Plugin), (Plugout),
  ---- (KT), and (Collapse).

  including NAT .

  sorts Variable0 Variable Variables .
  sorts Pattern Patterns Goal Goals .
  subsort Variable0 < Variable .
  subsort Variable < Pattern Variables .
  subsort Pattern < Patterns .
  subsort Goal < Goals .

  vars VC : Nat .
  vars F G X Y Z V V' : Variable . vars P Q R R' : Pattern .
  vars Vs Vs' Vs'' Vs''' FV Zs : Variables . vars Ps Qs Rs : Patterns .

  ops x y z w u v f g t : -> Variable0 .
  ---- lots of fresh copies for variables x y z ...
  op [__] : Variable0 Nat -> Variable [format(g d d d o)] .

  ops p q r : -> Pattern .

  ---- variable lists. order matters! (e.g. in lambda abstraction).
  op empty : -> Variables .
  op __ : Variables Variables -> Variables [assoc] . 
  op _\_ : Variables Variables -> Variables .  ---- list minus
  eq empty Vs = Vs .
  eq Vs empty = Vs .
  eq Vs \ empty = Vs .
  eq empty \ Z = empty .
  eq Z \ Z = empty .
 ceq V \ Z = V if V =/= Z .
  eq (V Vs) \ Z = (V \ Z) (Vs \ Z) .
  eq Vs \ (Z Zs) = (Vs \ Z) \ Zs .
  eq Vs \ empty = Vs .
  eq empty \ Vs = empty .

  ---- matching logic syntax
  ops top bottom : -> Pattern .
  op _/\_ : Pattern Pattern -> Pattern [prec 68 assoc comm] .
  op _\/_ : Pattern Pattern -> Pattern [prec 69 assoc comm] .
  op _->_ : Pattern Pattern -> Pattern [prec 70] .
  op !_ : Pattern -> Pattern [prec 65] . ---- negation
  op floor`(_`) : Pattern -> Pattern .
  op _==_ : Pattern Pattern -> Pattern [prec 66] .
  op _!=_ : Pattern Pattern -> Pattern [prec 66] .
  op forall_._ : Variables Pattern -> Pattern [prec 72] .
  op exists_._ : Variables Pattern -> Pattern [prec 72] .
  ---- some simplification rules just in case.
  eq forall empty . P = P .
  eq exists empty . P = P .
  ---- fixpoint syntax: lfp and gfp
  op mu_._ : Variable Pattern -> Pattern [prec 72] .
  op nu_._ : Variable Pattern -> Pattern [prec 72] .
  ---- lambda calculus syntax: abstraction and application
  op lambda_._ : Variables Pattern -> Pattern [prec 72] .
  op _@`(_`) : Pattern Patterns -> Pattern [prec 59 format(d s s d d d)] .
  ---- some rules for beta-reduction.
  eq (lambda V . P) @ (Q) = P[Q / V] .
  eq (lambda V Vs . P) @ (Q) = (lambda Vs . P)[Q / V] .
  eq (lambda V . P) @ (Q, Qs) = P[Q / V] @ (Qs) .
  eq (lambda V Vs . P) @ (Q, Qs) = (lambda Vs . (P[Q / V])) @ (Qs)  .

  op _,_ : Patterns Patterns -> Patterns [prec 75 assoc] .

  ---- proof goals
  op |-_ : Pattern -> Goal [prec 80] .
  op done : -> Goals .  ---- done means all proof goals are discharged.
  op _and_ : Goals Goals -> Goals [prec 82 assoc comm id: done format(d n n d)] .

  ---- substitution, free variables, etc. 
  op fv : Patterns -> Variables . ---- collect fvs from patterns
  op _[_/_] : Patterns Pattern Variable -> Patterns .
  op _[_/_] : Patterns Variables Variables -> Patterns . ---- variable renaming
  op get-vc : Variables -> Nat . ---- get the maximum variable counter
  op freshcopy : Variables Nat Variables -> Variables . ---- fresh copies
  op inFV : Variable0 Variables -> Bool .
  op delete-duplicates : Variables -> Variables . ---- delete duplicates in lists

  eq fv(X) = X .
  eq fv(p) = empty .
  eq fv(q) = empty .
  eq fv(r) = empty .
  eq fv(P /\ Q) = delete-duplicates(fv(P) fv(Q)) .
  eq fv(P \/ Q) = delete-duplicates(fv(P) fv(Q)) .
  eq fv(P -> Q) = delete-duplicates(fv(P) fv(Q)) .
  eq fv(! P) = fv(P) .
  eq fv(floor(P)) = fv(P) .
  eq fv(P == Q) = delete-duplicates(fv(P) fv(Q)) .
  eq fv(P != Q) = delete-duplicates(fv(P) fv(Q)) .
  eq fv(exists Vs . P) = delete-duplicates(fv(P) \ Vs) .
  eq fv(forall Vs . P) = delete-duplicates(fv(P) \ Vs) .
  eq fv(mu V . P) = delete-duplicates(fv(P) \ V) .
  eq fv(nu V . P) = delete-duplicates(fv(P) \ V) .
  eq fv(lambda Vs . P) = delete-duplicates(fv(P) \ Vs) .
  eq fv(P @ (Qs)) = delete-duplicates(fv(P) fv(Qs)) .
  eq fv(Q, Qs) = delete-duplicates(fv(Q) fv(Qs)) .

  eq delete-duplicates(empty) = empty .
  eq delete-duplicates(V) = V .
  eq delete-duplicates(V Vs) = V delete-duplicates(Vs \ V) .

  eq X [R / X] = R .
 ceq Y [R / X] = Y if X =/= Y .
  eq p [R / X] = p . eq q [R / X] = q . eq r [R / X] = r . 
  eq (P -> Q)[R / X] = (P[R / X]) -> (Q[R / X]) .
  eq (P /\ Q)[R / X] = (P[R / X]) /\ (Q[R / X]) .
  eq (P \/ Q)[R / X] = (P[R / X]) \/ (Q[R / X]) .
  eq (! P)[R / X] = ! (P[R / X]) .
  eq (floor(P))[R / X] = floor(P[R / X]) .
  eq (P == Q)[R / X] = (P[R / X]) == (Q[R / X]) .
  eq (P != Q)[R / X] = (P[R / X]) != (Q[R / X]) .
 ceq (forall Vs . P)[R / X] 
   = forall Vs' . (P[Vs' / Vs][R / X])
  if VC := get-vc(fv(P) fv(R))  ---- get the max variable counter
  /\ Vs' := freshcopy(Vs, VC + 1, fv(R)) ---- get fresh copies
  .
 ceq (exists Vs . P)[R / X] 
   = exists Vs' . (P[Vs' / Vs][R / X])
  if VC := get-vc(fv(P) fv(R))  ---- get the max variable counter
  /\ Vs' := freshcopy(Vs, VC + 1, fv(R)) ---- get fresh copies .
  .
 ceq (mu V . P)[R / X] 
   = mu V . (P[V' / V][R / X])
  if VC := get-vc(fv(P) fv(R))  ---- get the max variable counter
  /\ V' := freshcopy(V, VC + 1, fv(R)) ---- get fresh copies .
  .
 ceq (nu V . P)[R / X] 
   = nu V . (P[V' / V][R / X])
  if VC := get-vc(fv(P) fv(R))  ---- get the max variable counter
  /\ V' := freshcopy(V, VC + 1, fv(R)) ---- get fresh copies .
  .
 ceq (lambda Vs . P)[R / X] 
   = lambda Vs' . (P[Vs' / Vs][R / X])
  if VC := get-vc(fv(P) fv(R))  ---- get the max variable counter
  /\ Vs' := freshcopy(Vs, VC + 1, fv(R)) ---- get fresh copies .
  .
  eq (P @ (Qs))[R / X]
   = P[R / X] @ (Qs[R / X]) . 
  eq (P, Ps) [R / X] = P[R / X], Ps[R / X] .

  eq P [(V Vs) / (V' Vs')] = P[V / V'][Vs / Vs'] .
  eq (P, Ps) [Vs / Vs'] = P[Vs / Vs'], Ps[Vs / Vs'] .

  eq get-vc(V:Variable0) = 0 .
  eq get-vc([V VC]) = VC .
  eq get-vc(V Vs) = max(get-vc(V), get-vc(Vs)) .

  eq freshcopy(V:Variable0, VC, FV)
   = if inFV(V:Variable0, FV)
     then [V:Variable0 VC]
     else V:Variable0
     fi .
  eq freshcopy([V VC0:Nat], VC, FV)
   = if inFV(V, FV)
     then [V VC]
     else [V VC0:Nat]
     fi .
  eq freshcopy((V Vs), VC, FV) = freshcopy(V, VC, FV) freshcopy(Vs, VC, FV) .

  eq inFV(V, empty) = false .
  eq inFV(V, V) = true .
 ceq inFV(V, V':Variable0) = false if V =/= V':Variable0 .
  eq inFV(V, [V VC]) = true .
 ceq inFV(V, [V' VC]) = false if V =/= V' .
  eq inFV(V, (V' Vs)) 
   = if inFV(V, V')
     then true
     else inFV(V, Vs)
     fi .









  ---- Proof rules.

  ----    done
  ----    ------------------------ (DP)
  ----    |- P -> P

  eq |- P -> P = done .



  ----    |- P -> Q and |- P -> R
  ----    ------------------------ (/\-IntroR)
  ----    |- P -> (Q /\ R)

  eq |- P -> Q /\ R  = |- P -> Q and |- P -> R .



  ----    done
  ----    ------------------------ (DP)
  ----    |- P /\ Q -> P 

  eq |- P /\ Q -> P = done .



  ----    |- Q /\ R -> R'
  ----    --------------------------- (MP, sort of)
  ----    |- P /\ (P -> Q) /\ R -> R'

  eq |- P /\ (P -> Q) /\ R -> R' = |- Q /\ R -> R' .


  ----    simplification rules.

  ---- De Mongen rules.
  eq ! (P /\ Q) = ! P \/ ! Q .
  eq ! (P \/ Q) = ! P /\ ! Q .
  ----
  eq P -> (! Q \/ R) = P /\ Q -> R .
  ---- duality of lfp and gfp.
  eq ! (mu F . P) = nu F . (! (P[! F / F])) .
  eq ! (nu F . P) = mu F . (! (P[! F / F])) .


  ----    KT rules.
  ----
  ----    |- P[Q / F] -> Q
  ----    ------------------------ (KT for LFP)
  ----    |- (mu F . P) -> Q

  ---- eq |- (mu F . P) -> Q = |- P[Q / F] -> Q [label KT] .





  ----    |- Q -> P[Q / F]
  ----    ------------------------ (KT for GFP)
  ----    |- Q -> nu f . P 

  ---- eq |- Q -> (nu F . P) = |- Q -> (P[Q / F]) [label KT] .






  ----    unfolding.


  ----    |- ... P[(mu F . P) / F] ...
  ----    ---------------------------- (Fix for LFP, sort of unfold)
  ----    |- ... mu F . P ...

  ----    the keyword "rl" means it's a rule, and thus its application
  ----    is lazy: it is applied only if no equations (keyword "eq")
  ----    can be applied.

  rl mu F . P => P[(mu F . P) / F] [label fix] .





  ----    |- ... P[(nu F . P) / F] ...
  ----    ---------------------------- (Fix for GFP, sort of unfold)
  ----    |- ... nu F . P ...

  rl nu F . P => P[(nu F . P) / F] [label fix] .


endm

mod LTL is

  ---- some LTL syntax and equations.

  including FIX .

  vars F G X Y Z : Variable . vars P Q R : Pattern .

  op o_ : Pattern -> Pattern [prec 60] . ---- next
  op []_ : Pattern -> Pattern [prec 60] . ---- always

  ---- define fv and substitution for next
  eq fv(o P) = fv(P) .
  eq (o P)[R / F] = o (P[R / F]) .


  ---- "always" is defined as a gfp.
  eq []P = nu f . (P /\ o f) .

  ---- some domain knowledge about LTL.
  eq o (P /\ Q) = o P /\ o Q .
  
endm

mod CTL is

  ---- some CTL syntax and equations.

  including FIX .

  vars F G X Y Z : Variable . vars P Q R R' : Pattern .

  op o_ : Pattern -> Pattern [prec 60] . ---- weak next
  op *_ : Pattern -> Pattern [prec 60] . ---- strong next
  op AG_ : Pattern -> Pattern [prec 60] . ---- all-path always
  op _AU_ : Pattern Pattern -> Pattern [prec 60] . ---- all-path until
  op _EU_ : Pattern Pattern -> Pattern [prec 60] . ---- one-path until

  ---- define fv and substitution for next
  eq fv(o P) = fv(P) .
  eq fv(* P) = fv(P) .
  eq (o P)[R / F] = o (P[R / F]) .
  eq (* P)[R / F] = * (P[R / F]) .


  ---- CTL modalities defined as fixpoints
  eq AG P = nu f . (P /\ o f) .
  eq P AU Q = mu g . (Q \/ (P /\ o g)) .
  eq P EU Q = mu g . (Q \/ (P /\ * g)) .

  ---- some domain knowledge about CTL.
  eq o (P /\ Q) = o P /\ o Q .
  eq ! o (! P) = * P .
  eq ! * (! P) = o P .

  ----    |- * (P /\ Q) /\ R -> R'
  ----    ---------------------------
  ----    |- o P /\ * (Q) /\ R -> R'

  eq |- (o P) /\ (* Q) /\ R -> R' = |- (* (P /\ Q)) /\ R -> R' .
 
endm



mod SL is

  ---- some SL syntax and equations.

  ---- rename integer multiplication to avoid a conflict with
  ---- the separating conjunction.
  including FIX * (op _*_ : Nat Nat -> Nat to _times_) .

  subsort Nat < Pattern .

  vars F G X Y Z : Variable . vars FV Vs Vs' : Variables . 
  vars P Q R R' : Pattern . vars Ps : Patterns .

  op emp : -> Pattern .
  op _|->_ : Pattern Pattern -> Pattern [prec 60] .
  op _*_ : Pattern Pattern -> Pattern [prec 61 assoc comm] .
  ops ll lr : -> Pattern .

  ---- define fv and substitution for SL constructs 
  eq fv(emp) = empty .
  eq fv(P |-> Q) = fv(P) fv(Q) .
  eq fv(P * Q) = fv(P) fv(Q) .
  eq emp[R / X] = emp .
  eq (P |-> Q)[R / X] = P[R / X] -> (Q[R / X]) .
  eq (P * Q)[R / X] = P[R / X] * (Q[R / X]) .

  eq ll = mu f . lambda x y . ((emp /\ x == y) \/ (exists t . x |-> t * f @ (t,y))) .
  ---- eq lr = mu f . lambda x y . ((emp /\ x == y) \/ (exists t . f @ (x,t) * t |-> y)) .
  ---- for debugging purposes
  eq fv(lr) = empty .
  eq lr[R / X] = lr .


  ---- NOTE!!!
  ---- Be careful about the orders that rules apply.
  ---- In particular, we want the following order:
  ---- (Plugout) + (Forall) + (KT) + (UG) + (Plugin)

  ---- special (Plugin) and (Plugout) rules.
  ---- should be more general. maybe go to the meta-level?


  ---- (Plugout) + (Forall)
 ceq |- (mu F . P) @ (Ps) -> R
   = |- (mu F . P) -> (forall fv(R') . R') 
  if FV := fv(Ps, R)
  /\ G := freshcopy(g, get-vc(FV), FV) 
  /\ R' := (exists G . (G /\ floor((G @ (Ps)) -> R)))
 [label plugout] .


  ---- (KT) should be applied here.

  eq |- (mu F . P) -> Q = |- P[Q / F] -> Q [label KT] .

  ---- (UG) + (Plugin)
 ceq |- P -> (forall Vs . exists G . G /\ floor(G @ (Ps) -> R))
   = |- P @ (Ps[Vs' / Vs]) -> R[Vs' / Vs]
  if FV := fv(P)
  /\ Vs' := freshcopy(Vs, get-vc(FV), FV)
  [label plugin] .
 

endm


----    ---- substitution tests.
----    reduce in FIX :
----    (forall x . (x /\ y)) [x / y] .
----    reduce in FIX :
----    (forall x y z . (x /\ y /\ z /\ t)) [x \/ y \/ z \/ t / t] .
----    
----    ---- free variables tests.

----    ---- lambda calculus tests.
----    reduce in FIX :
----    (lambda x . x) @ (y) . ---- expect to return y
----    reduce in FIX :
----    (lambda x . (x @ (y))) @ (y) . ---- expect to return y @ (y)
----    reduce in FIX :
----    (lambda x y z . ((x @ (y)) @ (x @ (z)))) @ (x, u, v) .
----    
----    ---- prove it, using at most 2 times of (Fix) rule (i.e., unfolding).
----    rewrite [2] in LTL :
----    |- (([](p -> o p)) /\ p) -> []p .
----    
---- prove it, using at most 2 times of (Fix) rule (i.e., unfolding).
rewrite [2] in CTL :
|- (AG(r -> (! q /\ * r))) /\ r -> !(p AU q) .

---- prove it, using at most 3 times of (Fix) rule (i.e., unfolding).
rewrite [3] in CTL :
|- (AG(r -> (! q /\ (p -> o r)))) /\ r -> !(p EU q) .

eof .

set trace on .
set trace select on .
trace select KT plugout fix plugin .

---- prove it, using at most 1 times of (Fix) rule (i.e., unfolding).
reduce in SL :
|- (ll @ (x,y)) -> (lr @ (x,y)) .


q .
