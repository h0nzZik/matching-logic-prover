(set-logic ALL)
(define-fun max ( ( x Int )  ( y Int )   ) Int ( ite ( < x  y   )  y  x   ) )
(declare-sort State 0 )
(declare-fun fresh_valZ ( State   ) Real )
(declare-fun fresh_valV ( State   ) Real )
(declare-fun fresh_reach ( State  State   ) Bool )
(declare-fun fresh_mode ( State   ) Int )
(declare-fun fresh_jumpCondition ( State  State   ) Bool )
(declare-fun fresh_invariantSatisfiedInState ( State   ) Bool )
(declare-fun fresh_invariantSatisfiedInInterval ( State  Real   ) Bool )
(declare-fun fresh_evolve ( State  Real   ) State )
(declare-fun fresh_discreteTransitionFrom ( State   ) State )

(assert ( forall ( ( T Real )   )
            ( => ( > T  0   )
                 ( forall ( ( S1 State )  ( S2 State )   )
                    ( and ( =>  ( = S2  ( fresh_evolve S1  T   )   )
                                ( and ( = ( fresh_mode S2   )  ( fresh_mode S1   )   )
                                      ( = ( fresh_valV S2   )  ( + ( fresh_valV S1   )  ( * 10  T   )   )   )
                                      ( = ( fresh_valZ S2   )  ( + ( fresh_valZ S1   )  ( + ( * ( fresh_valV S1   )  T   )
                                      ( / ( * ( - 10   )  ( * T  T   )   )  2   )   )   )   )   )
                          )
                         ( => ( and ( = ( fresh_mode S2   )  ( fresh_mode S1   )   )
                                    ( = ( fresh_valV S2   )  ( + ( fresh_valV S1   )  ( * 10  T   )   )   )
                                    ( = ( fresh_valZ S2   )  ( + ( fresh_valZ S1   )
                                    ( + ( * ( fresh_valV S1   )  T   )  ( / ( * ( - 10   )  ( * T  T   )   )  2   )   )   )   )   )
                              ( = S2  ( fresh_evolve S1  T   )   )
                        )
                    )
                  )
            )
       )
)

(assert ( forall ( ( S1 State )  ( S2 State )   )
            ( = ( fresh_jumpCondition S1  S2   )
                ( and ( = ( fresh_mode S1   )  ( fresh_mode S2   )   )
                      ( = ( fresh_valZ S1   )  0   )
                      ( = ( fresh_valZ S2   )  0   )
                      ( = ( fresh_valV S2   )  ( * ( - 1   )  ( fresh_valV S1   )   )   )
                )
            )
        )
)

(assert ( forall ( ( S1 State )  ( S2 State )   )
            ( and ( => ( = S2  ( fresh_discreteTransitionFrom S1   )   )
                       ( fresh_jumpCondition S1  S2   )
                  )
                  ( => ( fresh_jumpCondition S1  S2   )
                       ( = S2  ( fresh_discreteTransitionFrom S1   )   )
                  )
            )
        )
)

(assert ( forall ( ( S1 State )   )
            ( = ( fresh_invariantSatisfiedInState S1   )  ( > ( fresh_valZ S1   )  0   )   )
        )
)

(assert ( forall ( ( S State )  ( T Real )   )
            ( = ( fresh_invariantSatisfiedInInterval S  T   )
                ( and ( > T  0   )
                      ( fresh_invariantSatisfiedInState S   )
                      ( forall ( ( T2 Real )   )
                          ( => ( and ( > T2  0   )  ( < T2  T   )   )
                               ( fresh_invariantSatisfiedInState ( fresh_evolve S  T2   )   )
                          )
                      )
                )
            )
        )
)

(declare-const F5 Real )
(declare-const S1 State )
(declare-const S2 State )
(assert ( not ( => ( and ( > F5  0   )
                       ( = S2  ( fresh_evolve S1  F5   )   )
                       ( fresh_invariantSatisfiedInState S1   )
                       ( fresh_invariantSatisfiedInInterval S1  F5   )
                       ( > ( fresh_valZ S1   )  0   )
                       ( = ( fresh_valV S1   )  0   )
                    )
                    ( > ( fresh_valZ S2   )  0   )
               )
        )
)
(check-sat)
