%==============================================================================
% Load the solver to do constraint proof
%==============================================================================\

:- consult('z3_wrapper.clpr').
:- consult('directproof.clpr') .
:- consult('directproof_by_user.clpr') .

%==============================================================================
% prettyprinting
%==============================================================================

prettyprint_aux(NonUnfoldableLRPs, UnfoldableLRPs, LCPs,
            NonUnfoldableRRPs, UnfoldableRRPs, RCPs) :-
  assert(refresh_variables(t(NonUnfoldableLRPs, UnfoldableLRPs, LCPs,
                                   NonUnfoldableRRPs, UnfoldableRRPs, RCPs))),
  retract(refresh_variables(t(NonUnfoldableG, UnfoldableG, G,
                                   NonUnfoldableH, UnfoldableH, H))),
  prettyprint(NonUnfoldableG, UnfoldableG, G,
                     NonUnfoldableH, UnfoldableH, H).

prettyprint(NonUnfoldableLRPs, UnfoldableLRPs, LCPs,
            NonUnfoldableRRPs, UnfoldableRRPs, RCPs) :- !,
  set_counter(variable_number, 0),
  append(NonUnfoldableLRPs, UnfoldableLRPs, LRPs),
  append(NonUnfoldableRRPs, UnfoldableRRPs, RRPs),
  remove_atm(LRPs, LRPs1),
  remove_atm(RRPs, RRPs1),
  prettyprintlist(" , ", LRPs1),
  printf(",", []),
  prettyprintlist(" , ", LCPs),
  printf("\n\t|=\n", []),
  prettyprintlist(" , ", RRPs1),
  printf(",", []),
  prettyprintlist(" , ", RCPs),
  printf("\n", []).

prettyprint(A) :-
  var(A), counter_value(variable_number, N),
  printf_to_atom(A, "v%", [N]), printf("%", [A]),
        add_counter(variable_number, 1), !.
prettyprint(emptyset) :-
  printf("{", []),
  printf("}", []), !.
prettyprint(A) :-
  atomic(A), printf("%", [A]), !.
prettyprint(singleton(A)) :-
  printf("{", []),
  prettyprint(A),
  printf("}", []), !.
prettyprint(ref(A,B)) :-
  prettyprint(A), printf("[", []), prettyprint(B), printf("]", []), !.
prettyprint(eqset(A,B)) :-
  prettyprint(A), printf("=", []), prettyprint(B), !.
prettyprint(arreq(A,B)) :-
  prettyprint(A), printf(" =a= ", []), prettyprint(B), !.
prettyprint(eq(A,B)) :-
  prettyprint(A), printf("=", []), prettyprint(B), !.
prettyprint(plus(A,B)) :-
  printf("(", []),
  prettyprint(A), printf("+", []), prettyprint(B),
  printf(")", []), !.
prettyprint(minus(A,B)) :-
  printf("(", []),
  prettyprint(A), printf("-", []), prettyprint(B),
  printf(")", []), !.
prettyprint(geq(A,B)) :-
  prettyprint(A), printf(">=", []), prettyprint(B), !.
prettyprint(gt(A,B)) :-
  prettyprint(A), printf(">", []), prettyprint(B), !.
%prettyprint(union(L)) :- prettyprintlist("U", L), !.
%prettyprint(inter(L)) :- prettyprintlist("^", L), !.
%prettyprint(disjoint(L)) :- prettyprintlist("(X)", L), !.
%prettyprint(multiset(L)) :-
% printf("{", []),
% prettyprintlist(",", L),
% printf("}", []), !.
prettyprint(upd(A,B,C)) :-
  printf("<", []), prettyprint(A),
  printf(",", []), prettyprint(B),
  printf(",", []), prettyprint(C),
  printf(">", []), !.
prettyprint(A) :-
  A =.. [X|L],
  printf("%(", [X]),
        prettyprintlist(",", L),
        printf(")", []), !.

prettyprintlist(_Op, []) :- !.
prettyprintlist(_Op, [X]) :-
  prettyprint(X), !.
prettyprintlist(Op, [X,Y|R]) :-
  prettyprint(X), printf("%", [Op]),
        prettyprintlist(Op, [Y|R]), !.

%--------------------------------------------------------------------
% some aux functions: can be added later.
%--------------------------------------------------------------------

% append is defined in z3_wrapper.clpr.
% append([], B, B).
% append([X|A], B, [X|C]) :- append(A, B, C).

length([], 0).
length([_], 1) :- !.
length([_, _], 2) :- !.
length([_|R], N+1) :- length(R, N).

%--------------------------------------------------------------------
% freshcopy/2
% freshcopy(Vars,FreshVars)
% Assumptions: 
%   Vars is a list of distinct variables.
%--------------------------------------------------------------------

freshcopy([], []) :- !.
freshcopy([X],[Y]) :- true
  , var(X)
  , !
  , Y = Z
  , Z = Z % Suppress warning
  .
freshcopy([X|Xs],[Y|Ys]) :- true
  , freshcopy([X],[Y])
  , freshcopy(Xs,Ys)
  .

% Substitutions and Unfiers
% =========================

%--------------------------------------------------------------------
% get_unifier(LHS, RHS, Unifier)
% LHS: List of terms
% RHS: List of terms
% Unifier: List of eq(A,B), where A is variable
% Finds a substitution that when applied to the LHS unifies it with the RHS.
% Note that this is *NOT* full unification.
%--------------------------------------------------------------------

% get_unifier(L, R, _) :- true
%   , printf("GET_UNIFIER: L = % ; R = %\n", [L, R])
%   , 0 == 1
%   .

% Don't include `eq(X, X)`
get_unifier([L|LS], [R|RS], US) :- true
  , var(L)
  , var(R)
  , L == R
  , !
  , get_unifier(LS, RS, US)
  .
get_unifier([L|LS], [R|RS], [eq(L,R)|US]) :- true
  , var(L)
  , !
  , get_unifier(LS, RS, US)
  .
get_unifier([L|LS], [R|RS], Out) :- true
  , L =.. [Ctor|Args1]
  , not(var(R))
  , R =.. [Ctor|Args2]
  , get_unifier(Args1, Args2, Out1)
  , get_unifier(LS, RS, Out2)
  , append(Out1, Out2, Out)
  .
get_unifier([], [], []).

% Given a list of variables create a substitution that replaces them with fresh variables
make_subst_with_fresh([V], [eq(V, _)]) :- true
  .
make_subst_with_fresh([V | Vs], [EQ | EQs]) :- true
  , make_subst_with_fresh([V], [EQ])
  , make_subst_with_fresh( Vs,  EQs)
  .


% unify_one_to_more(+L, +Rs, -Substs)
% L: a term
% Rs: a list of terms [R1,...,Rk]
% Substs: a list of substs [Subst1,...,Substk]
% such that get_unifier([L], [Ri], Substi)

unify_one_to_more(L, [], []).

unify_one_to_more(L, [R|Rs], [Subst|Substs]) :- true
, get_unifier([L], [R], Subst)
, unify_one_to_more(L, Rs, Substs)
.

%------------------------------------------------------------------------------
% substitute(Subst, Terms, Modified)
% Subst: List of eq(A,B), where A is variable.
% Terms: The list of terms where A is to be replaced with B
% Modified: The modified list of terms
%------------------------------------------------------------------------------

% substitute(Assign, Term, Out) :- true
%   , printf("SUBSTITUTE: Assign = % ; Term = % ; Out = % \n", [Assign, Term, Out])
%   , 0 == 1
%   .
substitute([eq(L, R)], [T], [R]) :- true
  , var(L)
  , L == T
  , !
  .
substitute([eq(L, _R)], [T], [T]) :- true
  , var(L)
  , var(T)
  , !
  .
substitute([eq(L, R)], [Term], [Out]) :- true
  , var(L)
  , Term =.. [Ctor|Args]
  , !
  , substitute([eq(L, R)], Args, OutArgs)
  , Out =.. [Ctor|OutArgs]
  .
substitute(_Assign, [], []) :- true
  , !
  .
substitute([EQ | EQS], [TS], Out) :- true
  , EQ = eq(L, _R) % This forces the "BAD SUBSTITUTION" case when EQ is not an equation
  , var(L)
  , !
  , substitute([EQ], [TS], Out1)
  , substitute(EQS,  Out1, Out)
  .
substitute(EQs, [T|TS], Out) :- true
  , substitute(EQs, [T], Out1)
  , substitute(EQs,  TS, Out2)
  , append(Out1, Out2, Out)
  .
substitute([], Term, Term) :- true
  , !
  .
substitute(EQS, Term, _) :- true
  , printf("BAD SUBSTITUTION: %, %\n", [EQS, Term])
  , halt
  .

% Apply multiple substitutions at once
apply_multiple_substitutions([], _, []) :- true
 , !
 .
apply_multiple_substitutions([Subst], Ps, [Ps_Substs]) :- true
 , !
 , substitute(Subst, Ps, Ps_Substs)
 .
apply_multiple_substitutions([Subst | Substs], Ps, [Ps_Subst0 | Ps_Substs]) :- true
 , apply_multiple_substitutions([Subst], Ps, Ps_Substs)
 , apply_multiple_substitutions( Substs, Ps, Ps_Substs)
 , !
 .
apply_multiple_substitutions(X1, X2, _) :- true
 , printf("==== apply_multiple_substitutions failed! % %\n", [X1, X2])
 , halt
 .

% Get the list of domains from a list of substitutions.
% This ignores trivial equations `eq(X, X)`

% substitutions_get_domains(Ss, _) :- true
%  , printf("substitutions_get_domains: %\n", [Ss])
%  , fail
%  .
substitutions_get_domains([], []) :- true
 , !
 .
substitutions_get_domains([Subst0], []) :- true
 , Subst0 = [eq(L, R)]
 , var(L)
 , L == R
 , !
 .
substitutions_get_domains([Subst0], [[L]]) :- true
 , Subst0 = [eq(L, _R)]
 , var(L)
 , !
 .
substitutions_get_domains([Subst0], [Domain0]) :- true
 , Subst0 = [EQ | EQs]
 , EQ = eq(_L, _R)
 , !
 , substitutions_get_domains([[EQ]], [D1])
 , substitutions_get_domains([ EQs], [D2])
 , unord_setunion(D1, D2, Domain0)
 .
substitutions_get_domains([Subst0 | Substs], [Domain0 | Domains]) :- true
 , Subst0 = [_EQ | _EQS]
 , !
 , substitutions_get_domains([Subst0], [Domain0])
 , substitutions_get_domains( Substs ,  Domains )
 .


%------------------------------------------------------------------------------
% Lists
%------------------------------------------------------------------------------

% True when E is the N'th (1-based) element of List 

nth1(1, [X | _R], X) :- true
  , !
  .

nth1(I, [_X | R], E) :- true
  , I >= 2
  , !
  , nth1(I-1, R, E)
  .

% Same as nth1/3 but also returns the remaining list.

nth1(1, [X | R], X, R) :- true
  , !
  .

nth1(I, [X | R], E, [X | R1]) :- true
  , I >= 2
  , !
  , nth1(I-1, R, E, R1)
  .

%------------------------------------------------------------------------------
% collect_variables(Terms, OutTerms)
%------------------------------------------------------------------------------

collect_variables([], []) :- true
  , !
  .
collect_variables([V], [V]) :- true
  , var(V)
  , !
  .
collect_variables([Term], Out) :- true
  , Term =.. [_Ctor|Args]
  , !
  , collect_variables(Args, Out)
  .
collect_variables([Term | Terms], Outs) :- true
  , !
  , collect_variables([Term], Outs0)
  , collect_variables(Terms, Outs1)
  , delete_var(Outs1, Outs0, Outs2)
  , append(Outs0, Outs2, Outs)
  .
collect_variables(In, []) :- true
  , printf("collect_variables: Got %; Requires List\n", [In])
  , halt
  .

delete_var([], _, []) :- true
  .
delete_var(A, [], A) :- true
  .
delete_var([A | AS], [B], Outs) :- true
%  , printf("Matched? [% | %], [%]\n", [A, AS, B])
  , A == B
%  , printf("Matched. [% | %], [%]\n", [A, AS, B])
  , !
  , delete_var(AS, [B], Outs)
  .
delete_var([A | AS], [B], [ A | Out]) :- true
%  , printf("Matched failed. [% | %], [%]\n", [A, AS, B])
  , delete_var(AS, [B], Out)
  .
delete_var(AS, [B | BS], Outs) :- true
  , delete_var(AS, [B], Outs1)
  , delete_var(Outs1, BS, Outs)
  .


%------------------------------------------------------------------------------
% find_critical_positions(+P, +Q, -CP)
% find_positions_of_diff(+Xs, +Ys, -CP)
%------------------------------------------------------------------------------

find_critical_positions(P, Q, CP) :- true
  , P =.. [H|Xs]
  , Q =.. [H|Ys]
  , !
  , find_positions_of_diff(Xs, Ys, CP)
  .

% The otherwise case.
find_critical_positions(_P, _Q, _CP) :- true
  , fail
  .

find_positions_of_diff(Xs, Ys, CP) :- true
  , find_positions_of_diff_aux(Xs, Ys, CP, 0)
  .

find_positions_of_diff_aux([], [], [], _Offset).

find_positions_of_diff_aux([X|P], [Y|Q], CP, Offset) :- true
  , var(X), var(Y)
  , not(X == Y)
  , find_positions_of_diff_aux(P, Q, CP_Rest, (Offset + 1))
  , CP = [(Offset + 1) | CP_Rest]
  .

% The otherwise case
find_positions_of_diff_aux([_X|P], [_Y|Q], CP, Offset) :- true
  , find_positions_of_diff_aux(P, Q, CP, (Offset + 1))
  .


%------------------------------------------------------------------------------
% collect_variables_by_positions(+Term, +Positions, -Vars)
% Assume that all arguments in Term are variables.
%------------------------------------------------------------------------------

collect_variables_by_positions(T, Ps, Vs) :- true
  , collect_variables_by_positions(T,Ps,Vs)
  .

collect_variables_by_position(T, Ps, Vs) :- true
% , printf("\n---collect_variables_by_position---\n",[])
% , printf("T = %\nPs = %\n", [T,Ps])
  , T =.. [_|AllVs]
% , printf("AllVs = %\n", [AllVs])
  , !
  , pick_by_position(AllVs, Ps, Vs)
  .

pick_by_position(_AllVs, [], []) :- true
  , !
  .

pick_by_position(AllVs, [P|Ps], [V|Vs]) :- true
% , printf("\n---pick_by_position---\n",[])
  , nth1(P, AllVs, V)
% , printf("P = %\nV = %\n", [P,V])
  , pick_by_position(AllVs, Ps, Vs)
  .


% find_affected_variables(CritActVs, NonCritActVs_i, Constraints, DependentVs)
% ----------------------------------------------------------------------
%
% CritActVs: List of Variables
% Constraints: List of Constraints
% 
% Return the minimal set of variables such that contains the set of variables
% the transitively "depend on" the CritActVs.
%
% A variable `D` depends on `V` iff there is an equality `equality(D, T)`
% and `V` is one of the free variables of `T`, where `equality` is a constructor
% accepted by `find_affected_variables__is_equality`
%

% Calculate fixed point of find_affected_variables_aux
find_affected_variables(InitialVaraibles, NonCritActVs, Constraints, DependentVs) :- true
  , find_affected_variables_aux(InitialVaraibles, Constraints, DVs1)
  , unord_setdiff(DVs1, NonCritActVs, DVs2)
  , find_affected_variables_1(InitialVaraibles, NonCritActVs, DVs2, Constraints, DependentVs)
  , !
  .
find_affected_variables_1(InitialVaraibles, NonCritActVs, DVs1, _Constraints, AffectedPasVs) :- true
  , InitialVaraibles == DVs1
  , !
  , unord_setdiff(DVs1, NonCritActVs, AffectedPasVs)
  .
find_affected_variables_1(_IVs, NonCritActVs, DVs1, Constraints, DependentVs) :- true
  , !
  , find_affected_variables(DVs1, NonCritActVs, Constraints, DependentVs)
  .

find_affected_variables__is_equality(eq) .
find_affected_variables__is_equality(eqset) .

find_affected_variables__is_other_predicate(gt) .
find_affected_variables__is_other_predicate(mem) .
find_affected_variables__is_other_predicate(add) .

find_affected_variables__append_if_member_special(CritActV, L, RVs, DependentVs) :- true
  , member_special(CritActV, RVs)
  , !
  , list_to_set([CritActV, L], DependentVs)
  .
find_affected_variables__append_if_member_special(CritActV, _L, _RVs, DependentVs) :- true
  , DependentVs = [CritActV]
  .

% Base cases
find_affected_variables_aux([], _Constraints, []) :- true
  .
find_affected_variables_aux(InitialVaraibles, [], InitialVaraibles) :- true
  .

find_affected_variables_aux([CritActV], [T], DependentVs) :- true
  , var(CritActV)
  , T =.. [Ctor, L, R]
  , find_affected_variables__is_equality(Ctor)
  , var(L)
  , !
  , collect_variables([R], RVs)
  , find_affected_variables__append_if_member_special(CritActV, L, RVs, DependentVs)
  .
find_affected_variables_aux([CritActV], [T], [CritActV]) :- true
  , var(CritActV)
  , T =.. [Ctor | _Args]
  , find_affected_variables__is_other_predicate(Ctor)
  , !
  .
find_affected_variables_aux([CritActV], [eqset(emptyset, _R)], [CritActV]) :- true
  .
find_affected_variables_aux([CritActV], [z3_not(P)], DependentVs) :- true
  , !
  , find_affected_variables_aux([CritActV], [P], DependentVs)
  .
find_affected_variables_aux([CritActV], [C], _DependentVs) :- true
  , var(CritActV)
  , !
  , printf("find_affected_variables_aux: Unimplemented base case! %\n", [C])
  , halt
  .

% Recursive cases
find_affected_variables_aux([CritActV], [C | Cs], DependentVs) :- true
  , var(CritActV)
  , !
  , find_affected_variables_aux([CritActV], [C], DependentVs1)
  , find_affected_variables_aux([CritActV],  Cs, DependentVs2)
  , unord_setunion(DependentVs1, DependentVs2, DependentVs)
  .
find_affected_variables_aux([CritActV | InitialVaraibles], Constraints, DependentVs) :- true
  , !
  , find_affected_variables_aux([CritActV], Constraints, DependentVs1)
  , find_affected_variables_aux( InitialVaraibles, Constraints, DependentVs2)
  , unord_setunion(DependentVs1, DependentVs2, DependentVs)
  .

%------------------------------------------------------------------------------
% rewrite(Subst, In, Out)
% Subst: List of eq(L, R) where L and R are terms
% In: List of terms to rewrite
% Out: List of output terms
%------------------------------------------------------------------------------

%rewrite(Rule, In, Out) :- true
%  , printf("REWRITE: Rule = % ; In = %\n", [Rule, In])
%  , 0 == 1
%  .
%rewrite(Rule, In, Out) :- true
%  , rewrite_step(Rule, In, Out)
%  , printf("REWRITE.1: Rule = % ; In = %; Out= %\n", [Rule, Int, Out])
%  , In == Out
%  .
%% TODO:BRoken
%rewrite(Rule, In, Out) :- true
%  , rewrite_step(Rule, In, Out1)
%  , printf("REWRITE.2: Rule = % ; In = %; Out= %\n", [Rule, Int, Out1])
%  , Out1 = Out
%  , rewrite(Rule, Out1, Out)
%  .

% rewrite_step(Rule, In, _Out) :- true
%   , printf("REWRITE: Rule = % ; In = %\n", [Rule, In])
%   , 0 == 1
%   .
% Unifies
rewrite_step([eq(L, R)], [T], [Out]) :- true
  , get_unifier([L], [T], Unif)
  , substitute(Unif, [R], [Out])
  .
% Variable
rewrite_step(_Rule, [A], [A]) :- true
  , var(A)
  , !
  .
% Visit arguments
rewrite_step(Rule, [A], [B]) :- true
  , A =.. [Name|M], !
  , rewrite_step(Rule, M, N)
  , B =.. [Name|N]
  .
rewrite_step(Rule, [A|AS], [B|BS]) :- true
  , rewrite_step(Rule, [A], [B])
  , rewrite_step(Rule, AS, BS)
  .
rewrite_step(_Rule, [], []).



lprove(Level, LRPs, LCPs, RRPs, RCPs) :-
  printf("\n---new proof obligation at level %.---\n\n", [Level]),
  printf("% %\n  ->\n% %\n",
    [LRPs, LCPs, RRPs, RCPs]),
  fail.

% Try (Direct Proof) first.
lprove(_Level, LRPs, LCPs, RRPs, RCPs) :- true
%, lprove_direct_by_user(LRPs, LCPs, RRPs, RCPs)
 , lprove_direct(LRPs, LCPs, RRPs, RCPs)
 .
% lprove(Level, LRPs, LCPs, RRPs, RCPs) :- true
%  , lprove_direct_by_user(LRPs, LCPs, RRPs, RCPs)
%  .

% Depth-first search on proof trees.
% Try all possible rules and collect a set of obligation sets DNF.
% prove one obligation set in DNF and we are done.
% In other words, DNF is a disjunction of conjunctions. 
lprove(Level, LRPs, LCPs, RRPs, RCPs) :- true
  , lprove_aux(LRPs, LCPs, RRPs, RCPs, DNF)
  , length(DNF, L)
  , printf("\n---% disjunctions collected---\n", [L])
  , printf("DNF =\n%\n", [DNF])
  , prove_one(Level, DNF)
  , !
  , true.
 
% collect DNF by trying all possible rules.
lprove_aux(LRPs, LCPs, RRPs, RCPs, DNF) :- true
  , lprove_kt(LRPs, LCPs, RRPs, RCPs, DNFKT)
  , lprove_ru(LRPs, LCPs, RRPs, RCPs, DNFRU)
  , append(DNFKT,DNFRU,DNF)
  .

%--------------------------------------------------------------------
% prove_one needed. the structure of the original code is kept.
% prove_all needed. the structure of the original code is kept.
%--------------------------------------------------------------------
prove_one(_Level, []) :- !, fail. % fail to prove.

prove_one(Level, DNF) :- true
  , length(DNF,L)
  , printf("\n----consider an orset of size % and level %----\n", 
      [L,Level])
  % printf("DNF =\n%\n", [DNF])
  , prove_one_set(Level, DNF)
  .

prove_one_set(Level, DNF) :- prove_one_set_aux(Level, DNF).

prove_one_set_aux(_Level, []) :- !, fail. % fail to prove.

prove_one_set_aux(Level, [Obs | _]) :- true
  , prove_all(Level, Obs)
  , !
  , true
  .

prove_one_set_aux(Level, [_ | R]) :- prove_one_set_aux(Level, R).

prove_all(_Level, []) :- true
  , !
  , true  % succeed to prove.
  . 

prove_all(Level, [Ob | R]) :- true
  , Level > 0
  % length([Ob|R],L)
  % printf("\n---help me decide (size %, level %)---\n", [L,Level])
  % printf(
  %   "\n---keep it or not? ('y.' for yes and 'n.' for no)---\n",[])
  % printf("%\n", [[Ob|R]])
  % read(Ans)
  % !
  % check_answer(Ans)
  , printf("---ok I'll continue.\n---", [])
  , Ob = obligation(LRPs, LCPs, RRPs, RCPs)
  , lprove(Level - 1, LRPs, LCPs, RRPs, RCPs)
  , prove_all(Level, R)
  , !
  .

prove_all(_Level, _) :- true
  , printf("\n---prove_all gives up; reaches level 0---\n", [])
  , fail
  .


%------------------------------------------------------------------------------
% lprove_direct/4
% lprove_direct(+LRPs,+LCPs,+RRPs,+RCPs)
%
% LRPs,LCPs -> RRPs,RCPs
%------------------------------------------------------------------------------

lprove_direct(LRPs, LCPs, RRPs, RCPs) :- true
 , GNonUnfoldable = []
 , HNonUnfoldable = []
 , addunfoldlevel(0, Level, LRPs, UnfoldableLRPs)
 , addunfoldlevel(0, Level, RRPs, UnfoldableRRPs)
 , directproof(GNonUnfoldable, UnfoldableLRPs, LCPs,
               HNonUnfoldable, UnfoldableRRPs, RCPs)
 , !
 , printf("\n---DP succeeds.---\n", [])
 .

lprove_direct(_LRPs, _LCPs, _RRPs, _RCPs) :- true
 , printf("\n---DP fails.---\n", [])
 , fail
 .

%------------------------------------------------------------------------------
% lprove_ru/5
% lprove_ru(+LRPs,+LCPs,+RRPs,+RCPs,-DNF)
%------------------------------------------------------------------------------

lprove_ru(LRPs,LCPs,RRPs,RCPs,DNF) :- true
  , length(RRPs, RRPs_len)
  , printf("\n---RU begins, % RRP(s) in total.---\n",[RRPs_len])
  , lprove_ru_aux(LRPs,LCPs,RRPs,RCPs, 1, [], DNF)
  , length(DNF, DNF_len)
  , printf("\n---RU ends, % disjunctions collected---\n", [DNF_len])
  , printf("DNF(RU) = %\n", [DNF])
  .

lprove_ru_aux(LRPs,LCPs,RRPs,RCPs,
  N,InDNF,OutDNF) :- true
  % The following claim fails if N > |RRPs|
  , nth1(N,RRPs,RRP,RestRRPs)
  , !
  , printf("\n---RU on the %th recursive pattern.---\n", [N])
  , lprove_ru(LRPs,LCPs,RRP,RestRRPs,RCPs,DNFRU)
  , append(DNFRU,InDNF,NewInDNF)
  , lprove_ru_aux(LRPs,LCPs,RRPs,RCPs,
      N+1, NewInDNF,OutDNF)
  .

% N > |RRPs|.
lprove_ru_aux(_LRPs,_LCPs,_RRPs,_RCPs,
  _N,_DNF,_DNF) :- true
  , !
  .

%------------------------------------------------------------------------------
% lprove_ru/6
% lprove_ru(+LRPs,+LCPs,+RRP,+RRPs,+RCPs,
%   -DNF)
%------------------------------------------------------------------------------

lprove_ru(LRPs,LCPs,RRP,RRPs,RCPs,
  DNF) :- true
  , unfold(RRP,HBodies)
  % length(HBodies,L)
  % printf("\n---right unfold (one atom) begins, % cases to collect---\n",[L])
  , lprove_ru_collect_all_cases(
      LRPs,LCPs,RRP,RRPs,RCPs,HBodies,
      [],DNF)
  .

%------------------------------------------------------------------------------
% lprove_ru_collect_all_cases
% LRPs,LCPs,RRP,RRPs,RCPs,HBodies,
% +InDNF,-OutDNF)
% 
% Go over every body in HBodies and add the new DNF to InDNF.
%------------------------------------------------------------------------------

% The case when HBodies is empty.
lprove_ru_collect_all_cases(
  _LRPs,_LCPs,_RRP,_RRPs,_RCPs,[],
  _InDNF,_InDNF) :- true
  , printf("\n---all cases collected.---\n", [])
  , !
  .

lprove_ru_collect_all_cases(
  LRPs,LCPs,RRP,RRPs,RCPs,[HBody|HBodies],
  InDNF,OutDNF) :- true
  % printf("\n---collect case---\n", [])
  , body(BAtoms, BConstraints) = HBody
  % printf("HBody = %\n", [HBody])
  , append(RRPs,BAtoms,NewRRPs)
  , append(RCPs,BConstraints,NewRCPs)
  , Ob = obligation(LRPs,LCPs,NewRRPs,NewRCPs)
  % printf("\n---right unfold ends---\n", [])
  % printf("Ob = %\n", [Ob])
  , NewInDNF = [[Ob]|InDNF]
  , lprove_ru_collect_all_cases(
      LRPs,LCPs,RRP,RRPs,RCPs,HBodies,
      NewInDNF,OutDNF)
  .

%------------------------------------------------------------------------------
% lprove_kt/5
% lprove_kt(+LRPs, +LCPs, +RRPs, +RCPs, -DNF)
%
% Variable names meaning:
% - first letter:  L means left-hand side, R means right-hand side.
% - second letter: R means recursive, C means constraint (nonrecursive).
% - third letter:  P means pattern.
% - fourth letter (optional): s means pattern lists.
%
% DNF is a disjunction of conjunctions. 
% Each conjunction has the form obligation(...).
% The empty DNF [] means false.
%------------------------------------------------------------------------------

% (KT) is not applicable if there's no LRP.
lprove_kt([], _LCPs, _RRPs, _RCPs, []) :- true
  .

lprove_kt(LRPs, LCPs, RRPs, RCPs, DNF) :- true
  , length(LRPs, LRPs_len)
  , printf("\n---KT begins, % LRP(s) in total.---\n", [LRPs_len])
  , printf("% %\n  ->\n% %\n", [LRPs,LCPs,RRPs,RCPs])
  , lprove_kt_aux(LRPs, LCPs, RRPs, RCPs, 1, [], DNF)
  , length(DNF, DNF_len)
  , printf("\n---KT ends, % disjunctions collected---\n", [DNF_len])
  , printf("DNF(KT) = %\n", [DNF])
  .

% Apply (KT) on the Nth pattern in LRPs, where 1 <= N <= |LRPs|,
% then continue on the (N+1)th pattern by recursion.
% This function never fails.
lprove_kt_aux(LRPs, LCPs, RRPs, RCPs, N, DNFIn, DNFOut) :- true
  % Let LPR = LRPs[N]; it fails if N > |LRPs|.
  , nth1(N, LRPs, LRP, LRPs_rest)
  , !
  , printf("\n---KT on the %th recursive pattern---\n", [N])
  , lprove_kt(LRP, LRPs_rest, LCPs, RRPs, RCPs, DNF)
  , append(DNFIn, DNF, DNFIn_new)
  , lprove_kt_aux(LRPs, LCPs, RRPs, RCPs, N+1, DNFIn_new, DNFOut)
  .

% N > |LRPs|
lprove_kt_aux(_LRPs, _LCPs, _RRPs, _RCPs, _N, _DNF, _DNF) :- true
  .

%------------------------------------------------------------------------------
% lprove_kt/6
% lprove_kt(+LRP, +LRPs, +LCPs, +RRPs, +RCPs, -DNF)
%
% Apply (KT) on LRP.
% By definition of (KT), |DNF| = 1; i.e., DNF contains
% exactly one conjunction.
%------------------------------------------------------------------------------

lprove_kt(LRP, LRPs, LCPs, RRPs, RCPs, DNF) :- true
  , unfold(LRP, Bodies)
  , lprove_kt_all_bodies(LRP, LRPs, LCPs, RRPs, RCPs, Bodies, CNF)
  , DNF = [CNF]
  .

lprove_kt_all_bodies(LRP, LRPs, LCPs, RRPs, RCPs, Bodies, CNF) :- true
  , lprove_kt_all_bodies_aux(LRP, LRPs, LCPs, RRPs, RCPs, 1, Bodies, [], CNF)
  .

lprove_kt_all_bodies_aux(LRP, LRPs, LCPs, RRPs, RCPs, 
  N, Bodies, CNFIn, CNFOut) :- true
  , nth1(N, Bodies, Body, Bodies_rest)
  , !
  , lprove_kt_one_body(LRP, LRPs, LCPs, RRPs, RCPs, Body, CNF)
  , append(CNFIn, CNF, CNFIn_new)
  , lprove_kt_all_bodies_aux(LRP, LRPs, LCPs, RRPs, RCPs, 
      N+1, Bodies_rest, CNFIn_new, CNFOut)
  .

% N > |Bodies|
lprove_kt_all_bodies_aux(_LRP, _LRPs, _LCPs, _RRPs, _RCPs, 
  _N, _Bodies, _CNF, _CNF) :- true
  .

%------------------------------------------------------------------------------
% lprove_kt_one_body/7
% lprove_kt_one_body(LRP, LRPs, LCPs, RRPs, RCPs, Body, -CNF)
%------------------------------------------------------------------------------

%%%% todo %%%%

lprove_kt_one_body(LRP, LRPs, LCPs, RRPs, RCPs, Body, CNF) :- true
  , LRP =.. [H|_]
  , body(BRPs, BCPs) = Body
  , gather_by_head(H, BRPs, BRPs_samehead, BRPs_diffhead)

  , length(BRPs_samehead, BRPs_samehead_len)
  , printf("\n---head occurs % time(s) in body---\n", [BRPs_samehead_len])

  % Calculate important variable sets.
  % Go to z3_wrapper.clpr and search for "unord" for more functions about
  % sets.
  , flatten([[LRP],LRPs,LCPs,RRPs,RCPs], Ps)
  , fv(Ps, Vs)
  , flatten([[LRP], LRPs, LCPs], Ps_left)
  , fv(Ps_left, Vs_left)
  , flatten([RRPs, RCPs], Ps_right)
  , fv(Ps_right, Vs_right)
  , UVs = Vs_left                    % implicitly universally quantified.
  , unord_setdiff(Vs, UVs, EVs)      % implicitly existential quantified
  , fv([LRP], ActVs)                 % active variables
  , unord_setdiff(UVs, ActVs, PasVs) % passive variables

  , !
  , lprove_kt_each_brp( LRP, LRPs, LCPs, RRPs, RCPs, BRPs, BCPs, ActVs, BRPs_samehead
                      , PremiseOb_list, ConcLRFragment_list, ConcLCFragment_list
                      )

  % Construct the (Conclusion) proof obligation. It has the form
  % LRPs,LCP,BRPs,BCPs,LRPs_UA_i,LCPs_UA_i,RRPs_UA_i[FreshEVs_i,EVs],RCPs_UA_i[FreshEVs_i/EVs]
  % -> RRPs, RCPs.
  % ConcLRFragment_i contains: LRPs_UA_i,RRPs_UA_i[FreshEVs_i/EVs]
  % ConcLCFragment_i contains: LCPs_UA_i,RCPs_UA_i[FreshEVs_i/EVs]

  , append(LRPs, BRPs, NewLRPs1), append(NewLRPs1, ConcLRFragment_list, NewLRPs)
  , append(LCPs, BRPs, NewLCPs1), append(NewLCPs1, ConcLCFragment_list, NewLCPs)
  , ConcOb = obligation(NewLRPs, NewLCPs, RRPs, RCPs)
  , CNF = [ConcOb|PremiseOb_list]
  .

lprove_kt_each_brp( LRP, LRPs, LCPs, RRPs, RCPs, BRPs, BCPs, ActVs
                  , [BRP_samehead_1 | BRP_samehead_rest]
                  % Input params

                  , [PremiseOb_1 | PremiseOb_rest]
                  , ConcLRFragment_list
                  , ConcLCFragment_list
                  % Output params
                  ) :- true
  , !
  , lprove_kt_one_brp( LRP, LRPs, LCPs, RRPs, RCPs, BRPs, BCPs, ActVs
                     , BRP_samehead_1
                     , PremiseOb_1
                     , ConcLRFragment_1
                     , ConcLCFragment_1
                     )
  , lprove_kt_each_brp( LRP, LRPs, LCPs, RRPs, RCPs, BRPs, BCPs, ActVs
                      , BRP_samehead_rest
                      , PremiseOb_rest
                      , ConcLRFragment_rest
                      , ConcLCFragment_rest
                      )
  , append(ConcLRFragment_1, ConcLRFragment_rest, ConcLRFragment_list)
  , append(ConcLCFragment_1, ConcLCFragment_rest, ConcLCFragment_list)
  .
lprove_kt_each_brp( LRP, LRPs, LCPs, RRPs, RCPs, BRPs, BCPs, ActVs , [] % Input params
                  , [], [], [] % Output params
                  ) :- true
  .
lprove_kt_one_brp( LRP, LRPs, LCPs, RRPs, RCPs, BRPs, BCPs, ActVs, BRP_samehead_i   % Input params
                 , PremiseOb, ConcLRFragment_i, ConcLCFragment_i                    % Output params
                 ) :- true
  % Unfolding
  , get_unifier([LRP], [BRP_samehead_i], USubst_i)
  , printf("USubst_i = %\n", [USubst_i])

  % apply all substitutions in USubsts to LRPs, LCPs, RRPs, RCPs
  , !
  , substitute(USubst_i, LRPs, LRPs_U_i)
  , substitute(USubst_i, LCPs, LCPs_U_i)
  , substitute(USubst_i, RRPs, RRPs_U_i)
  , substitute(USubst_i, RCPs, RCPs_U_i)
  % here, LRPs_U_i is the result of applying USubst_i upon the 

  % list of patterns LRPs.

  % TODO: This depends on get_unifier()  Since
  % domain of each USubsts_i is CritActVs_i
  , substitutions_get_domains([USubst_i], [CritActVs_i])
  , printf("CritActVs_i = % \n", [CritActVs_i])
  % Note that some variables may have been renamed at this point (and thats OK.)

  % AffectedPasVs are PasVs that "depend on"  ActVs.
  % NOTE1: AffectedPasVs_i, for i = 1 ... k where k = BRPs_samehead_len
  % This is because different BRP_samehead rename variables differently,
  % and thus the affected passive variables might also be different.  
  % NOTE2: AffectedPasVs_i depend on CritActVs_i. This is because
  % NonCritActVs_i, which is ActVs \ CritActVs_i, do not change
  % by definition. Therefore, even if a passive variable depends on
  % an active variable, as long as the active variable is not changed
  % by the unfolding substitution USubst_i, then the passive variable
  % should keep the same. 

  , unord_setdiff(ActVs, CritActVs_i, NonCritActVs_i)
  , find_affected_variables(CritActVs_i, NonCritActVs_i, LCPs, AffectedPasVs_i)
  , printf("LCPs %\n", [LCPs])
  , printf("find_affected_variables: % => %\n", [CritActVs_i, AffectedPasVs_i])

  % NOTE: AfffectedPasVs depend only on CritActVs.

  % Affection substitutions AffectedSubst_i. The domain (do not modulo identity
  % substitution) contains exactly all variables PasVs. Now, all variables
  % in AffectedPasVs_i are renamed to something fresh, and keep the rest
  % untouched. In other words, the domain (modulo identity substitution) is
  % AffectedPasVs_i.

  , make_subst_with_fresh(AffectedPasVs_i, ASubst_i)
  , printf("ASubst_i: %\n", [ASubst_i])

  % apply USubst_i and ASubst_i, in order, on
  % LRPs,LCPs -> (exists EVs .) RRPs,RCPs
  , substitute(ASubst_i, LRPs_U_i, LRPs_UA_i)
  , substitute(ASubst_i, LCPs_U_i, LCPs_UA_i)
  , substitute(ASubst_i, RRPs_U_i, RRPs_UA_i)
  , substitute(ASubst_i, RCPs_U_i, RCPs_UA_i)
  , !

  % Construct (Premise) proof obligations. They have the form
  % LRPs,LCPs,BRPs,BCPs -> (exists EVs .) LRPs_UA_i,LCPs_UA_i, i = 1 ... k
  % These proof obligations are called (Premise) because
  % They try to establish the left-hand side after substitutions.
  % Even though we can merge these k (Premise) proof obligations into
  % a big one, we may not want to do that, because that makes the proof
  % more complicated.
  , append(LRPs, BRPs, NewLRPs)
  , append(LCPs, BCPs, NewLCPs)
  , PremiseOb = obligation(NewLRPs, NewLCPs, LRPs_UA_i, LCPs_UA_i)
  , printf("PremiseOb = %\n", [PremiseOb])

  % generate fresh copies of EVs
  , make_subst_with_fresh(EVs, FSubst_i)
  , substitute(FSubst_i, RRPs_UA_i, RRPs_UAF_i)
  , substitute(FSubst_i, RCPs_UA_i, RCPs_UAF_i)

  % Construct the (Conclusion) proof obligation. It has the form
  % LRPs,LCP,BRPs,BCPs,LRPs_UA_i,LCPs_UA_i,RRPs_UA_i[FreshEVs_i,EVs],RCPs_UA_i[FreshEVs_i/EVs]
  % -> RRPs, RCPs.
  % ConcLRFragment_i contains: LRPs_UA_i,RRPs_UA_i[FreshEVs_i/EVs]
  % ConcLCFragment_i contains: LCPs_UA_i,RCPs_UA_i[FreshEVs_i/EVs]
  , append(LRPs_UA_i, RRPs_UA_i, ConcLRFragment_i)
  , append(LCPs_UA_i, RCPs_UA_i, ConcLCFragment_i)


  .




%------------------------------------------------------------------------------
% Auxilliary functions about patterns.
%
% fv(Ps, Vs)
% gather_by_head(H, Ps, Ps_samehead, Ps_diffhead)
%
%------------------------------------------------------------------------------

fv([], []).

fv([P|Ps], Vs) :- true
  , P =.. [_|VarList_P]
  , list_to_set(VarList_P, Vs_P)
  , fv(Ps, Vs_Ps)
  , unord_setunion(Vs_P, Vs_Ps, Vs)
  .

gather_by_head(_H, [], [], []).

gather_by_head(H, [P|Ps], [P|Ps_samehead], Ps_diffhead) :- true
, P =.. [H|_]
, !
, gather_by_head(H, Ps, Ps_samehead, Ps_diffhead)
.

% P doesn't have head H
gather_by_head(H, [P|Ps], Ps_samehead, [P|Ps_diffhead]) :- true
, gather_by_head(H, Ps, Ps_samehead, Ps_diffhead)
.


















number_of_occurrences(_LRP,[],0).


% LRP and BRP have the same head.
number_of_occurrences(LRP,[BRP|BRPs],Answer) :- true
  , LRP =.. [Head|_]
  , BRP =.. [Head|_]
  , !
  , number_of_occurrences(LRP, BRPs, Answer1)
  , Answer = Answer1 + 1
  .

% LRP and BRP have different heads.
number_of_occurrences(LRP,[_BRP|BRPs],Answer) :- true
  , !
  , number_of_occurrences(LRP,BRPs,Answer)
  .

get_the_first_atom_with_the_same_head(
  LRP,[BRP|BRPs],BRP,BRPs) :- true
  , LRP =.. [Head|_]
  , BRP =.. [Head|_]
  , !
  .

get_the_first_atom_with_the_same_head(
  LRP,[BRP|BRPs],OutAtom,[BRP|OutAtoms]) :- true
  , get_the_first_atom_with_the_same_head(LRP,BRPs,OutAtom,OutAtoms)
  .
  

% The case when BRPs are all distinct from LRP.
% In this case, KT is just left unfolding.
lprove_kt_one_body(LRP,LRPs,LCPs,RRPs,RCPs, Body, [Ob]) :- true
  , Body = body(BRPs, BCPs)
  , number_of_occurrences(LRP,BRPs,N)
  , N = 0
  , !
  , printf("\n---KT(0:_) begins---\n",[])
  % replace LRP for BRPs,BCPs
  , append(LRPs,BRPs,NewLRPs)
  , append(LCPs,BCPs,NewLCPs)
  , Ob = obligation(NewLRPs,NewLCPs,RRPs,RCPs)
  , printf("Ob=%\n", [Ob])
  , printf("---KT(0:_) ends---\n",[])
  .

% The case when BRPs have exactly one atom with the same head as LRP,
% and RRPs all different from LRP.
lprove_kt_one_body(LRP,LRPs,LCPs,AllRRPs,RCPs,
  body(AllBRPs, BCPs), KTSet) :- true
 , number_of_occurrences(LRP,AllBRPs,N1)
 , number_of_occurrences(LRP,AllRRPs,N2)
 , N1 = 1
 , N2 = 0
 , !
 , printf("\n---KT(1:0) begins---\n",[])
 , get_the_first_atom_with_the_same_head(LRP,AllBRPs,BRP,BRPs)
 , flatten([LRPs,LCPs],LHS)
 , flatten([AllRRPs,RCPs],RHS)

 , printf("\n---apply KT on---\n", [])
 , printf("%\n%\n  ->\n%\n", [LRP,LHS,RHS]) 
 , printf("---case is---\n", [])
 , printf("%\n%\n%\n", [BRP, BRPs,BCPs])

 % Variables in LRP are called active variables.
 % Variables in LRPs,LCPs,AllRRPs,RCPs but not in LRP 
 % are called passive variables.
 % We assume that LRP have distinct variables, so ActiveVars is a set.

 , flatten([[LRP], LRPs, LCPs,AllRRPs,RCPs],
     AllOriginalTerms)
 , collect_variables(AllOriginalTerms, OriginalVarList)
 , collect_variables([LRP], ActiveVars) % already a set
 , list_to_set(OriginalVarList, OriginalVars)
 , unord_setdiff(OriginalVars,ActiveVars,PassiveVars)

 , printf("\n---after variable collection---\n",[])
 , printf("ActiveVars = %\nPassiveVars = %\n", [ActiveVars,PassiveVars])

 % Subst1
 , get_unifier([LRP], [BRP], Subst1)
 , substitute(Subst1, [LRPs],        [LRPs1])
 , substitute(Subst1, [LCPs], [LCPs1])
 , substitute(Subst1, [AllRRPs],    [AllRRPs1])
 , substitute(Subst1, [RCPs], [RCPs1])

 % printf("\n---after Subst1---\n", [])
 % printf("Subst1 = %\n", [Subst1])
 % printf("LCPs = %\n", [LCPs])
 % printf("LCPs1 = %\n", [LCPs1])

 % Construct proof obligations (6a2) and (6b)
 % TODO:: Find better names.

 % [BRPs,BCPs,LRPs,LCPs] is LHS6a2
 %  ------------------  -------------------
 %        BODY                 LHS

 % [LRPs1,LCPs1] is RHS6a2
 %  -----------------------
 %           LHS'

 , flatten([BRPs,LRPs], LRPs6a2)
 , flatten([BCPs,LCPs], LCPs6a2)

 , Ob6a2 = obligation(LRPs6a2, LCPs6a2, LRPs1, LCPs1)

 % [AllRRPs1, RCPs1] is RHS'

 % LHS', RHS', BODY, LHS -> RHS

 , flatten([LRPs1,AllRRPs1,BRPs,LRPs], LRPs6b)
 , flatten([LCPs1,RCPs1,BCPs,LCPs], LCPs6b)

 , Ob6b = obligation(LRPs6b, LCPs6b, AllRRPs, RCPs)

 % printf("\n---final check---\n",[])
 % printf("ActiveVars = %\nPassiveVars = %\n", [ActiveVars,PassiveVars])
 % printf("LRP = %\n", [LRP])
 % printf("LCPs = %\n", [LCPs])
 % printf("AllRRPs = %\n", [AllRRP])
 % printf("RCPs = %\n", [RCPs])
 % printf("BRP = %\n", [BRP])
 % printf("Subst1 = %\n", [Subst1])
 % printf("BCPs = %\n", [BCPs])
 % printf("LCPs1 = %\n", [LCPs1])
 % printf("AllRRP1 = %\n", [AllRRP1])
 % printf("RCPs1 = %\n", [RCPs1])
 % printf("\n",[])

 , KTSet= [Ob6a2,Ob6b]
 , printf("\n---KT(1:0) ends---\n",[])
 , !
 .


%------------------------------------------------------------------------------
% The case when BRPs have exactly one atom with the same head as LRP,
% and RRPs have exactly one atom with the same head as LRP, too.
% Proof obligation: LRP,LRPs,LCPs -> RRP,RRPs,RCPs
%                                                ------------
%                                                  AllRRPs
%
% Recursive definition LRP = ... \/ BRP,BRPs,BCPs \/ ...
%                                     ------------
%                                      AllBRPs
%
% where LRP,RRP,BRP have the same head and RRPs,BRPs don't have.
%------------------------------------------------------------------------------

lprove_kt_one_body(LRP,LRPs,LCPs,AllRRPs,RCPs,
  body(AllBRPs, BCPs), KTSet) :- true
 , number_of_occurrences(LRP,AllBRPs,N1)
 , number_of_occurrences(LRP,AllRRPs,N2)
 , printf("N1=%,N2=%\n",[N1,N2])
 , N1 = 1
 , N2 = 1
 , !
 , printf("\n---KT(1:1) begins---\n",[])
 , get_the_first_atom_with_the_same_head(LRP,AllRRPs,RRP,RRPs)
 , get_the_first_atom_with_the_same_head(LRP,AllBRPs,BRP,BRPs)
 , flatten([LRPs,LCPs],LHS)
 , flatten([AllRRPs,RCPs],RHS)

 , printf("\n---apply KT on---\n", [])
 , printf("%\n%\n  ->\n%\n", [LRP,LHS,RHS]) 
 , printf("---case is---\n", [])
 , printf("%\n%\n%\n", [BRP, BRPs,BCPs])

 % Variables in LRP are called active variables.
 % Variables in LRPs,LCPs,AllRRPs,RCPs but not in LRP 
 % are called passive variables.
 % We assume that LRP have distinct variables, so ActiveVars is a set.

 , flatten([[LRP], LRPs, LCPs,AllRRPs,RCPs],
     AllOriginalTerms)
 , collect_variables(AllOriginalTerms, OriginalVarList)
 , collect_variables([LRP], ActiveVars) % already a set
 , list_to_set(OriginalVarList, OriginalVars)
 , unord_setdiff(OriginalVars,ActiveVars,PassiveVars)

 , printf("\n---after variable collection---\n",[])
 , printf("ActiveVars = %\nPassiveVars = %\n", [ActiveVars,PassiveVars])

 % Subst1
 , get_unifier([LRP], [BRP], Subst1)
 , !
 , substitute(Subst1, [LRPs],        [LRPs1])
 , substitute(Subst1, [LCPs], [LCPs1])
 , substitute(Subst1, [RRP],        [RRP1])
 , substitute(Subst1, [RRPs],        [RRPs1])
 , substitute(Subst1, [RCPs], [RCPs1])

 % printf("\n---after Subst1---\n", [])
 % printf("Subst1 = %\n", [Subst1])
 % printf("LCPs = %\n", [LCPs])
 % printf("LCPs1 = %\n", [LCPs1])

 % Subst2
 , collect_variables_by_position(RRP, CP, RRPCriticalVars)
 , unord_setintersection(RRPCriticalVars, PassiveVars, RRPPassiveCriticalVars)
 , freshcopy(RRPPassiveCriticalVars, FreshCopyRRPPassiveCriticalVars)
 , get_unifier(RRPPassiveCriticalVars, FreshCopyRRPPassiveCriticalVars, Subst2)

 , substitute(Subst2, [LRPs1],  [LRPs2])
 , substitute(Subst2, [LCPs1],  [LCPs2])
 , substitute(Subst2, [RRP1],  [RRP2])
 , substitute(Subst2, [RRPs1],  [RRPs2])
 , substitute(Subst2, [RCPs1],  [RCPs2])

 , printf("\n---after Subst2---\n", [])
 , printf("RRP = %\n", [RRP])
 , printf("CP = %\n", [CP])
 , printf("RRPCriticalVars = %\n", [RRPCriticalVars])
 , printf("RRPPassiveCriticalVars = %\n", [RRPPassiveCriticalVars])
 , printf("FreshCopyRRPPassiveCriticalVars = %\n", [FreshCopyRRPPassiveCriticalVars])
 , printf("Subst2 = %\n", [Subst2])

 % Construct proof obligations (6a2) and (6b)
 % TODO:: Find better names.

 % [BRPs,BCPs,LRPs,LCPs] is LHS6a2
 %  ------------------  -------------------
 %        BODY                 LHS

 % [LRPs2,LCPs2] is RHS6a2
 %  -----------------------
 %           LHS''

 , flatten([BRPs,LRPs], LRPs6a2)
 , flatten([BCPs,LCPs], LCPs6a2)

 , Ob6a2 = obligation(LRPs6a2, LCPs6a2, LRPs2, LCPs2)

 % [RRP2 RRPs2 RCPs2] is RHS''

 % LHS'', RHS'', BODY, LHS -> RHS

 , flatten([LRPs2,RRP2,RRPs2,BRPs,LRPs], LRPs6b)
 , flatten([LCPs2,RCPs2,BCPs,LCPs], LCPs6b)

 , Ob6b = obligation(LRPs6b, LCPs6b, AllRRPs, RCPs)

 , printf("\n---final check---\n",[])
 , printf("ActiveVars = %\nPassiveVars = %\n", [ActiveVars,PassiveVars])
 , printf("LRP = %\n", [LRP])
 , printf("LCPs = %\n", [LCPs])
 , printf("RRP = %\n", [RRP])
 , printf("RCPs = %\n", [RCPs])
 , printf("BRP = %\n", [BRP])
 , printf("Subst1 = %\n", [Subst1])
 , printf("BCPs = %\n", [BCPs])
 , printf("LRPs1 = %\n", [LRPs1])
 , printf("LCPs1 = %\n", [LCPs1])
 , printf("RRP1 = %\n", [RRP1])
 , printf("RCPs1 = %\n", [RCPs1])
 , printf("CP = %\n", [CP])
 , printf("RRPCriticalVars = %\n", [RRPCriticalVars])
 , printf("Subst2 = %\n", [Subst2])
 , printf("LRPs2 = %\n", [LRPs2])
 , printf("LCPs2 = %\n", [LCPs2])
 , printf("RRP2 = %\n", [RRP2])
 , printf("RCPs2 = %\n", [RCPs2])
 , printf("\n",[])


 , KTSet= [Ob6a2,Ob6b]
 , printf("KTSet = %\n", [KTSet])
 , printf("\n---KT(1:1) ends---\n",[])
 , !
 .

%------------------------------------------------------------------------------

lprove_kt_one_body(
  LRP,LRPs,LCPs,RRPs,RCPs,Body,KTSet) :- true
  , body(BRPs_all, BCPs) = Body
  , LRP =.. [H|_]
  , count_occurrences_of_head(H, BRPs_all, HeadOccurTimesInBody)
  , count_occurrences_of_head(H, RRPs, HeadOccurTimesInRightHandSide)
  , HeadOccurTimesInBody = 2
  , HeadOccurTimesInRightHandSide = 0
  , !
  , printf("\n---KT(2:0) begins---\n",[])

  , get_the_first_atom_with_the_same_head(LRP, BRPs_all, BRP_1, BRPs_yet)
  , get_the_first_atom_with_the_same_head(LRP, BRPs_yet, BRP_2, _)

  , get_unifier([LRP], [BRP_1], BSubst_1)
  , get_unifier([LRP], [BRP_2], BSubst_2)

  , printf("BSubst_1 = %\nBSubst_2 = %\n", [BSubst_1, BSubst_2])

  , substitute(BSubst_1, LRPs, LRPs_1)

 
  , substitute(BSubst_1, [LCPs], [LCPs_1])
  , substitute(BSubst_1, [RRPs], [RRPs_1])
  , substitute(BSubst_1, [RCPs], [RCPs_1])
  , substitute(BSubst_2, [LRPs], [LRPs_2])
  , substitute(BSubst_2, [LCPs], [LCPs_2])
  , substitute(BSubst_2, [RRPs], [RRPs_2])
  , substitute(BSubst_2, [RCPs], [RCPs_2])

  % (L_1 -> R_1), (L_2 -> R_2), B, L -> R
  %   turns to
  % B, L -> L1
  % B, L -> L2
  % B, L, L1, L2, R1, R2 -> R
  
  , flatten([BRPs_all, LRPs], BLRPs)
  , flatten([BCPs, LCPs], BLCPs)

  , Ob1 = obligation(BLRPs, BLCPs, LRPs_1, LCPs_1)
  , Ob2 = obligation(BLRPs, BLCPs, LRPs_2, LCPs_2)

  , flatten([BLRPs, LRPs_1, LRPs_2, RRPs_1, RRPs_2], Main_LRPs)
  , flatten([BLCPs, LCPs_1, LCPs_2, RCPs_1, RCPs_2], Main_LCPs)

  , Main_Ob = obligation(Main_LRPs, Main_LCPs, RRPs, RCPs)
  , KTSet = [Ob1, Ob2, Main_Ob]
  , printf("Ob1=%\nOb2=%\nMain_Ob=%\n", KTSet)
  , printf("\n---KT(2:0) ends---\n",[])
  .




%------------------------------------------------------------------------------
% Otherwise case
lprove_kt_one_body(LRP,_LRPs,_LCPs,_RRPs,_RCPs,
  body(BRPs, _BCPs), KTSet) :- true
  , printf("\n---KT: uncovered case---\n", [])
  , number_of_occurrences(LRP,BRPs,N)
  , printf("number of occurrences in body=%\n",[N])
  , KTSet = [failure]  % something dummy that fails the future proof.
  .


























%------------------------------------------------------------------------------
% Auxilliary functions about lists.
%
% part(+Es, +Ns, -Fs)
% Assume:
% - Ns is in the range of Es.
% - Ns is strictly increasing.
% 
%------------------------------------------------------------------------------

part(Es, Ns, Fs) :- true
  , part_aux(Es, Ns, Fs, 0)
  .

part_aux(_Es, [], [], _Offset) :- true
  .

part_aux([E|Es], [N|Ns], [E|Fs], Offset) :- true
  , N - Offset = 1 % E is in
  , !
  , part_aux(Es, Ns, Fs, Offset + 1)
  .

part_aux([_E|Es], [N|Ns], Fs, Offset) :- true
  , N - Offset >= 2 % E is not in
  , !
  , part_aux(Es, [N|Ns], Fs, Offset + 1)
  .


% find_critical_variables([], H, CPs, []).
% 
% find_critical_variables([RP|RPs], H, CPs, CVars) :- true
%   , RP =.. [H|Xs]
%   , !
%   , part(Xs, CPs, CXs)
%   , find_critical_variables(RPs, H, CPs, CVars_Rest)
%   , unord_setunion(CXs, CVars_Rest, CVars)
%   .
% 
% % The otherwise case, RP doesn't have head H, skip it.
% find_critical_variables([RP|RPs], H, CPs, CVars) :- true
%   , find_critical_variables(RPs, H, CPs, CVars)
%   .


count_occurrences_of_head(_H, [], 0) :- true
  .

count_occurrences_of_head(H, [P|Ps], N) :- true
  , P =.. [H|_]
  , !
  , count_occurrences_of_head(H, Ps, M)
  , N = M + 1
  .

% The otherwise case, P doesn't have head H
count_occurrences_of_head(H, [_P|Ps], N) :- true
  , count_occurrences_of_head(H, Ps, N)
  .
