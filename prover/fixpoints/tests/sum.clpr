inductionlimit(1).
unfolddepthbound(12).
traceleftbound(10).
tracerightbound(2).

declare_unification_type(reach,  [arreq, eq, arreq, arreq, arreq, arreq, eq]).
declare_unification_type(step,  [eq, arreq, eq, arreq, arreq, eq, arreq, arreq]).
declare_unification_type(iter,  [arreq, eq, arreq, arreq, eq, eq, arreq, arreq, eq]).
declare_unification_type(sigma,  [eq, eq, eq, eq]).

unfold(reach(P, I1, S1, H1, S2, H2, Step),
  [
  body([], 
       [eq(Step, 0),
        eq(S1, S2), 
        eq(H1, H2)]),
  body([step(Type, P, I1, S1, H1, I3, S3, H3),
        reach(P, I3, S3, H3, S2, H2, NStep)],
       [gt(Step, 0),
        eq(minus(Step, 1), NStep),
        eq(Type, ref(P, I1))])
  ]).
unfold(step(Type, P, I1, S1, H1, I2, S2, H2),
  [
%  body([], 
%       [eq(Type, 0),
%        eq(I2, plus(I1, 1)),
%        eq(S1, S2), 
%        eq(H1, H2)]),  
  body([], 
       [eq(Type, 1),
        eq(V1, ref(P, plus(I1,1))),
        eq(V2, ref(P, plus(I1,2))),
        eq(I2, plus(I1, 3)),
        arrassign(S3, upd(S1, V1, V2)),
        eq(S2, S3),
        eq(H2, H1)]),
  body([], 
       [eq(Type, 2),
        eq(V1, ref(P, plus(I1,1))),
        eq(V2, ref(P, plus(I1,2))),
        eq(I2, plus(I1, 3)),
        eq(V3, ref(S1, V1)),
        eq(V4, ref(S1, V2)),
        eq(V5, plus(V3, V4)),
        arrassign(S3, upd(S1, V1, V5)),
        eq(S2, S3),
        eq(H2, H1)]),
  body([], 
       [eq(Type, 3),
        eq(V1, ref(P, plus(I1,1))),
        eq(V2, ref(P, plus(I1,2))),
        eq(I2, plus(I1, 3)),
        eq(V3, ref(S1, V1)),
        eq(V4, minus(V3, V2)),
        arrassign(S3, upd(S1, V1, V4)),
        eq(S2, S3),
        eq(H2, H1)]),
  body([iter(P, I3, S1, H1, I1, I2, S2, H2, Step)], 
       [eq(Type, 4),
        eq(V1, ref(P, plus(I1,1))),
        eq(V2, ref(P, plus(I1,2))),
        eq(J, ref(P, plus(I1,3))),
        eq(Step, ref(P, plus(I1,4))),
        eq(I3, plus(I1, 5)),
        eq(I2, plus(I1, J)),
        gt(ref(S1, V1), V2)]),
  body([], 
       [eq(Type, 4),
        eq(V1, ref(P, plus(I1,1))),
        eq(V2, ref(P, plus(I1,2))),
        eq(J, ref(P, plus(I1,3))),
        eq(Step, ref(P, plus(I1,4))),
        eq(I2, plus(I1, J)),
        eq(ref(S1, V1), V2),
        eq(S1, S2), 
        eq(H1, H2)])
  ]).
unfold(iter(P, I1, S1, H1, I3, I2, S2, H2, Step),
  [
  body([step(Type, P, I3, S1, H1, I2, S2, H2)], 
       [eq(Step, 0),
        eq(Type, ref(P, I3))]),
  body([step(Type, P, I1, S1, H1, I4, S4, H4),
        iter(P, I4, S4, H4, I3, I2, S2, H2, NStep)], 
       [gt(Step, 0),
        eq(Type, ref(P, I1)),
        eq(NStep, minus(Step, 1))])
  ]).
unfold(sigma(L, U, B, S),
  [
  body([], 
       [gt(L, U),
        eq(S, B)]),  
  body([sigma(L, U1, B1, S)], 
       [z3_not(gt(L, U)),
        eq(U1, minus(U, 1)),
        eq(B1, plus(B, U))])
  ]).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Program verification examples
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
run_ex_1 :- true
, LRPs = [reach(Prog, I, S, H, S_Final, H_Final, Step)]
, LCPs = [eq(4, ref(Prog, 0)),
          eq(N, ref(Prog, 1)),
          eq(0, ref(Prog, 2)),
          eq(11, ref(Prog, 3)),
          eq(2, ref(Prog, 4)),
          eq(2, ref(Prog, 5)),
          eq(X, ref(Prog, 6)),
          eq(N, ref(Prog, 7)),
          eq(3, ref(Prog, 8)),
          eq(N, ref(Prog, 9)),
          eq(1, ref(Prog, 10)),
          z3_not(eq(X, N)),
          
          
          eq(K, ref(S, N)),
          gt(K, -1),          
          eq(Y, ref(S, X)),
          
          eq(I, 0),
          eq(Step, 1)]
, RRPs = [sigma(1, K, Y, Z)]
, RCPs = [ eq(0, ref(S_Final, N))
         , eq(Z, ref(S_Final, X))
         , eq(H_Final, H)
         , eq(H, H_Final)
         ]
, lprove(["SUM"], 11, LRPs, LCPs, RRPs, RCPs)
, printf("Ex1 is verified.\n", []).
  
run :-
  run_ex_1,
  !,
  printf("PROOF SUCCEED.\n", []).
run :-
  printf("PROOF FAILED\n", []).
:- consult('solver_main.clpr').
:- run, halt.
