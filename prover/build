#!/usr/bin/env python3

import sys
from os import (path, environ)

repo_dir = path.dirname(__file__)
sys.path.append(path.join(repo_dir, 'ext/'))
from kninja import *
environ['PATH'] = path.join(repo_dir, 'ext/k-light/bin/') + ':' + environ['PATH']

# Project Definition
# ==================

proj = KProject()

# Matching Logic Prover
# =====================

other_md_files = [ 'lang/smt-lang.md'
                 , 'lang/kore-lang.md'
                 , 'drivers/configuration.md'
                 , 'drivers/smt-driver.md'
                 , 'drivers/kore-driver.md'
                 , 'strategies/core.md'
                 , 'strategies/knaster-tarski.md'
                 , 'strategies/matching.md'
                 , 'strategies/simplification.md'
                 , 'strategies/search-bound.md'
                 , 'strategies/smt.md'
                 , 'strategies/unfolding.md'
                 ]

def prover(alias, flags = None):
    return proj.definition( alias = alias
                          , backend = 'ocaml'
                          , main = 'prover.md'
                          , other = other_md_files
                          , runner_script = './prover'
                          , flags = flags
                          )

prover_kore = prover('prover-kore', '--syntax-module PROVER-KORE-SYNTAX')
prover_smt  = prover('prover-smt', '--syntax-module PROVER-SMT-SYNTAX')

# Functional tests
# ----------------

prover_kore.tests(inputs = glob('t/*.kore'), implicit_inputs = glob('t/definitions/*.kore'))
prover_smt .tests(inputs = glob('t/*.smt2'))

def sl_comp_test(test):
    proj.source('t/SL-COMP18/bench/' + test) \
        .then(prover_smt.krun()) \
        .default()

log_to_file = proj.rule( 'log-to-file'
                       , description = '$out: $message'
                       , command = "echo '$message' >> '$log_file'"
                       )

list_passing = []
for test in glob('t/SL-COMP18/bench/qf_shid_entl/*.smt2'):
    list_passing += [
        proj.source(test) \
            .then(prover_smt.krun().variable('env', 'gtimeout 10m')) \
            .then(log_to_file.variable('log_file', 't/passing/qf_shid_entl') \
                             .variable('message',  test) \
                             .output('t/passing/qf_shid_entl.' + test.replace('/', '.'))
                 )
       ]
proj.alias('collect-qf_shid_entl', list_passing).default()

# Unit Tests
# ----------

test_driver = proj.definition( alias = 'test-driver'
                             , backend = 'ocaml'
                             , main = 'drivers/unit-tests.md'
                             , other = other_md_files + ['prover.md']
                             , runner_script = './prover'
                             )

unit_tests = []
for test in glob('t/unit/*'):
    unit_tests += [proj.source(test).then(test_driver.krun())]
proj.alias('unit-tests', unit_tests).default()

proj.main()
