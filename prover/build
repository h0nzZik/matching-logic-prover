#!/usr/bin/env python3

import sys
from os import (path, environ)

repo_dir = path.dirname(__file__)
sys.path.append(path.join(repo_dir, 'ext/'))
from kninja import *
environ['PATH'] = path.join(repo_dir, 'ext/k-light/bin/') + ':' + environ['PATH']

# Project Definition
# ==================

proj = KProject()

# Matching Logic Prover
# =====================

other_md_files = [ 'smt.md'
                 , 'kore.md'
                 , 'smtlib-to-kore.md'
                 , 'strategies/core.md'
                 , 'strategies/knaster-tarski.md'
                 , 'strategies/matching.md'
                 , 'strategies/simplification.md'
                 , 'strategies/search-bound.md'
                 , 'strategies/smt.md'
                 , 'strategies/unfolding.md'
                 ]

def prover(alias, flags = None):
    return proj.definition( alias = alias
                          , backend = 'ocaml'
                          , main = 'prover.md'
                          , other = other_md_files
                          , runner_script = './prover'
                          , flags = flags
                          )

prover_kore = prover('prover-kore', '--syntax-module PROVER-KORE-SYNTAX')
prover_smt  = prover('prover-smt', '--syntax-module PROVER-SMT-SYNTAX')

# Functional tests
# ----------------

prover_kore.tests(inputs = glob('t/*.kore'), implicit_inputs = glob('t/definitions/*.kore'))
prover_smt .tests(inputs = glob('t/*.smt2'))

def sl_comp_test(test):
    proj.source('t/SL-COMP18/bench/' + test) \
        .then(prover_smt.krun()) \
        .default()

sl_comp_test('qf_shid_entl/01.tst.smt2')
sl_comp_test('qf_shid_entl/02.tst.smt2')
sl_comp_test('qf_shid_entl/03.tst.smt2')
sl_comp_test('qf_shid_entl/04.tst.smt2')
sl_comp_test('qf_shid_entl/05.tst.smt2')
sl_comp_test('qf_shid_entl/06.tst.smt2')
sl_comp_test('qf_shid_entl/07.tst.smt2')
sl_comp_test('qf_shid_entl/08.tst.smt2')
sl_comp_test('qf_shid_entl/09.tst.smt2')
# sl_comp_test('qf_shid_entl/10.tst.smt2')

# sl_comp_test('qf_shid_entl/11.tst.smt2')
# sl_comp_test('qf_shid_entl/12.tst.smt2')
# sl_comp_test('qf_shid_entl/13.tst.smt2')
# sl_comp_test('qf_shid_entl/14.tst.smt2')
sl_comp_test('qf_shid_entl/15.tst.smt2')
# sl_comp_test('qf_shid_entl/16.tst.smt2')
# sl_comp_test('qf_shid_entl/17.tst.smt2')
# sl_comp_test('qf_shid_entl/18.tst.smt2')
sl_comp_test('qf_shid_entl/19.tst.smt2')

# sl_comp_test('qf_shid_entl/21.tst.smt2')
sl_comp_test('qf_shid_entl/22.tst.smt2')

# Unit Tests
# ----------

test_driver = proj.definition( alias = 'test-driver'
                             , backend = 'ocaml'
                             , main = 'unit-tests.md'
                             , other = other_md_files + ['prover.md']
                             , runner_script = './prover'
                             )
def remove(blacklist, iter):
    def f(item):
        return not item in blacklist
    return filter(f, iter)
test_driver.tests( alias = 'unit-tests'
                 , inputs = remove(['t/unit/expected'], glob('t/unit/*'))
                 , expected='t/unit/expected'
                 )

proj.main()
