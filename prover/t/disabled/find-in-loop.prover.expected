<prover>
  <goal>
    <id>
      root
    </id>
    <active>
      true
    </active>
    <parent>
      .
    </parent>
    <k>
      \implies ( \and ( find-list-seg ( variable ( "H0" ) { ArrayIntInt } , variable ( "OLDX" ) { Int } , variable ( "X" ) { Int } , variable ( "F1" ) { SetInt } , .Patterns ) , find-list ( variable ( "H0" ) { ArrayIntInt } , variable ( "X" ) { Int } , variable ( "F2" ) { SetInt } , .Patterns ) , disjoint ( variable ( "F1" ) { SetInt } , variable ( "F2" ) { SetInt } , .Patterns ) , \not ( isMember ( variable ( "DATA" ) { Int } , variable ( "F1" ) { SetInt } , .Patterns ) ) , gt ( variable ( "X" ) { Int } , 0 , .Patterns ) , gt ( variable ( "X" ) { Int } , variable ( "DATA" ) { Int } , .Patterns ) , \equals ( variable ( "X2" ) { Int } , select ( variable ( "H0" ) { ArrayIntInt } , plus ( variable ( "X" ) { Int } , 1 , .Patterns ) , .Patterns ) ) , \equals ( variable ( "F3" ) { SetInt } , add ( variable ( "F1" ) { SetInt } , variable ( "X" ) { Int } , .Patterns ) ) , \equals ( variable ( "F4" ) { SetInt } , del ( variable ( "F2" ) { SetInt } , variable ( "X" ) { Int } , .Patterns ) ) , .Patterns ) , \exists { variable ( "Y" , 1 ) { Int } , variable ( "F" , 0 ) { SetInt } , .Patterns } \and ( find-list ( variable ( "H0" ) { ArrayIntInt } , variable ( "X2" ) { Int } , variable ( "F4" ) { SetInt } , .Patterns ) , disjoint ( variable ( "F3" ) { SetInt } , variable ( "F4" ) { SetInt } , .Patterns ) , \not ( isMember ( variable ( "DATA" ) { Int } , variable ( "F3" ) { SetInt } , .Patterns ) ) , find-list-seg ( variable ( "H0" ) { ArrayIntInt } , variable ( "OLDX" ) { Int } , variable ( "Y" , 1 ) { Int } , variable ( "F" , 0 ) { SetInt } , .Patterns ) , gt ( variable ( "Y" , 1 ) { Int } , 0 , .Patterns ) , \equals ( variable ( "X2" ) { Int } , select ( variable ( "H0" ) { ArrayIntInt } , plus ( variable ( "Y" , 1 ) { Int } , 1 , .Patterns ) , .Patterns ) ) , \equals ( variable ( "F3" ) { SetInt } , add ( variable ( "F" , 0 ) { SetInt } , variable ( "Y" , 1 ) { Int } , .Patterns ) ) , \not ( isMember ( variable ( "Y" , 1 ) { Int } , variable ( "F" , 0 ) { SetInt } , .Patterns ) ) , .Patterns ) )
    </k>
    <strategy>
      success ~> #hole ; simplify ; instantiate-existentials ; smt
    </strategy>
    <trace>
      right-unfold-oneBody ( find-list-seg ( variable ( "H0" ) { ArrayIntInt } , variable ( "OLDX" ) { Int } , variable ( "X2" ) { Int } , variable ( "F3" ) { SetInt } , .Patterns ) , \exists { variable ( "Y" , 1 ) { Int } , variable ( "F" , 0 ) { SetInt } , .Patterns } \and ( find-list-seg ( variable ( "H0" ) { ArrayIntInt } , variable ( "OLDX" ) { Int } , variable ( "Y" , 1 ) { Int } , variable ( "F" , 0 ) { SetInt } , .Patterns ) , gt ( variable ( "Y" , 1 ) { Int } , 0 , .Patterns ) , \equals ( variable ( "X2" ) { Int } , select ( variable ( "H0" ) { ArrayIntInt } , plus ( variable ( "Y" , 1 ) { Int } , 1 , .Patterns ) , .Patterns ) ) , \equals ( variable ( "F3" ) { SetInt } , add ( variable ( "F" , 0 ) { SetInt } , variable ( "Y" , 1 ) { Int } , .Patterns ) ) , \not ( isMember ( variable ( "Y" , 1 ) { Int } , variable ( "F" , 0 ) { SetInt } , .Patterns ) ) , .Patterns ) )
    </trace>
  </goal>
</prover>
