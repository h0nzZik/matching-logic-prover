symbol listSortedLength(ArrayIntInt, Int, SetInt, Int, Int) : Bool
axiom \forall { variable("H") { ArrayIntInt }, variable("X") { Int }, variable("F") { SetInt }, variable("PREV_VAL") { Int }, variable("LENGTH") { Int } }
      \iff-lfp( listSortedLength(variable("H") { ArrayIntInt }, variable("X") { Int }, variable("F") { SetInt }, variable("PREV_VAL") { Int }, variable("LENGTH") { Int })
              , \or( \and( \equals(variable("X") { Int }, 0)
                         , \equals(variable("F") { Int }, emptyset)
                         , \equals(variable("LENGTH") { Int }, 0)
                         , .Patterns
                         )
                   , \and( listSortedLength( variable("H") { Int }
                                           , variable("X", !I:Int) { Int }
                                           , variable("F", !I:Int) { SetInt }
                                           , variable("VAL", !I:Int) { Int }
                                           , variable("LENGTH", !I:Int) { Int }
                                           , .Patterns
                                           )
                         , gt(variable("X") { Int }, 0)
                         , \equals(select(variable("H") { Int }, variable("X") { Int }) , variable("X", !I:Int) { Int })
                         , \equals(variable("F") { Int } , union(variable("F", !I:Int) { SetInt }, singleton(X)))
                         , disjoint(variable("F", !I:Int) { SetInt }, singleton(variable("X") { Int }))
                         , \equals(variable("VAL", !I:Int) { Int } , select(variable("H") { Int }, plus(variable("X") { Int }, 1)))
                         , gt(variable("VAL", !I:Int) { Int }, variable("PREV_VAL") { Int })
                         , gt(variable("LENGTH") { Int }, 0)
                         , \equals(variable("LENGTH", !I:Int) { Int }, minus(variable("LENGTH") { Int }, 1))
                         , .Patterns
                         )
                   , .Patterns
                   )
              )
