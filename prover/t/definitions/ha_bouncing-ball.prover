// Kore axiomatization of bouncing ball HA

sort State

symbol reach( State , State ) : Bool

axiom functional(reach)

symbol evolve( State , Real ) : State

symbol valZ( State ) : Real
symbol valV( State ) : Real

axiom functional(valZ)
axiom functional(valV)

symbol mode( State ) : Int

axiom functional(mode)
axiom functional(evolve)

symbol transition( State , State ) : Bool
axiom functional( transition )

axiom smt-lemma( \forall { S1 { State }, S2 { State } }
                    \equals( transition( S1 { State }, S2 { State })
                            , \and( \equals( mode( S1 { State }), mode( S2 { State } ))
                                  , \equals( valZ( S1 { State }), 0 )
                                  , \equals( valZ( S2 { State }), 0 )
                                  , \equals( valV( S2 { State })
                                           , mult( -1, valV( S1 { State }))
                                           )
                                  )
                            )
               )

symbol stateSatisfiesInvariant( State ) : Bool

axiom functional(stateSatisfiesInvariant)

axiom smt-lemma( \forall { S1 { State } }
                     \equals( stateSatisfiesInvariant(S1 { State })
                            , gt(valZ(S1 { State } ), 0)
                            )
               )


symbol jump(State) : Bool

axiom functional(jump)

axiom smt-lemma( \forall { S { State } }
                    \and (\equals (jump( S { State } ), \equals( valZ( S { Int }), 0))))

axiom smt-lemma( \forall { S1 { State }, S2 { State }, T { Real } }
                  \implies( \and( gt(T { Real }, 0)
                                , \equals( S2 { State }, evolve( S1 { State } , T { Real }))
                                )
                          , \and( \equals( mode(S2 { State })
                                         , mode(S1 { State })
                                         )
                                , \equals( valV(S2 { State })
                                         , plus(valV(S1 { State }), mult(10, T { Real }))
                                         )
                                , \equals( valZ(S2 { State })
                                         , plus( valZ( S1 { State })
                                               , plus( mult(valV( S1 { State }), T { Real })
                                                      , div(mult(10, mult(T { Real }, T { Real })), 2)
                                                     )
                                               )
                                         )
                                 )
                          )
                )


axiom \forall { S1 { State },  S2 { State } }
      \iff-lfp( reach( S1 { State } , S2 { State } )
              , \or ( \exists { } \and ( \equals ( valZ(S1 { State }), valZ(S2 { State }) )
                                       , \equals ( valV(S1 { State }), valV(S2 { State }) )
                                       , \equals ( mode(S1 { State }), mode(S2 { State }) )
                                       )
                    , \exists { T { Real } } \and( gt( T { Real }, 0 )
                                                 , \equals( S2 { State }, evolve( S1 { State }, T { Real }))
                                                 , stateSatisfiesInvariant( S1 { State } )
                                                 , \forall { T2 { Real } }
                                                    \and( gt(T2 { Real }, 0 )
                                                        , lt( T2 { Real }, T { Real })
                                                        , stateSatisfiesInvariant(evolve(S1 { State }, T2 { Real }))
                                                        )
                                                 )
                    //, \exists { } \and(jump(S1 { State }) , transition( S1 {State }, S2 { State }) )
                    , \exists { SI { State } }  \and ( reach(S1 { State }, SI { State })
                                                     , reach(SI { State }, S2 { State })
                                                     )
                    )
              )
