// Kore axiomatization of bouncing ball HA

sort State

symbol reach( State , State ) : Bool

axiom functional(reach)

symbol evolve( State , Real ) : State

symbol valZ( State ) : Real
symbol valV( State ) : Real

axiom functional(valZ)
axiom functional(valV)

symbol mode( State ) : Int

axiom functional(mode)
axiom functional(evolve)

symbol discreteTransitionFrom( State ) : State
axiom functional( discreteTransitionFrom )

symbol jumpCondition( State , State ) : Bool
axiom functional( jumpCondition )

axiom smt-lemma( \forall { S1 { State } , S2 { State } }
                    \equals( jumpCondition( S1 { State }, S2 { State })
                           , \and( \equals( mode( S1 { State }), mode( S2 { State } ))
                                 , \equals( valZ( S1 { State }), 0 )
                                 , \equals( valZ( S2 { State }), 0 )
                                 , \equals( valV( S2 { State })
                                          , mult( -1, valV( S1 { State }))
                                          )
                                 )
                           )
                )



axiom smt-lemma( \forall { S1 { State } , S2 { State } }
                    \and( \implies( \equals( S2 { State } , discreteTransitionFrom( S1 { State }))
                                  , jumpCondition( S1 { State } , S2 { State })
                                  )
                        , \implies( jumpCondition( S1 { State } , S2 { State })
                                  , \equals( S2 { State } , discreteTransitionFrom( S1 { State }))
                                  )
                        )
               )

symbol invariantSatisfiedInState( State ) : Bool

axiom functional(invariantSatisfiedInState)


axiom smt-lemma( \forall { S1 { State } }
                     \equals( invariantSatisfiedInState(S1 { State })
                            , gt( S1 { State }, 0.0 )
                            )
               )

symbol acc ( Real ) : Real

axiom functional(acc)

axiom smt-lemma( \forall { R { Real } }
                    \equals( acc( R { Real } ) , minus(0.0, R { Real } )))

axiom smt-lemma( \forall { S1 { State } , S2 { State } , T { Real } }
                    \and( \implies( \and( gt ( T { Real }, 0.0 )
                                        , \equals( S2 { State }
                                                 , evolve( S1 { State }, T { Real })
                                                 )
                                        )
                                  , \and( \equals( mode(S2 { State }) , mode(S1 { State }))
                                        , \equals( valV(S2 { State })
                                                 , plus(valV(S1 { State }), mult(acc(10.0), T { Real }))
                                                 )
                                        , \equals( valZ(S2 { State })
                                                 , plus( valZ( S1 { State })
                                                       , plus( mult(valV( S1 { State }), T { Real })
                                                              , div(mult(acc(10.0), mult(T { Real }, T { Real })), 2.0)
                                                             )
                                                       )
                                                 )
                                        )
                                  )
                         , \implies ( \and( gt( T { Real }, 0.0 )
                                          , \equals( mode(S2 { State }) , mode(S1 { State }))
                                          , \equals( valV(S2 { State })
                                                   , plus(valV(S1 { State }), mult(acc(10.0), T { Real }))
                                                   )
                                          , \equals( valZ(S2 { State })
                                                   , plus( valZ( S1 { State })
                                                         , plus( mult(valV( S1 { State }), T { Real })
                                                                , div(mult(acc(10.0), mult(T { Real }, T { Real })), 2.0)
                                                               )
                                                         )
                                                   )
                                          )
                                    , \equals( S2 { State } , evolve( S1 { State } , T { Real } ) )
                                    )
                         )
                  )


symbol invariantSatisfiedInInterval( State , Real ) : Bool

axiom functional(invariantSatisfiedInInterval)

axiom smt-lemma( \forall { S { State } , T { Real } }
                \and( \implies( \and( invariantSatisfiedInInterval( S { State }, T { Real } )
                                    , gt( T { Real }, 0.0 )
                                    )
                              , \and( invariantSatisfiedInState( S { State } )
                                    , \forall { T2 { Real } }
                                          \implies( \and( gt( T2 { Real }, 0.0 )
                                                        , lt( T2 { Real }, T { Real })
                                                        )
                                                  , invariantSatisfiedInState(evolve( S { State }, T2 { Real }))
                                                  )
                                    )
                              )
                    , \implies( \and ( gt( T { Real } , 0.0 )
                                     , invariantSatisfiedInState( S { State } )
                                     , \forall { T2 { Real } }
                                           \implies( \and( gt( T2 { Real }, 0.0 )
                                                         , lt( T2 { Real }, T { Real })
                                                         )
                                                   , invariantSatisfiedInState(evolve( S { State }, T2 { Real }))
                                                   )
                                     )
                              , invariantSatisfiedInInterval( S { State } , T { Real })
                              )
                    )
                )


axiom \forall { S1 { State },  S2 { State } }
      \iff-lfp( reach( S1 { State } , S2 { State } )
              , \or ( \exists { } \and ( \equals ( valZ(S1 { State }), valZ(S2 { State }) )
                                       , \equals ( valV(S1 { State }), valV(S2 { State }) )
                                       , \equals ( mode(S1 { State }), mode(S2 { State }) )
                                       )
                    , \exists { T { Real } } \and( gt( T { Real }, 0 )
                                                 , \equals( S2 { State }, evolve( S1 { State }, T { Real }))
                                                 , invariantSatisfiedInState( S1 { State } )
                                                 , invariantSatisfiedInInterval( S1 { State }, T { Real })
                                                 , invariantSatisfiedInState( S2 { State } )
                                                 )
                    , \exists { } \and(\equals( S2 { State }, discreteTransitionFrom( S1 {State })))
                    , \exists { SI { State } }  \and ( reach(S1 { State }, SI { State })
                                                     , reach(SI { State }, S2 { State })
                                                     )
                    )
              )
