symbol listSegmentRightLength(ArrayIntInt, Int, Int, SetInt, Int) : Bool
axiom \forall { variable("H") { ArrayIntInt }, variable("X") { Int }, variable("Y") { Int }, variable("F") { SetInt }, variable("LENGTH") { Int } }
      \iff-lfp( listSegmentRightLength(variable("H") { ArrayIntInt }, variable("X") { Int }, variable("Y") { Int }, variable("F") { SetInt }, variable("LENGTH") { Int })
              , \or( \exists { }
                     \and( \equals(variable("X") { Int }, variable("Y") { Int })
                         , \equals(variable("F") { SetInt }, emptyset)
                         , \equals(variable("LENGTH") { Int }, 0)
                         )
                   , \exists { variable("F1") { SetInt } , variable("LENGTH1") { Int } , variable("Y1") { Int } }
                     \and( listSegmentRightLength( variable("H") { ArrayIntInt }
                                                 , variable("X") { Int }
                                                 , variable("Y1") { Int }
                                                 , variable("F1") { SetInt }
                                                 , variable("LENGTH1") { Int }
                                                 )
                         , \equals(variable("LENGTH1") { Int }, minus(variable("LENGTH") { Int }, 1))
                         , gt(variable("Y1") { Int }, 0)
                         , \equals(variable("Y") { Int }, select(variable("H") { ArrayIntInt }, variable("Y1") { Int }))
                         , \equals( variable("F") { SetInt }
                                  , union( variable("F1") { SetInt }
                                         , singleton(variable("Y1") { Int })
                                         )
                                  )
                         , disjoint( variable("F1") { SetInt }
                                   , singleton(variable("Y1") { Int })
                                   )
                         )
                   )
              )




