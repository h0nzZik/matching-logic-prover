(declare-sort Nat)
(declare-sort NatSeq)
(declare-sort Map)
(declare-fun zero () Nat)
(declare-fun succ (Nat) Nat)
(declare-fun one () Nat)
(declare-fun two () Nat)
(declare-fun three () Nat)
(declare-fun four () Nat)
(declare-fun five () Nat)
(declare-fun six () Nat)
(declare-fun seven () Nat)
(declare-fun eight () Nat)
(declare-fun nine () Nat)
(declare-fun ten () Nat)
(declare-fun epsilon () NatSeq)
(declare-fun cncat (Nat NatSeq) NatSeq)
(declare-fun emp () Map)
(declare-fun total_mapsto (Nat Nat) Map)
(declare-fun delta_mapsto (Nat Nat) Bool)
(assert (= one (succ zero)))
(assert (= two (succ one)))
(assert (= three (succ two)))
(assert (= four (succ three)))
(assert (= five (succ four)))
(assert (= six (succ five)))
(assert (= seven (succ six)))
(assert (= eight (succ seven)))
(assert (= nine (succ eight)))
(assert (= ten (succ nine)))
(assert (forall ((x Nat) (y Nat)) (= (= (succ x) (succ y)) (= x y))))
(assert (forall ((x Nat)) (not (= (succ x) x))))
(assert (forall ((x Nat) (s NatSeq)) (not (= (cncat x s) s))))
(assert (forall ((x1 Nat) (x2 Nat) (s1 NatSeq) (s2 NatSeq)) (= (= (cncat x1 s1) (cncat x2 s2)) (and (= x1 x2) (= s1 s2)))))
(assert (forall ((y Nat)) (not (delta_mapsto zero y))))
(assert (forall ((x Nat) (y Nat)) (delta_mapsto (succ x) y)))
(assert (forall ((x1 Nat) (x2 Nat) (y1 Nat) (y2 Nat)) (= (forall (($63 Map)) (= (and (delta_mapsto (succ x1) y1) (= $63 (total_mapsto (succ x1) y1))) (and (delta_mapsto (succ x2) y2) (= $63 (total_mapsto (succ x2) y2))))) (and (= x1 x2) (= y1 y2)))))
(assert (not (forall (($73 Map)) (= (and (delta_mapsto one zero) (= $73 (total_mapsto one zero))) (and (delta_mapsto one one) (= $73 (total_mapsto one one)))))))
(check-sat)

