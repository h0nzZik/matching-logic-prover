fmod IMP is

  protecting INT .

  sorts Var Trm Trm? Top Bottom Predicate Pattern .
  sorts Var{Bol} Trm{Bol} Trm?{Bol} Top{Bol} Bottom{Bol} Predicate{Bol} Pattern{Bol} .
  sorts Var{Nat} Trm{Nat} Trm?{Nat} Top{Nat} Bottom{Nat} Predicate{Nat} Pattern{Nat} .
  sorts Var{Seq} Trm{Seq} Trm?{Seq} Top{Seq} Bottom{Seq} Predicate{Seq} Pattern{Seq} .
  sorts Var{Map} Trm{Map} Trm?{Map} Top{Map} Bottom{Map} Predicate{Map} Pattern{Map} .
  sorts Var{Pgm} Trm{Pgm} Trm?{Pgm} Top{Pgm} Bottom{Pgm} Predicate{Pgm} Pattern{Pgm} .
  sorts Var{Cfg} Trm{Cfg} Trm?{Cfg} Top{Cfg} Bottom{Cfg} Predicate{Cfg} Pattern{Cfg} .
  sorts Var{Ply} Trm{Ply} Trm?{Ply} Top{Ply} Bottom{Ply} Predicate{Ply} Pattern{Ply} .

  subsorts Var < Trm < Trm? < Pattern .
  subsorts Top Bottom < Predicate < Pattern .
  subsorts Bottom < Trm? .
  subsorts Var{Bol} < Trm{Bol} < Trm?{Bol} < Pattern{Bol} .
  subsorts Top{Bol} Bottom{Bol} < Predicate{Bol} < Pattern{Bol} .
  subsorts Bottom{Bol} < Trm?{Bol} .
  subsorts Var{Nat} < Trm{Nat} < Trm?{Nat} < Pattern{Nat} .
  subsorts Top{Nat} Bottom{Nat} < Predicate{Nat} < Pattern{Nat} .
  subsorts Bottom{Nat} < Trm?{Nat} .
  subsorts Var{Seq} < Trm{Seq} < Trm?{Seq} < Pattern{Seq} .
  subsorts Top{Seq} Bottom{Seq} < Predicate{Seq} < Pattern{Seq} .
  subsorts Bottom{Seq} < Trm?{Seq} .
  subsorts Var{Map} < Trm{Map} < Trm?{Map} < Pattern{Map} .
  subsorts Top{Map} Bottom{Map} < Predicate{Map} < Pattern{Map} .
  subsorts Bottom{Map} < Trm?{Map} .
  subsorts Var{Pgm} < Trm{Pgm} < Trm?{Pgm} < Pattern{Pgm} .
  subsorts Top{Pgm} Bottom{Pgm} < Predicate{Pgm} < Pattern{Pgm} .
  subsorts Bottom{Pgm} < Trm?{Pgm} .
  subsorts Var{Cfg} < Trm{Cfg} < Trm?{Cfg} < Pattern{Cfg} .
  subsorts Top{Cfg} Bottom{Cfg} < Predicate{Cfg} < Pattern{Cfg} .
  subsorts Bottom{Cfg} < Trm?{Cfg} .
  subsorts Var{Ply} < Trm{Ply} < Trm?{Ply} < Pattern{Ply} .
  subsorts Top{Ply} Bottom{Ply} < Predicate{Ply} < Pattern{Ply} .
  subsorts Bottom{Ply} < Trm?{Ply} .

  subsorts Var{Ply} < Var{Bol} Var{Nat} Var{Seq} Var{Map} Var{Pgm} Var{Cfg} < Var .
  subsorts Trm{Ply} < Trm{Bol} Trm{Nat} Trm{Seq} Trm{Map} Trm{Pgm} Trm{Cfg} < Trm .
  subsorts Trm?{Ply} < Trm?{Bol} Trm?{Nat} Trm?{Seq} Trm?{Map} Trm?{Pgm} Trm?{Cfg} < Trm? .
  subsorts Top{Ply} < Top{Bol} Top{Nat} Top{Seq} Top{Map} Top{Pgm} Top{Cfg} < Top .
  subsorts Bottom{Ply} < Bottom{Bol} Bottom{Nat} Bottom{Seq} Bottom{Map} Bottom{Pgm} Bottom{Cfg} < Bottom .
  subsorts Pattern{Ply} < Pattern{Bol} Pattern{Nat} Pattern{Seq} Pattern{Map} Pattern{Pgm} Pattern{Cfg} < Pattern .

  ---- top and bottom patterns

  op top{Bol} : -> Top{Bol} . op bottom{Bol} : -> Bottom{Bol} .
  op top{Nat} : -> Top{Nat} . op bottom{Nat} : -> Bottom{Nat} .
  op top{Seq} : -> Top{Seq} . op bottom{Seq} : -> Bottom{Seq} .
  op top{Map} : -> Top{Map} . op bottom{Map} : -> Bottom{Map} .
  op top{Pgm} : -> Top{Pgm} . op bottom{Pgm} : -> Bottom{Pgm} .
  op top{Cfg} : -> Top{Cfg} . op bottom{Cfg} : -> Bottom{Cfg} .
  op top{Ply} : -> Top{Ply} . op bottom{Ply} : -> Bottom{Ply} .

  ---- matching logic variables

  op {_,Bol} : Nat -> Var{Bol} [ctor] .
  op {_,Nat} : Nat -> Var{Nat} [ctor] .
  op {_,Seq} : Nat -> Var{Seq} [ctor] .
  op {_,Map} : Nat -> Var{Map} [ctor] .
  op {_,Pgm} : Nat -> Var{Pgm} [ctor] .
  op {_,Cfg} : Nat -> Var{Cfg} [ctor] .

  ---- matching logic equalities

  op _=_ : Pattern{Bol} Pattern{Bol} -> Predicate{Ply} [comm prec 66] .
  op _=_ : Pattern{Nat} Pattern{Nat} -> Predicate{Ply} [ditto] .
  op _=_ : Pattern{Seq} Pattern{Seq} -> Predicate{Ply} [ditto] .
  op _=_ : Pattern{Map} Pattern{Map} -> Predicate{Ply} [ditto] .
  op _=_ : Pattern{Pgm} Pattern{Pgm} -> Predicate{Ply} [ditto] .
  op _=_ : Pattern{Cfg} Pattern{Cfg} -> Predicate{Ply} [ditto] .

  ---- matching logic and

  op _/\_ : Pattern{Bol} Pattern{Bol} -> Pattern{Bol} [assoc comm prec 62] .
  op _/\_ : Pattern{Nat} Pattern{Nat} -> Pattern{Nat} [ditto] .
  op _/\_ : Pattern{Seq} Pattern{Seq} -> Pattern{Seq} [ditto] .
  op _/\_ : Pattern{Map} Pattern{Map} -> Pattern{Map} [ditto] .
  op _/\_ : Pattern{Pgm} Pattern{Pgm} -> Pattern{Pgm} [ditto] .
  op _/\_ : Pattern{Cfg} Pattern{Cfg} -> Pattern{Cfg} [ditto] .
  op _/\_ : Pattern{Ply} Pattern{Ply} -> Pattern{Ply} [ditto] .

  op _/\_ : Predicate{Bol} Predicate{Bol} -> Predicate{Bol} [ditto] .
  op _/\_ : Predicate{Nat} Predicate{Nat} -> Predicate{Nat} [ditto] .
  op _/\_ : Predicate{Seq} Predicate{Seq} -> Predicate{Seq} [ditto] .
  op _/\_ : Predicate{Map} Predicate{Map} -> Predicate{Map} [ditto] .
  op _/\_ : Predicate{Pgm} Predicate{Pgm} -> Predicate{Pgm} [ditto] .
  op _/\_ : Predicate{Cfg} Predicate{Cfg} -> Predicate{Cfg} [ditto] .
  op _/\_ : Predicate{Ply} Predicate{Ply} -> Predicate{Ply} [ditto] .

  op _/\_ : Top{Bol} Top{Bol} -> Top{Bol} [ditto] .
  op _/\_ : Top{Nat} Top{Nat} -> Top{Nat} [ditto] .
  op _/\_ : Top{Seq} Top{Seq} -> Top{Seq} [ditto] .
  op _/\_ : Top{Map} Top{Map} -> Top{Map} [ditto] .
  op _/\_ : Top{Pgm} Top{Pgm} -> Top{Pgm} [ditto] .
  op _/\_ : Top{Cfg} Top{Cfg} -> Top{Cfg} [ditto] .
  op _/\_ : Top{Ply} Top{Ply} -> Top{Ply} [ditto] .

  op _/\_ : Pattern{Bol} Bottom{Bol} -> Bottom{Bol} [ditto] .
  op _/\_ : Pattern{Nat} Bottom{Nat} -> Bottom{Nat} [ditto] .
  op _/\_ : Pattern{Seq} Bottom{Seq} -> Bottom{Seq} [ditto] .
  op _/\_ : Pattern{Map} Bottom{Map} -> Bottom{Map} [ditto] .
  op _/\_ : Pattern{Pgm} Bottom{Pgm} -> Bottom{Pgm} [ditto] .
  op _/\_ : Pattern{Cfg} Bottom{Cfg} -> Bottom{Cfg} [ditto] .
  op _/\_ : Pattern{Ply} Bottom{Ply} -> Bottom{Ply} [ditto] .


  ---- matching logic or

  ---- matching logic not

  op ~_ : Pattern{Bol} -> Pattern{Bol} [prec 61] .
  op ~_ : Pattern{Nat} -> Pattern{Nat} [ditto] .
  op ~_ : Pattern{Seq} -> Pattern{Seq} [ditto] .
  op ~_ : Pattern{Map} -> Pattern{Map} [ditto] .
  op ~_ : Pattern{Pgm} -> Pattern{Pgm} [ditto] .
  op ~_ : Pattern{Cfg} -> Pattern{Cfg} [ditto] .
  op ~_ : Pattern{Ply} -> Pattern{Ply} [ditto] .

  op ~_ : Predicate{Bol} -> Predicate{Bol} [prec 61] .
  op ~_ : Predicate{Nat} -> Predicate{Nat} [ditto] .
  op ~_ : Predicate{Seq} -> Predicate{Seq} [ditto] .
  op ~_ : Predicate{Map} -> Predicate{Map} [ditto] .
  op ~_ : Predicate{Pgm} -> Predicate{Pgm} [ditto] .
  op ~_ : Predicate{Cfg} -> Predicate{Cfg} [ditto] .
  op ~_ : Predicate{Ply} -> Predicate{Ply} [ditto] .

  op ~_ : Top{Bol} -> Bottom{Bol} [prec 61] .
  op ~_ : Top{Nat} -> Bottom{Nat} [ditto] .
  op ~_ : Top{Seq} -> Bottom{Seq} [ditto] .
  op ~_ : Top{Map} -> Bottom{Map} [ditto] .
  op ~_ : Top{Pgm} -> Bottom{Pgm} [ditto] .
  op ~_ : Top{Cfg} -> Bottom{Cfg} [ditto] .
  op ~_ : Top{Ply} -> Bottom{Ply} [ditto] .

  op ~_ : Bottom{Bol} -> Top{Bol} [prec 61] .
  op ~_ : Bottom{Nat} -> Top{Nat} [ditto] .
  op ~_ : Bottom{Seq} -> Top{Seq} [ditto] .
  op ~_ : Bottom{Map} -> Top{Map} [ditto] .
  op ~_ : Bottom{Pgm} -> Top{Pgm} [ditto] .
  op ~_ : Bottom{Cfg} -> Top{Cfg} [ditto] .
  op ~_ : Bottom{Ply} -> Top{Ply} [ditto] .
  

  ---- matching logic implies

  op _->_ : Pattern{Bol} Pattern{Bol} -> Pattern{Bol} [gather(e E) prec 64] .
  op _->_ : Pattern{Nat} Pattern{Nat} -> Pattern{Nat} [ditto] .
  op _->_ : Pattern{Seq} Pattern{Seq} -> Pattern{Seq} [ditto] .
  op _->_ : Pattern{Map} Pattern{Map} -> Pattern{Map} [ditto] .
  op _->_ : Pattern{Pgm} Pattern{Pgm} -> Pattern{Pgm} [ditto] .
  op _->_ : Pattern{Cfg} Pattern{Cfg} -> Pattern{Cfg} [ditto] .
  op _->_ : Pattern{Ply} Pattern{Ply} -> Pattern{Ply} [ditto] .

  op _->_ : Predicate{Bol} Predicate{Bol} -> Predicate{Bol} [ditto] .
  op _->_ : Predicate{Nat} Predicate{Nat} -> Predicate{Nat} [ditto] .
  op _->_ : Predicate{Seq} Predicate{Seq} -> Predicate{Seq} [ditto] .
  op _->_ : Predicate{Map} Predicate{Map} -> Predicate{Map} [ditto] .
  op _->_ : Predicate{Pgm} Predicate{Pgm} -> Predicate{Pgm} [ditto] .
  op _->_ : Predicate{Cfg} Predicate{Cfg} -> Predicate{Cfg} [ditto] .
  op _->_ : Predicate{Ply} Predicate{Ply} -> Predicate{Ply} [ditto] .

  op _->_ : Bottom{Bol} Predicate{Bol} -> Top{Bol} [ditto] .
  op _->_ : Bottom{Nat} Predicate{Nat} -> Top{Nat} [ditto] .
  op _->_ : Bottom{Seq} Predicate{Seq} -> Top{Seq} [ditto] .
  op _->_ : Bottom{Map} Predicate{Map} -> Top{Map} [ditto] .
  op _->_ : Bottom{Pgm} Predicate{Pgm} -> Top{Pgm} [ditto] .
  op _->_ : Bottom{Cfg} Predicate{Cfg} -> Top{Cfg} [ditto] .
  op _->_ : Bottom{Ply} Predicate{Ply} -> Top{Ply} [ditto] .

  op _->_ : Top{Bol} Top{Bol} -> Top{Bol} [ditto] .
  op _->_ : Top{Nat} Top{Nat} -> Top{Nat} [ditto] .
  op _->_ : Top{Seq} Top{Seq} -> Top{Seq} [ditto] .
  op _->_ : Top{Map} Top{Map} -> Top{Map} [ditto] .
  op _->_ : Top{Pgm} Top{Pgm} -> Top{Pgm} [ditto] .
  op _->_ : Top{Cfg} Top{Cfg} -> Top{Cfg} [ditto] .
  op _->_ : Top{Ply} Top{Ply} -> Top{Ply} [ditto] .

  op _->_ : Top{Bol} Bottom{Bol} -> Bottom{Bol} [ditto] .
  op _->_ : Top{Nat} Bottom{Nat} -> Bottom{Nat} [ditto] .
  op _->_ : Top{Seq} Bottom{Seq} -> Bottom{Seq} [ditto] .
  op _->_ : Top{Map} Bottom{Map} -> Bottom{Map} [ditto] .
  op _->_ : Top{Pgm} Bottom{Pgm} -> Bottom{Pgm} [ditto] .
  op _->_ : Top{Cfg} Bottom{Cfg} -> Bottom{Cfg} [ditto] .
  op _->_ : Top{Ply} Bottom{Ply} -> Bottom{Ply} [ditto] .

  ---- matching logic contained (subset) 

  ---- matching logic bindings: universal/existential/contextual quantification

  ---- matching logic forall 

  op forall_ : Pattern{Bol} -> Pattern{Bol} [prec 61] .
  op forall_ : Pattern{Nat} -> Pattern{Nat} [ditto] .
  op forall_ : Pattern{Seq} -> Pattern{Seq} [ditto] .
  op forall_ : Pattern{Map} -> Pattern{Map} [ditto] .
  op forall_ : Pattern{Pgm} -> Pattern{Pgm} [ditto] .
  op forall_ : Pattern{Cfg} -> Pattern{Cfg} [ditto] .
  op forall_ : Pattern{Ply} -> Pattern{Ply} [ditto] .

  ---- matching logic exists 

  op exists_ : Pattern{Bol} -> Pattern{Bol} [prec 61] .
  op exists_ : Pattern{Nat} -> Pattern{Nat} [ditto] .
  op exists_ : Pattern{Seq} -> Pattern{Seq} [ditto] .
  op exists_ : Pattern{Map} -> Pattern{Map} [ditto] .
  op exists_ : Pattern{Pgm} -> Pattern{Pgm} [ditto] .
  op exists_ : Pattern{Cfg} -> Pattern{Cfg} [ditto] .
  op exists_ : Pattern{Ply} -> Pattern{Ply} [ditto] .

  ---- matching logic context

  op context_ : Pattern{Bol} -> Pattern{Bol} [prec 61] .
  op context_ : Pattern{Nat} -> Pattern{Nat} [ditto] .
  op context_ : Pattern{Seq} -> Pattern{Seq} [ditto] .
  op context_ : Pattern{Map} -> Pattern{Map} [ditto] .
  op context_ : Pattern{Pgm} -> Pattern{Pgm} [ditto] .
  op context_ : Pattern{Cfg} -> Pattern{Cfg} [ditto] .
  op context_ : Pattern{Ply} -> Pattern{Ply} [ditto] .

  ---- binding instantiation (context application) 

  ---- TODO:: add sorting information here.

  op _[_] : Pattern Pattern -> Pattern .

  ---- symbols of IMP theory  

  ---- (declare-func zero () Nat)
  op zero : -> Trm{Nat} .
 

  ---- (declare-func succ (Nat) Nat)
  op succ : Trm{Nat} -> Trm{Nat} .
  op succ : Trm?{Nat} -> Trm?{Nat} .
  op succ : Pattern{Nat} -> Pattern{Nat} .

  ---- (declare-func ... () Nat)
  op one : -> Trm{Nat} .
  op two : -> Trm{Nat} .
  op three : -> Trm{Nat} .
  op four : -> Trm{Nat} .
  op five : -> Trm{Nat} .
  op six : -> Trm{Nat} .
  op seven : -> Trm{Nat} .
  op eight : -> Trm{Nat} .
  op nine : -> Trm{Nat} .
  op ten : -> Trm{Nat} .
  eq one = succ(zero) .
  eq two = succ(one) .
  eq three = succ(two) .
  eq four = succ(three) .
  eq five = succ(four) .
  eq six = succ(five) .
  eq seven = succ(six) . 
  eq eight = succ(seven) .
  eq nine = succ(eight) . 
  eq ten = succ(nine) .

  ---- (declare-part pred (Nat) Nat)
  op pred : Trm?{Nat} -> Trm?{Nat} . 
  op pred : Pattern{Nat} -> Pattern{Nat} .

  ---- (declare-func plus (Nat Nat) Nat)
  op plus : Trm{Nat} Trm{Nat} -> Trm{Nat} [assoc comm] .
  op plus : Trm?{Nat} Trm?{Nat} -> Trm?{Nat} [assoc comm] .
  op plus : Pattern{Nat} Pattern{Nat} -> Pattern{Nat} [assoc comm] .

  ---- (declare-func ge (Nat Nat) Bool)
  op gt : Trm{Nat} Trm{Nat} -> Trm{Bol} .
  op gt : Trm?{Nat} Trm?{Nat} -> Trm?{Bol} .
  op gt : Pattern{Nat} Pattern{Nat} -> Pattern{Bol} .

  ---- (declare-func tt () Bol)
  op tt : -> Trm{Bol} .

  ---- (declare-func ff () Bol)
  op ff : -> Trm{Bol} .

  ---- (declare-func epsilon () Seq)
  op epsilon : -> Trm{Seq} .

  ---- (declare-func concat (Seq Seq) Seq)
  op concat : Trm{Seq} Trm{Seq} -> Trm{Seq} [assoc] .
  op concat : Trm?{Seq} Trm?{Seq} -> Trm?{Seq} [assoc] .
  op concat : Pattern{Seq} Pattern{Seq} -> Pattern{Seq} [assoc] .

  --- (declare-func seq<-nat (Nat) Seq)
  op seq<-nat : Trm{Nat} -> Trm{Seq} .
  op seq<-nat : Pattern{Nat} -> Pattern{Seq} .

  ---- (declare-func emp () Map)
  op emp : -> Trm{Map} .

  ---- (declare-part mapsto (Nat Nat) Map)
  op mapsto : Trm?{Nat} Trm?{Nat} -> Trm?{Map} .
  op mapsto : Pattern{Nat} Pattern{Nat} -> Pattern{Map} .

  ---- (declare-part merge (Map Map) Map)
  op merge : Trm?{Map} Trm?{Map} -> Trm?{Map} [assoc comm] .
  op merge : Pattern{Map} Pattern{Map} -> Pattern{Map} [assoc comm] .

  ---- (declare-part mapstoseq (Nat Seq) Map)
  op mapstoseq : Trm?{Nat} Trm?{Seq} -> Trm?{Map} .
  op mapstoseq : Pattern{Nat} Pattern{Seq} -> Pattern{Map} .

  ---- (declare-symb list (Nat Seq) Map) 
  op list : Pattern{Nat} Pattern{Seq} -> Pattern{Map} .

  ---- (declare-func skip () Pgm)
  op skip : -> Trm{Pgm} .
  
  ---- (declare-func asgn (Nat Nat) Pgm)
  op asgn : Trm{Nat} Trm{Nat} -> Trm{Pgm} .
  op asgn : Pattern{Nat} Pattern{Nat} -> Pattern{Pgm} .

  ---- (declare-func ite (Bol, Pgm, Pgm) Pgm)
  op ite : Trm{Bol} Trm{Pgm} Trm{Pgm} -> Trm{Pgm} [frozen(2 3)] . 
  op ite : Pattern{Bol} Pattern{Pgm} Pattern{Pgm} -> Pattern{Pgm} [ditto] . 

  ---- (declare-func while (Bol Pgm) Pgm)
  op while : Trm{Bol} Trm{Pgm} -> Trm{Pgm} [frozen(1 2)] .
  op while : Pattern{Bol} Pattern{Pgm} -> Pattern{Pgm} [ditto] .

  ---- (declare-func dereference (Nat) Nat)
  op dereference : Trm{Nat} -> Trm{Nat} . 
  op dereference : Pattern{Nat} -> Pattern{Nat} . 

  ---- (declare-func seqn (Pgm Pgm) Pgm)
  op seq : Trm{Pgm} Trm{Pgm} -> Trm{Pgm} [assoc frozen(2)] .
  op seq : Pattern{Pgm} Pattern{Pgm} -> Pattern{Pgm} [ditto] .

  ---- (declare-func cfg (Pgm Map) Cfg)
  op cfg : Trm{Pgm} Trm{Map} -> Trm{Cfg} .
  op cfg : Pattern{Pgm} Pattern{Map} -> Pattern{Cfg} .

















  ---- Helper functions

  vars K J C : Nat . var D : Int .
  vars P Q Q1 Q2 R : Pattern .

  ---- shift function for De Brujin indices.
  ---- shift(P, delta-place, cut-off)

  op shift : Pattern Int Nat -> Pattern .

  ---(

  ---- more detailed sorting information.
  ---- I don't think we need this.

  op shift : Pattern{Bol} Nat Nat -> Pattern{Bol} .
  op shift : Pattern{Nat} Nat Nat -> Pattern{Nat} .
  op shift : Pattern{Seq} Nat Nat -> Pattern{Seq} .
  op shift : Pattern{Map} Nat Nat -> Pattern{Map} .
  op shift : Pattern{Pgm} Nat Nat -> Pattern{Pgm} .
  op shift : Pattern{Cfg} Nat Nat -> Pattern{Cfg} .
  op shift : Pattern{Ply} Nat Nat -> Pattern{Ply} .

  op shift : Predicate{Bol} Nat Nat -> Predicate{Bol} .
  op shift : Predicate{Nat} Nat Nat -> Predicate{Nat} .
  op shift : Predicate{Seq} Nat Nat -> Predicate{Seq} .
  op shift : Predicate{Map} Nat Nat -> Predicate{Map} .
  op shift : Predicate{Pgm} Nat Nat -> Predicate{Pgm} .
  op shift : Predicate{Cfg} Nat Nat -> Predicate{Cfg} .
  op shift : Predicate{Ply} Nat Nat -> Predicate{Ply} .

  op shift : Trm{Bol} Nat Nat -> Trm{Bol} .
  op shift : Trm{Nat} Nat Nat -> Trm{Nat} .
  op shift : Trm{Seq} Nat Nat -> Trm{Seq} .
  op shift : Trm{Map} Nat Nat -> Trm{Map} .
  op shift : Trm{Pgm} Nat Nat -> Trm{Pgm} .
  op shift : Trm{Cfg} Nat Nat -> Trm{Cfg} .
  op shift : Trm{Ply} Nat Nat -> Trm{Ply} .
  
  op shift : Trm?{Bol} Nat Nat -> Trm?{Bol} .
  op shift : Trm?{Nat} Nat Nat -> Trm?{Nat} .
  op shift : Trm?{Seq} Nat Nat -> Trm?{Seq} .
  op shift : Trm?{Map} Nat Nat -> Trm?{Map} .
  op shift : Trm?{Pgm} Nat Nat -> Trm?{Pgm} .
  op shift : Trm?{Cfg} Nat Nat -> Trm?{Cfg} .
  op shift : Trm?{Ply} Nat Nat -> Trm?{Ply} .

  op shift : Top{Bol} Nat Nat -> Top{Bol} .
  op shift : Top{Nat} Nat Nat -> Top{Nat} .
  op shift : Top{Seq} Nat Nat -> Top{Seq} .
  op shift : Top{Map} Nat Nat -> Top{Map} .
  op shift : Top{Pgm} Nat Nat -> Top{Pgm} .
  op shift : Top{Cfg} Nat Nat -> Top{Cfg} .
  op shift : Top{Ply} Nat Nat -> Top{Ply} .

  op shift : Bottom{Bol} Nat Nat -> Bottom{Bol} .
  op shift : Bottom{Nat} Nat Nat -> Bottom{Nat} .
  op shift : Bottom{Seq} Nat Nat -> Bottom{Seq} .
  op shift : Bottom{Map} Nat Nat -> Bottom{Map} .
  op shift : Bottom{Pgm} Nat Nat -> Bottom{Pgm} .
  op shift : Bottom{Cfg} Nat Nat -> Bottom{Cfg} .
  op shift : Bottom{Ply} Nat Nat -> Bottom{Ply} .

  ---)

  eq shift({K,Bol}, D, C) = if K < C then {K,Bol} else {K + D,Bol} fi . 
  eq shift({K,Nat}, D, C) = if K < C then {K,Nat} else {K + D,Nat} fi . 
  eq shift({K,Seq}, D, C) = if K < C then {K,Seq} else {K + D,Seq} fi . 
  eq shift({K,Map}, D, C) = if K < C then {K,Map} else {K + D,Map} fi . 
  eq shift({K,Pgm}, D, C) = if K < C then {K,Pgm} else {K + D,Pgm} fi . 
  eq shift({K,Cfg}, D, C) = if K < C then {K,Cfg} else {K + D,Cfg} fi . 

  eq shift(P = Q, D, C) = (shift(P, D, C) = shift(Q, D, C)) .
  eq shift(P /\ Q, D, C) = shift(P, D, C) /\ shift(Q, D, C) .
  eq shift(P -> Q, D, C) = shift(P, D, C) -> shift(Q, D, C) .

  eq shift(exists P, D, C) = exists shift(P, D, C + 1) .
  eq shift(forall P, D, C) = forall shift(P, D, C + 1) .
  eq shift(context P, D, C) = context shift(P, D, C + 1) .

  eq shift(zero, D, C) = zero .
  eq shift(succ(P), D, C) = succ(shift(P, D, C)) .
  eq shift(pred(P), D, C) = pred(shift(P, D, C)) .
  eq shift(plus(P, Q), D, C) = plus(shift(P, D, C), shift(Q, D, C)) .
  eq shift(gt(P, Q), D, C) = gt(shift(P, D, C), shift(Q, D, C)) .
  eq shift(concat(P, Q), D, C) = concat(shift(P, D, C), shift(Q, D, C)) .
  eq shift(epsilon, D, C) = epsilon .
  eq shift(emp, D, C) = emp .
  eq shift(seq<-nat(P), D, C) = seq<-nat(shift(P, D, C)) .
  eq shift(mapsto(P, Q), D, C) = mapsto(shift(P, D, C), shift(Q, D, C)) .
  eq shift(mapstoseq(P, Q), D, C) = mapstoseq(shift(P, D, C), shift(Q, D, C)) .
  eq shift(merge(P, Q), D, C) = merge(shift(P, D, C), shift(Q, D, C)) .
  eq shift(list(P, Q), D, C) = list(shift(P, D, C), shift(Q, D, C)) .
  eq shift(skip, D, C) = skip .
  eq shift(asgn(P, Q), D, C) = asgn(shift(P, D, C), shift(Q, D, C)) .
  eq shift(ite(P, Q, R), C, D) = ite(shift(P, D, C), shift(Q, D, C), shift(R, D, C)) .
  eq shift(while(P, Q), D, C) = while(shift(P, D, C), shift(Q, D, C)) .
  eq shift(dereference(P), D, C) = dereference(shift(P, D, C)) .
  eq shift(seq(P, Q), D, C) = seq(shift(P, D, C), shift(Q, D, C)) .
  eq shift(cfg(P, Q), D, C) = cfg(shift(P, D, C), shift(Q, D, C)) .

  ---- helper functions for contructing binding structures.
  ---- This is very tricky.
  ---- This relates to #forall and shift functions.

  ---- place holders

  op {#,Bol} : -> Var{Bol} .
  op {#,Nat} : -> Var{Nat} .
  op {#,Seq} : -> Var{Seq} .
  op {#,Map} : -> Var{Map} .
  op {#,Pgm} : -> Var{Pgm} .
  op {#,Cfg} : -> Var{Cfg} .

  eq {-1,Bol} = {#,Bol} .
  eq {-1,Nat} = {#,Nat} .
  eq {-1,Seq} = {#,Seq} .
  eq {-1,Map} = {#,Map} .
  eq {-1,Pgm} = {#,Pgm} .
  eq {-1,Cfg} = {#,Cfg} .

  eq shift({#,Bol}, D, C) = {0,Bol} .
  eq shift({#,Nat}, D, C) = {0,Nat} .
  eq shift({#,Seq}, D, C) = {0,Seq} .
  eq shift({#,Map}, D, C) = {0,Map} .
  eq shift({#,Pgm}, D, C) = {0,Pgm} .
  eq shift({#,Cfg}, D, C) = {0,Cfg} .

  ---- #exists

  op #exists_ : Pattern -> Pattern [strat(1 0)] .
  eq #exists P = exists shift(P, 1, 0) .

  ---- #forall

  op #forall_ : Pattern -> Pattern [strat(1 0)] .
  eq #forall P = forall shift(P, 1, 0) . 

  ---- #context

  op #context_ : Pattern -> Pattern [strat(1 0)] .
  eq #context P = context shift(P, 1, 0) . 

  ---- substitution
  ---- P[K := Q]

  op _[_:=_] : Pattern Nat Pattern -> Pattern . 

  eq {K,Bol}[J := R] = if K == J then R else {K,Bol} fi .
  eq {K,Nat}[J := R] = if K == J then R else {K,Nat} fi .
  eq {K,Seq}[J := R] = if K == J then R else {K,Seq} fi .
  eq {K,Map}[J := R] = if K == J then R else {K,Map} fi .
  eq {K,Pgm}[J := R] = if K == J then R else {K,Pgm} fi .
  eq {K,Cfg}[J := R] = if K == J then R else {K,Cfg} fi .

  eq (P = Q) [J := R] = ((P[J := R]) = (Q[J := R])) .
  eq (P -> Q) [J := R] = ((P[J := R]) -> (Q[J := R])) .
  eq (P /\ Q) [J := R] = ((P[J := R]) /\ (Q[J := R])) .

  eq (forall P) [J := R] = forall (P [J + 1 := shift(R, 1, 0)]) .
  eq (exists P) [J := R] = exists (P [J + 1 := shift(R, 1, 0)]) .
  eq (context P) [J := R] = context (P [J + 1 := shift(R, 1, 0)]) .

  eq zero [J := R] = zero .
  eq (succ(P)) [J := R] = succ(P [J := R]) .
  eq (plus(P, Q)) [J := R] = plus(P [J := R], Q [J := R]) .
  eq (pred(P)) [J := R] = pred(P [J := R]) .
  eq (gt(P, Q)) [J := R] = gt(P [J := R], Q [J := R]) .
  eq (seq<-nat(P)) [J := R] = seq<-nat(P [J := R]) .
  eq (concat(P, Q)) [J := R] = concat(P [J := R], Q [J := R]) .
  eq (mapsto(P, Q)) [J := R] = mapsto(P [J := R], Q [J := R]) .
  eq (mapstoseq(P, Q)) [J := R] = mapstoseq(P [J := R], Q [J := R]) .
  eq (merge(P, Q)) [J := R] = merge(P [J := R], Q [J := R]) .
  eq (list(P, Q)) [J := R] = list(P [J := R], Q [J := R]) .
  eq skip [J := R] = skip .
  eq (asgn(P, Q)) [J := R] = asgn(P [J := R], Q [J := R]) .
  eq (ite(P, Q1, Q2)) [J := R] = ite(P [J := R], Q1 [J := R], Q2 [J := R]) .
  eq (while(P, Q)) [J := R] = while(P [J := R], Q [J := R]) .
  eq (dereference(P)) [J := R] = dereference(P [J := R]) .
  eq (seq(P, Q)) [J := R] = seq(P [J := R], Q [J := R]) .
  eq (cfg(P, Q)) [J := R] = cfg(P [J := R], Q [J := R]) .

  ---- instantaneous instantiation

  op _{_} : Pattern Pattern -> Pattern .

  eq (forall P) {R} = shift(P[0 := shift(R, 1, 0)], -1, 0) .
  eq (exists P) {R} = shift(P[0 := shift(R, 1, 0)], -1, 0) .
  eq (context P) {R} = shift(P[0 := shift(R, 1, 0)], -1, 0) .


endfm


---(

---- A test case for #context.

reduce 

#context ({#,Nat} -> {0,Nat} -> (#context({#,Nat} -> {0,Nat})))

---- should return
---- context({0,Nat} -> {1,Nat} -> (context({0,Nat} -> {2,Nat})))
.

---)














fmod CTXT is

  ---- In this module, we are going to calculate (given a pattern P)
  ---- all C[R1]...[Rn] such that P = C[R1]...[Rn]. 
  ---- Such a C[R1]...[Rn] is called a prenex normal form. 

  protecting IMP .
  protecting META-LEVEL .

  sort PatternSet . subsort Pattern < PatternSet .

  op __ : PatternSet PatternSet -> PatternSet [assoc comm format(d n d) prec 81] .


  op pnf : Pattern -> PatternSet .

  vars P P1 P2 P3 Q C R : Pattern .

  ---- aux function

  op pnf' : Pattern NatList -> PatternSet .
  op pnfm : Term NatList -> Term . ---- goes to the meta-level
  op error-pnf : -> [Pattern] .

  ---- pnf' calls pnfm

  eq pnf'(P, NL:NeNatList) 
   
   = downTerm(pnfm(upTerm(P), NL:NeNatList), error-pnf) .

  ---- pnfm does the real work in meta-level


  ---- definitions of pnfs for symbols

  eq pnf(zero) 
   
   = (context {0,Nat}) [zero] .



  eq pnf(succ(P))

   = ((context {0,Nat}) [succ(P)] 
      pnf'(succ(P), 1)) .

  eq pnf(plus(P1, P2))

   = ((context {0,Nat}) [plus(P1, P2)]
      pnf'(plus(P1, P2), 1)
      pnf'(plus(P1, P2), 2)
      pnf'(plus(P1, P2), (1 2))
      pnf'(plus(P1, P2), (2 1))) . 


  

  

endfm

---(

---- The following module works, but not general enough.

---- It calculates the equivalent context application of a pattern, where
---- each application has only one redex.

---- P = C1[R1] = C2[R2] = ...


fmod CTXT is

  protecting IMP .

  protecting META-LEVEL .

  sort CR . ---- context-redex pairs

  op <_,_> : Pattern Pattern -> CR [format(d b so sg o d)] .
  op __ : CR CR -> CR [assoc comm] .

  op eq-class : Pattern -> CR .

  vars P Q C : Pattern . var Qid : Qid . vars T T' T'' : Term . vars TL TL' : TermList .
  vars CR CRs : CR . var N : Nat .

  ---- aux function def begin

  op error-aux : -> [Pattern] .

  op aux : Pattern CR Nat -> CR .
  op aux' : Term CR Nat -> CR .

  eq aux(P, CR, N) = aux'(upTerm(P), CR, N) .

  eq aux'(T, (CR CRs), N)
   = aux'(T, CR, N) aux'(T, CRs, N) .

  ---- Case N = 1

  eq aux'(Qid[T, TL], < C , R:Pattern{Bol} >, 1)
   = < downTerm('#context_[Qid['_`{_`}[upTerm(C), '`{#`,Bol`}.Var`{Bol`}], TL]], 
                error-aux),
       R:Pattern{Bol} > .

  eq aux'(Qid[T, TL], < C , R:Pattern{Nat} >, 1)
   = < downTerm('#context_[Qid['_`{_`}[upTerm(C), '`{#`,Nat`}.Var`{Nat`}], TL]], 
                error-aux),
       R:Pattern{Nat} > .

  eq aux'(Qid[T, TL], < C , R:Pattern{Seq} >, 1)
   = < downTerm('#context_[Qid['_`{_`}[upTerm(C), '`{#`,Seq`}.Var`{Seq`}], TL]], 
                error-aux),
       R:Pattern{Seq} > .

  eq aux'(Qid[T, TL], < C , R:Pattern{Map} >, 1)
   = < downTerm('#context_[Qid['_`{_`}[upTerm(C), '`{#`,Map`}.Var`{Map`}], TL]], 
                error-aux),
       R:Pattern{Map} > .

  eq aux'(Qid[T, TL], < C , R:Pattern{Pgm} >, 1)
   = < downTerm('#context_[Qid['_`{_`}[upTerm(C), '`{#`,Pgm`}.Var`{Pgm`}], TL]], 
                error-aux),
       R:Pattern{Pgm} > .

  eq aux'(Qid[T, TL], < C , R:Pattern{Cfg} >, 1)
   = < downTerm('#context_[Qid['_`{_`}[upTerm(C), '`{#`,Cfg`}.Var`{Cfg`}], TL]], 
                error-aux),
       R:Pattern{Cfg} > .

  ---- Case N = 2

  eq aux'(Qid[T', T, TL], < C , R:Pattern{Bol} >, 2)
   = < downTerm('#context_[Qid[T', '_`{_`}[upTerm(C), '`{#`,Bol`}.Var`{Bol`}], TL]], 
                error-aux),
       R:Pattern{Bol} > .

  eq aux'(Qid[T', T, TL], < C , R:Pattern{Nat} >, 2)
   = < downTerm('#context_[Qid[T', '_`{_`}[upTerm(C), '`{#`,Nat`}.Var`{Nat`}], TL]], 
                error-aux),
       R:Pattern{Nat} > .

  eq aux'(Qid[T', T, TL], < C , R:Pattern{Seq} >, 2)
   = < downTerm('#context_[Qid[T', '_`{_`}[upTerm(C), '`{#`,Seq`}.Var`{Seq`}], TL]], 
                error-aux),
       R:Pattern{Seq} > .

  eq aux'(Qid[T', T, TL], < C , R:Pattern{Map} >, 2)
   = < downTerm('#context_[Qid[T', '_`{_`}[upTerm(C), '`{#`,Map`}.Var`{Map`}], TL]], 
                error-aux),
       R:Pattern{Map} > .

  eq aux'(Qid[T', T, TL], < C , R:Pattern{Pgm} >, 2)
   = < downTerm('#context_[Qid[T', '_`{_`}[upTerm(C), '`{#`,Pgm`}.Var`{Pgm`}], TL]], 
                error-aux),
       R:Pattern{Pgm} > .

  eq aux'(Qid[T', T, TL], < C , R:Pattern{Cfg} >, 2)
   = < downTerm('#context_[Qid[T', '_`{_`}[upTerm(C), '`{#`,Cfg`}.Var`{Cfg`}], TL]], 
                error-aux),
       R:Pattern{Cfg} > .


  ---- aux function def end


  ---- eq-class definitions for symbols.

  eq eq-class(zero) = < #context {#,Nat} , zero > .

  eq eq-class(succ(P))
   = < #context {#,Nat} , succ(P) >
     aux(succ(P), eq-class(P), 1) . 

  eq eq-class(plus(P, Q))
   = < #context {#,Nat} , plus(P, Q) >
     aux(plus(P, Q), eq-class(P), 1)
     aux(plus(P, Q), eq-class(Q), 2) .

  eq eq-class(pred(P))
   = < #context {#,Nat} , pred(P) >
     aux(pred(P), eq-class(P), 1) . 

  eq eq-class(dereference(P))
   = < #context {#,Nat} , dereference(P) >
     aux(dereference(P), eq-class(P), 1) . 

  eq eq-class(gt(P, Q))
   = < #context {#,Nat} , gt(P, Q) >
     aux(gt(P, Q), eq-class(P), 1)
     aux(gt(P, Q), eq-class(Q), 2) .

  eq eq-class(merge(P, Q))
   = < #context {#,Nat} , merge(P, Q) >
     aux(merge(P, Q), eq-class(P), 1)
     aux(merge(P, Q), eq-class(Q), 2) .

  eq eq-class(mapsto(P, Q))
   = < #context {#,Nat} , mapsto(P, Q) >
     aux(mapsto(P, Q), eq-class(P), 1)
     aux(mapsto(P, Q), eq-class(Q), 2) .

  eq eq-class(cfg(P, Q))
   = < #context {#,Cfg} , cfg(P, Q) >
     aux(cfg(P, Q), eq-class(P), 1)
     aux(cfg(P, Q), eq-class(Q), 2) .

  eq eq-class(while(P, Q))
   = < #context {#,Pgm} , while(P, Q) > .

  eq eq-class(seq(P, Q))
   = < #context {#,Pgm} , seq(P, Q) >
     aux(seq(P, Q), eq-class(P), 1) .

  eq eq-class(asgn(P, Q))
   = < #context {#,Pgm} , asgn(P, Q) >
     aux(asgn(P, Q), eq-class(P), 1)
     aux(asgn(P, Q), eq-class(Q), 2) .

  eq eq-class(skip) 
   = < #context {#,Pgm} , skip > .







  

endfm

reduce

eq-class(

cfg(while(gt(dereference(one), zero), 
          seq(asgn(two, plus(dereference(two), dereference(one))),
              asgn(one, pred(dereference(one))))),
    merge(mapsto(one, ten),
          mapsto(two, zero)))

) 

.

---)



---(

fmod EXE is

  protecting IMP .

  protecting META-LEVEL .

  sort Action .

  op _====================_ : Pattern Action -> Pattern [format (d n n d) prec 95] .

  op idle : -> Action .
  op apply[_]_ : Nat Qid -> Action [format(d s d d s s) prec 91] .
  op apply_ : Qid -> Action [prec 91] .
  op __ : Action Action -> Action [assoc id: idle format(d n d) prec 93] .

  op error[_]_ : Nat Qid -> Action [format(d s d d s s) prec 91] .

  eq apply Q:Qid = apply [0] Q:Qid .


  var N : Nat . var Q : Qid . var Act : Action .

  op CTXT : -> Module . eq CTXT = upModule('CTXT, false) .

  eq P:Pattern
     ====================
     apply [N] Q
     Act

   = downTerm(getTerm(metaXapply(CTXT,
                                 upTerm(P:Pattern),
                                 Q,
                                 none,
                                 0, unbounded,
                                 N)),
              (P:Pattern
               ====================
               error [N] Q
               Act)) .

endfm

reduce


cfg(while(gt(dereference(one), zero), 
          seq(asgn(two, plus(dereference(two), dereference(one))),
              asgn(one, pred(dereference(one))))),
    merge(mapsto(one, ten),
          mapsto(two, zero)))
====================
apply [1] 'id

.

quit

mod RULES is

  protecting IMP .

  rl concat(S:Pattern{Seq}, epsilon)
  => S:Pattern{Seq} [label concat-l2r] .

  rl S:Pattern{Seq}
  => concat(S:Pattern{Seq}, epsilon) [label concat-r2l] .

  rl mapstoseq(X:Trm{Nat}, epsilon)
  => emp [label mapstoseq-base-l2r] .

  rl mapstoseq(X:Trm{Nat}, concat(seq<-nat(Y:Trm{Nat}), S:Trm{Seq}))
  => merge(mapsto(X:Trm{Nat}, Y:Trm{Nat}),
           mapstoseq(succ(X:Trm{Nat}), S:Trm{Seq})) [label mapstoseq-ind-l2r] .

  rl list(X:Trm{Nat}, concat(seq<-nat(Y:Trm{Nat}), S:Trm{Seq}))
  => #exists (merge(mapstoseq(X:Trm{Nat}, concat(seq<-nat(Y:Trm{Nat}), seq<-nat({#,Nat}))),
                    list({#,Nat}, S:Trm{Seq}))) [label list-ind-l2r] .

  rl merge(P:Pattern{Map}, exists Q:Pattern{Map})
  => exists merge(shift(P:Pattern{Map}, 1, 0), Q:Pattern{Map}) [label merge-exists] .

endm

fmod PROVER is

  protecting IMP .
  protecting META-LEVEL . ---- reluctantly 

  sort PatternSet . subsort Pattern < PatternSet .
  
  op none : -> PatternSet .
  op __ : PatternSet PatternSet -> PatternSet [assoc comm id: none prec 81] .

  sort Task .
  
  op none : -> Task .
  op _|-_ : PatternSet Pattern -> Task [prec 82] .
  op __ : Task Task -> Task [assoc id: none prec 83 format(d n d)] .

  sort Tactic .

  op idle : -> Tactic .
  op __ : Tactic Tactic -> Tactic [assoc id: idle prec 83 format(d n d)] .

  op set-active_ : Nat -> Tactic [prec 82] .

  op modus-ponens_ : Pattern -> Tactic [prec 82] .
  op /\-intro : -> Tactic .
  op /\-elim_ : Pattern -> Tactic [prec 82] .
  op mem-intro : -> Tactic . 
  op mem-elim : -> Tactic .  
  ---- Ad-hoc
  ---- existantial quantifier instantiation 
  op exists-inst_ : Trm -> Tactic [prec 82] .

  ---- Rules
  op apply_ : Qid -> Tactic [prec 82] .
  op apply[_]_ : Nat Qid -> Tactic [prec 82] . --- asking for the nth solution.

  eq apply Label:Qid = apply [0] Label:Qid .

  sort State .

  op _====================_ : Task Tactic -> State [prec 84 format(d n n d)] .
  
  var Tsk : Task . var Tcc : Tactic .
  var PSet : PatternSet .

  ---- P |- P

  eq P:Pattern PSet |- P:Pattern 
   = none .

  ---- |- top

  eq PSet |- T:Top 
   = none .

  ---- |- P -> (Q -> P)
  
  ceq PSet |- P:Pattern -> (Q:Pattern -> P:Pattern)
    = none 
   if P:Pattern -> (Q:Pattern -> P:Pattern) :: Pattern .

  ---- |- (P -> (Q -> R)) -> (P -> Q) -> (P -> R)

  ceq PSet |- (P:Pattern -> (Q:Pattern -> R:Pattern)) -> (P:Pattern -> Q:Pattern) -> (P:Pattern -> R:Pattern)  
    = none 
   if (P:Pattern -> (Q:Pattern -> R:Pattern)) -> (P:Pattern -> Q:Pattern) -> (P:Pattern -> R:Pattern) :: Pattern .

  ---- |- (~ Q -> ~ P) -> (P -> Q)

  ceq PSet |- (~ Q:Pattern -> ~ P:Pattern) -> (P:Pattern -> Q:Pattern)
    = none
   if (~ Q:Pattern -> ~ P:Pattern) -> (P:Pattern -> Q:Pattern) :: Pattern .

  ---- modus ponens  

  ceq PSet |- P:Pattern
      Tsk
      ====================
      modus-ponens Q:Pattern
      Tcc
      
    = PSet |- Q:Pattern
      PSet |- Q:Pattern -> P:Pattern
      Tsk
      ====================
      Tcc 
    
   if Q:Pattern -> P:Pattern :: Pattern .

  ---- /\-intro

   eq PSet |- P:Pattern /\ Q:Pattern
      Tsk
      ====================
      /\-intro
      Tcc
   
    = PSet |- P:Pattern
      PSet |- Q:Pattern
      Tsk
      ====================
      Tcc . 

  ---- /\-elim

  ceq PSet |- P:Pattern
      Tsk
      ====================
      /\-elim Q:Pattern
      Tcc
  
    = PSet |- P:Pattern /\ Q:Pattern
      Tsk
      ====================
      Tcc 

   if P:Pattern /\ Q:Pattern :: Pattern .

  ---- ad-hoc

  ceq PSet |- P:Pattern -> exists Q:Pattern
      Tsk
      ====================
      exists-inst T:Trm
      Tcc

    = PSet |- P:Pattern -> ((exists Q:Pattern) [T:Trm])
      Tsk
      ====================
      Tcc

   if P:Pattern -> ((exists Q:Pattern) [T:Trm]) :: Pattern .

  ---- apply rules

  ---- TODO:: ERROR HANDLING

   op RULES : -> Module .
   eq RULES = upModule('RULES, false) .

   eq PSet |- P:Pattern
      Tsk
      ====================
      apply [N:Nat] Label:Qid 
      Tcc

    = PSet |- downTerm(getTerm(metaXapply(RULES,
                                          upTerm(P:Pattern),
                                          Label:Qid,
                                          none,       ---- no substitution
                                          0,          ---- searching from the top
                                          unbounded,  ---- no cut off 
                                          N:Nat)),        ---- want the first solution 
                       P:Pattern)
      Tsk
      ====================
      Tcc .

endfm

---)

---- Example #1
---- |- X1:Nat -> X1:Nat

---(

reduce

none |- {1,Nat} -> {1,Nat}
====================
modus-ponens {1,Nat} -> {1,Nat} -> {1,Nat}
modus-ponens {1,Nat} -> ({1,Nat} -> {1,Nat}) -> {1,Nat} 

.

---)

---(

---- Example #2
---- |- 7 |-> 9 * 8 |-> 1 * 1 |-> 5 * 2 |-> 0 -> list(7, [9;5])

reduce

none |- merge(mapsto(seven, nine),
              mapsto(eight, one),
              mapsto(one, five),
              mapsto(two, zero))
        -> list(seven, concat(seq<-nat(nine), seq<-nat(five))) 
====================
apply 'list-ind-l2r
exists-inst one
apply 'mapstoseq-ind-l2r
apply 'concat-r2l
apply 'mapstoseq-ind-l2r
apply 'mapstoseq-base-l2r
apply 'concat-r2l
apply 'list-ind-l2r
apply 'merge-exists
exists-inst zero 

.

---)




quit

  

endfm

reduce

eq-class(plus(succ(zero), zero)) .



---(

fmod EXE is

  protecting IMP .

  protecting META-LEVEL .

  sort Action .

  op _====================_ : Pattern Action -> Pattern [format (d n n d) prec 95] .

  op idle : -> Action .
  op apply[_]_ : Nat Qid -> Action [format(d s d d s s) prec 91] .
  op apply_ : Qid -> Action [prec 91] .
  op __ : Action Action -> Action [assoc id: idle format(d n d) prec 93] .

  op error[_]_ : Nat Qid -> Action [format(d s d d s s) prec 91] .

  eq apply Q:Qid = apply [0] Q:Qid .


  var N : Nat . var Q : Qid . var Act : Action .

  op CTXT : -> Module . eq CTXT = upModule('CTXT, false) .

  eq P:Pattern
     ====================
     apply [N] Q
     Act

   = downTerm(getTerm(metaXapply(CTXT,
                                 upTerm(P:Pattern),
                                 Q,
                                 none,
                                 0, unbounded,
                                 N)),
              (P:Pattern
               ====================
               error [N] Q
               Act)) .

endfm

reduce


cfg(while(gt(dereference(one), zero), 
          seq(asgn(two, plus(dereference(two), dereference(one))),
              asgn(one, pred(dereference(one))))),
    merge(mapsto(one, ten),
          mapsto(two, zero)))
====================
apply [1] 'id

.

quit

mod RULES is

  protecting IMP .

  rl concat(S:Pattern{Seq}, epsilon)
  => S:Pattern{Seq} [label concat-l2r] .

  rl S:Pattern{Seq}
  => concat(S:Pattern{Seq}, epsilon) [label concat-r2l] .

  rl mapstoseq(X:Trm{Nat}, epsilon)
  => emp [label mapstoseq-base-l2r] .

  rl mapstoseq(X:Trm{Nat}, concat(seq<-nat(Y:Trm{Nat}), S:Trm{Seq}))
  => merge(mapsto(X:Trm{Nat}, Y:Trm{Nat}),
           mapstoseq(succ(X:Trm{Nat}), S:Trm{Seq})) [label mapstoseq-ind-l2r] .

  rl list(X:Trm{Nat}, concat(seq<-nat(Y:Trm{Nat}), S:Trm{Seq}))
  => #exists (merge(mapstoseq(X:Trm{Nat}, concat(seq<-nat(Y:Trm{Nat}), seq<-nat({#,Nat}))),
                    list({#,Nat}, S:Trm{Seq}))) [label list-ind-l2r] .

  rl merge(P:Pattern{Map}, exists Q:Pattern{Map})
  => exists merge(shift(P:Pattern{Map}, 1, 0), Q:Pattern{Map}) [label merge-exists] .

endm

fmod PROVER is

  protecting IMP .
  protecting META-LEVEL . ---- reluctantly 

  sort PatternSet . subsort Pattern < PatternSet .
  
  op none : -> PatternSet .
  op __ : PatternSet PatternSet -> PatternSet [assoc comm id: none prec 81] .

  sort Task .
  
  op none : -> Task .
  op _|-_ : PatternSet Pattern -> Task [prec 82] .
  op __ : Task Task -> Task [assoc id: none prec 83 format(d n d)] .

  sort Tactic .

  op idle : -> Tactic .
  op __ : Tactic Tactic -> Tactic [assoc id: idle prec 83 format(d n d)] .

  op set-active_ : Nat -> Tactic [prec 82] .

  op modus-ponens_ : Pattern -> Tactic [prec 82] .
  op /\-intro : -> Tactic .
  op /\-elim_ : Pattern -> Tactic [prec 82] .
  op mem-intro : -> Tactic . 
  op mem-elim : -> Tactic .  
  ---- Ad-hoc
  ---- existantial quantifier instantiation 
  op exists-inst_ : Trm -> Tactic [prec 82] .

  ---- Rules
  op apply_ : Qid -> Tactic [prec 82] .
  op apply[_]_ : Nat Qid -> Tactic [prec 82] . --- asking for the nth solution.

  eq apply Label:Qid = apply [0] Label:Qid .

  sort State .

  op _====================_ : Task Tactic -> State [prec 84 format(d n n d)] .
  
  var Tsk : Task . var Tcc : Tactic .
  var PSet : PatternSet .

  ---- P |- P

  eq P:Pattern PSet |- P:Pattern 
   = none .

  ---- |- top

  eq PSet |- T:Top 
   = none .

  ---- |- P -> (Q -> P)
  
  ceq PSet |- P:Pattern -> (Q:Pattern -> P:Pattern)
    = none 
   if P:Pattern -> (Q:Pattern -> P:Pattern) :: Pattern .

  ---- |- (P -> (Q -> R)) -> (P -> Q) -> (P -> R)

  ceq PSet |- (P:Pattern -> (Q:Pattern -> R:Pattern)) -> (P:Pattern -> Q:Pattern) -> (P:Pattern -> R:Pattern)  
    = none 
   if (P:Pattern -> (Q:Pattern -> R:Pattern)) -> (P:Pattern -> Q:Pattern) -> (P:Pattern -> R:Pattern) :: Pattern .

  ---- |- (~ Q -> ~ P) -> (P -> Q)

  ceq PSet |- (~ Q:Pattern -> ~ P:Pattern) -> (P:Pattern -> Q:Pattern)
    = none
   if (~ Q:Pattern -> ~ P:Pattern) -> (P:Pattern -> Q:Pattern) :: Pattern .

  ---- modus ponens  

  ceq PSet |- P:Pattern
      Tsk
      ====================
      modus-ponens Q:Pattern
      Tcc
      
    = PSet |- Q:Pattern
      PSet |- Q:Pattern -> P:Pattern
      Tsk
      ====================
      Tcc 
    
   if Q:Pattern -> P:Pattern :: Pattern .

  ---- /\-intro

   eq PSet |- P:Pattern /\ Q:Pattern
      Tsk
      ====================
      /\-intro
      Tcc
   
    = PSet |- P:Pattern
      PSet |- Q:Pattern
      Tsk
      ====================
      Tcc . 

  ---- /\-elim

  ceq PSet |- P:Pattern
      Tsk
      ====================
      /\-elim Q:Pattern
      Tcc
  
    = PSet |- P:Pattern /\ Q:Pattern
      Tsk
      ====================
      Tcc 

   if P:Pattern /\ Q:Pattern :: Pattern .

  ---- ad-hoc

  ceq PSet |- P:Pattern -> exists Q:Pattern
      Tsk
      ====================
      exists-inst T:Trm
      Tcc

    = PSet |- P:Pattern -> ((exists Q:Pattern) [T:Trm])
      Tsk
      ====================
      Tcc

   if P:Pattern -> ((exists Q:Pattern) [T:Trm]) :: Pattern .

  ---- apply rules

  ---- TODO:: ERROR HANDLING

   op RULES : -> Module .
   eq RULES = upModule('RULES, false) .

   eq PSet |- P:Pattern
      Tsk
      ====================
      apply [N:Nat] Label:Qid 
      Tcc

    = PSet |- downTerm(getTerm(metaXapply(RULES,
                                          upTerm(P:Pattern),
                                          Label:Qid,
                                          none,       ---- no substitution
                                          0,          ---- searching from the top
                                          unbounded,  ---- no cut off 
                                          N:Nat)),        ---- want the first solution 
                       P:Pattern)
      Tsk
      ====================
      Tcc .

endfm

---)

---- Example #1
---- |- X1:Nat -> X1:Nat

---(

reduce

none |- {1,Nat} -> {1,Nat}
====================
modus-ponens {1,Nat} -> {1,Nat} -> {1,Nat}
modus-ponens {1,Nat} -> ({1,Nat} -> {1,Nat}) -> {1,Nat} 

.

---)

---(

---- Example #2
---- |- 7 |-> 9 * 8 |-> 1 * 1 |-> 5 * 2 |-> 0 -> list(7, [9;5])

reduce

none |- merge(mapsto(seven, nine),
              mapsto(eight, one),
              mapsto(one, five),
              mapsto(two, zero))
        -> list(seven, concat(seq<-nat(nine), seq<-nat(five))) 
====================
apply 'list-ind-l2r
exists-inst one
apply 'mapstoseq-ind-l2r
apply 'concat-r2l
apply 'mapstoseq-ind-l2r
apply 'mapstoseq-base-l2r
apply 'concat-r2l
apply 'list-ind-l2r
apply 'merge-exists
exists-inst zero 

.

---)




quit

