load imp .

fmod MATCH is

  protecting META-LEVEL .
  protecting INT .

  sort KSubstitution .

  op identityKSubstitution : -> KSubstitution .
  op _<<<_ : Term Term -> KSubstitution .
  op _;_ : KSubstitution KSubstitution -> KSubstitution [assoc id: identityKSubstitution] .

  sort KMatchResult .
  subsort KSubstitution < KMatchResult .

  op kmatch : Module Term Term Nat -> KMatchResult .

  op noKMatch : -> KMatchResult .

  var MOD : Module .
  vars Q Q' Q1 Q2 : Qid .
  vars T T' T1 T2 : Term .
  vars TL TL' TL1 TL2 : TermList .
  vars N N' : Nat .

  eq kmatch(MOD, T, T, 0) = identityKSubstitution .
  eq kmatch(MOD, T, T, N) = noKMatch . ---- N =/= 0

  ---- check whether a Q:Qid is of the form
  ---- '`{_`,XXX`}

  op isVarHead : Qid -> Bool .

 ceq isVarHead(Q) = true 
  if find(string(Q), "`{_`,", 0) = 0 
  /\ rfind(string(Q), "`}", length(string(Q))) = length(string(Q)) + (-2) .

  eq isVarHead(Q) = false . ---- otherwise.

 ceq kmatch(MOD, Q[T], T', 0) = Q[T] <<< T' if isVarHead(Q) .
 ceq kmatch(MOD, Q[T], T', N) = noKMatch if isVarHead(Q) . 

  eq kmatch(MOD, Q, Q', N) = noKMatch . ---- Q =/= Q'

  


  

  
  
endfm

fmod TEST is

  protecting IMP .

  protecting MATCH .

  op IMP : -> Module . 
  eq IMP = upModule('IMP, false) .

endfm

reduce

kmatch(IMP,
       upTerm({2,Bol}),
       upTerm(succ(zero)),
       0) .



quit
