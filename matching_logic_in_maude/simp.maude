fmod IMP is

  protecting INT .
  protecting META-LEVEL .

  sort K .
  sorts BVal BExp AVal AExp Pgm Map Cfg .

  subsorts BVal BExp AVal AExp Pgm Map Cfg < K .

  ---- symbols 

  op tt : -> BVal .
  op ff : -> BVal . 

  op zero : -> AVal .
  op succ : AVal -> AVal [iter] .

  op val : AVal -> AExp .
  op val : BVal -> BExp .

  op pred : AExp -> AExp .
  op plus : AExp AExp -> AExp .
  op gt : AExp AExp -> BExp .
  op derefer : AExp -> AExp .

  op emp : -> Map .
  op bind : AVal AVal -> Map .
  op merge : Map Map -> Map [assoc comm] .

  op skip : -> Pgm .
  op seq : Pgm Pgm -> Pgm .
  op ite : BExp Pgm Pgm -> Pgm .
  op while : BExp Pgm -> Pgm .
  op asgn : AExp AExp -> Pgm .

  op cfg : Pgm Map -> Cfg .

  ---- context 

  op {_} : Int -> K .
  op gamma_ : K -> K .
  op _[_] : K K -> K .

  

  ---- example

  op sum : -> Cfg .

  eq sum

   = cfg(while(gt(derefer(val(succ(zero))), val(zero)),
               seq(asgn(val(succ(succ(zero))),
                        plus(derefer(val(succ(zero))),
                             derefer(val(succ(succ(zero)))))),
                   asgn(val(succ(zero)),
                        pred(derefer(val(succ(zero))))))),
         merge(bind(succ(zero), succ^10(zero)),
               bind(succ(succ(zero)), zero))) .


endfm

quit
