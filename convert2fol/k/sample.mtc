(declare-sort Bool)
(declare-sort Nat)
(declare-sort Seq)

(declare-func tt (.MLSorts) Bool)
(declare-func ff (.MLSorts) Bool)

(declare-func zero (.MLSorts) Nat)
(declare-func succ (Nat) Nat)
(declare-func plus (Nat Nat) Nat)

(declare-func Nat2Seq (Nat) Seq)
(declare-func epsilon (.MLSorts) Seq)
(declare-func concat (Seq Seq) Seq)

(assert (forall ((N Nat)) (= (plus N zero) N)))
(assert (forall ((N Nat) (M Nat)) (= (plus N (succ M))
                                     (succ (plus N M)))))
(assert (forall ((N Nat) (M Nat)) (= (plus N M) (plus M N))))

(assert (forall ((S Seq)) (= (concat epsilon S) S)))
(assert (forall ((S Seq)) (= (concat S epsilon) S)))
(assert (forall ((N1 Nat) (N2 Nat) (S1 Seq) (S2 Seq))
                (-> (= (concat (Nat2Seq N1) S1)
                       (concat (Nat2Seq N2) S2))
                    (and (= N1 N2) (= S1 S2)))))


(assert (not (= (plus (succ zero) (succ zero))
                (succ (succ zero)))))

