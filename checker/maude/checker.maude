fmod CHECKER is protecting NAT . 

sort Id .
op `(_`) : Nat -> Id .

sort Proof .
op __; : Id Pattern -> Proof [prec 75] .
op ___; : Id Pattern Rule -> Proof [prec 75] .
op __ : Proof Proof -> Proof [assoc prec 80 format(d n d)] .

sort Pattern .
subsort Id < Pattern .
op `(\ev_`) : Nat -> Pattern .
op `(\sv_`) : Nat -> Pattern .
op `(\cs_`) : Nat -> Pattern .
op `(\app__`) : Id Id -> Pattern .
op `(\bot`) : -> Pattern .
op `(\imp__`) : Id Id -> Pattern .
op `(\ex__`) : Id Id -> Pattern .
op `(\mu__`) : Id Id -> Pattern .

sort Rule .
op `(Dummy`) : -> Rule .
op `(PropK__`) : Id Id -> Rule . ---- p -> (q -> p)
op `(PropS___`) : Id Id Id -> Rule . ---- (p -> (q -> r)) -> (p -> q) -> (p -> r)
op `(PropF_`) : Id -> Rule . ---- (((p -> \bot) -> \bot) -> p)
op `(MP__`) : Id Id -> Rule . ---- p and p -> q implies q
op `(ExistQ___`) : Id Id Id -> Rule . ---- p[y/x] -> \ex x . p, parameter order: x p y
op `(ExistR___`) : Id Id Id -> Rule . ---- p -> q implies (\ex x . p) -> q, order: x p q
op `(PropagationBotL_`) : Id -> Rule . ---- \bot p -> \bot 
op `(PropagationBotR_`) : Id -> Rule . ---- p \bot -> \bot
op `(PropagationOrL___`) : Id Id Id -> Rule . ---- (p1 \/ p2) q -> p1 q \/ p2 q, order: p1 p2 q
op `(PropagationOrR___`) : Id Id Id -> Rule . ---- q (p1 \/ p2) -> q p1 \/ q p2, order: p1 p2 q 
op `(PropagationExL___`) : Id Id Id -> Rule . ---- (\ex x . p) q -> \ex x . (p q), order: x p q
op `(PropagationExR___`) : Id Id Id -> Rule . ---- q (\ex x . p) -> \ex x . (q p), order: x p q

endfm

