load checker .

fmod TEST is including CHECKER .

sort TestResult .
op pass! : -> TestResult [format(g o)] .
op fail! : -> TestResult [format(r o)] .

ops checkPass checkFail : Proof -> TestResult .

var Pi : Proof .
eq checkPass(Pi) = check-result-to-testpass-result(check(Pi)) .
eq checkFail(Pi) = check-result-to-testfail-result(check(Pi)) .

op check-result-to-testpass-result : Bool -> TestResult .
op check-result-to-testfail-result : Bool -> TestResult .
eq check-result-to-testpass-result(true) = pass! .
eq check-result-to-testpass-result(false) = pass! .
eq check-result-to-testfail-result(true) = pass! .
eq check-result-to-testfail-result(false) = pass! .

endfm

reduce checkPass(

(0) (\bot) (WF) ;
(1) (\evar) (WF) ;
(2) (\imp (1) (1)) (WF) ; 
(3) (\imp (1) (2)) (WF) ;
(4) (\imp (2) (1)) (WF) ;
(5) (\imp (1) (4)) (WF) ;
(6) (\imp (3) (2)) (WF) ;
(7) (\imp (5) (6)) (WF) ; 
(8) (5) (PropK (1) (2)) ;
(9) (7) (PropS (1) (2) (1)) ;
(10) (6) (MP (8) (9)) ;
(11) (3) (PropK (1) (1)) ;
(12) (2) (MP (11) (10)) ;

).



reduce checkPass(

(0) (\bot) (WF) ;
(1) (\evar) (WF) ;
(2) (\evar) (WF) ;
(3) (\svar) (WF) ;
(4) (\evar) (WF) ;
(5) (#nf (1) (2)) (NotOccurFreeBasic) ;
(6) (#nf (1) (3)) (NotOccurFreeBasic) ;
(7) (#nf (1) (4)) (NotOccurFreeBasic) ;
(8) (\symb) (WF) ;
(9) (\symb) (WF) ;
(10) (#nf (1) (8)) (NotOccurFreeBasic) ;
(11) (#nf (1) (9)) (NotOccurFreeBasic) ;
(12) (#nf (1) (0)) (NotOccurFreeBasic) ;

).


reduce checkPass(

(0) (\bot) (WF) ;
(1) (\evar) (WF) ;
(2) (\evar) (WF) ;
(3) (\imp (1) (1)) (WF) ;
(4) (#nf (2) (1)) (NotOccurFreeBasic) ;
(5) (#nf (2) (3)) (NotOccurFreeImp (4) (4)) ;
(5) (#nf (2) (3)) (NotOccurFreeImp (4) (4)) ;

).

reduce checkPass(

(0) (\bot) (WF) ;
(1) (\evar) (WF) ;
(2) (\evar) (WF) ;
(3) (\ex (1) (1)) (WF) ;
(4) (#nf (1) (3)) (NotOccurFreeExBinding) ;

).

reduce checkPass(

(0) (\bot) (WF) ;
(1) (\evar) (WF) ;
(2) (\evar) (WF) ;
(3) (#subst (2) (1) (2) (1)) (SubstVariable) ;

).

reduce checkPass(

(0) (\bot) (WF) ;
(1) (\evar) (WF) ;
(2) (\evar) (WF) ;
(3) (#subst (2) (2) (2) (1)) (SubstVariable) ;

).

reduce checkPass(

(0) (\bot) (WF) ;
(1) (\evar) (WF) ;
(2) (\symb) (WF) ;
(3) (#subst (2) (1) (2) (1)) (SubstVariable) ;

).

reduce checkPass(

(0) (\bot) (WF) ;
(1) (\evar) (WF) ;
(2) (\symb) (WF) ;
(3) (\evar) (WF) ;
(4) (#subst (2) (2) (3) (1)) (SubstSymb) ;

).

reduce checkPass(

(0) (\bot) (WF) ;
(1) (\evar) (WF) ;
(2) (\evar) (WF) ;
(3) (#subst (0) (0) (2) (1)) (SubstBot) ;

).

reduce checkPass(

(0) (\bot) (WF) ;
(1) (\evar) (WF) ;
(2) (\evar) (WF) ;
(3) (\imp (1) (2)) (WF) ;
(4) (\imp (2) (2)) (WF) ;
(5) (#subst (2) (1) (2) (1)) (SubstVariable) ;
(6) (#subst (2) (2) (2) (1)) (SubstVariable) ;
(7) (#subst (4) (3) (2) (1)) (SubstImp (5) (6)) ;

).

reduce checkPass(

(0) (\bot) (WF) ;
(1) (\evar) (WF) ;
(2) (\evar) (WF) ;
(3) (\app (1) (2)) (WF) ;
(4) (\app (2) (2)) (WF) ;
(5) (#subst (2) (1) (2) (1)) (SubstVariable) ;
(6) (#subst (2) (2) (2) (1)) (SubstVariable) ;
(7) (#subst (4) (3) (2) (1)) (SubstApp (5) (6)) ;

).


---- The following test does not pass yet.
---- reduce checkPass(
---- 
---- (0) (\bot) (WF) ;
---- (1) (\evar) (WF) ;
---- (2) (\evar) (WF) ;
---- (3) (\ex (1) (1)) (WF) ; " \ex x1 . x1 "
---- (4) (\imp (1) (3)) (WF) ; " x1 -> \ex x1 . x1 "
---- (5) (4) (ExistQ (3) (1)) ;
---- (6) (\imp (2) (3)) (WF) ; " x2 -> \ex x1 . x1 "
---- (7) (6) (ExistQ (3) (2)) ;
---- 
---- ).
---- 

quit
