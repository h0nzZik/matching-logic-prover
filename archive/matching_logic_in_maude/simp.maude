fmod SIMP is

  protecting INT .

  sort K .

  ---- symbols 

  op tt : -> K .
  op ff : -> K . 

  op zero : -> K .
  op succ : K -> K [iter] .

  op val : K -> K .

  op pred : K -> K .
  op plus : K K -> K . ---- not assoc comm !
  op gt : K K -> K .
  op derefer : K -> K .

  op emp : -> K .
  op bind : K K -> K .
  op merge : K K -> K [assoc comm] .

  op skip : -> K .
  op seq : K K -> K .
  op ite : K K K -> K .
  op while : K K -> K .
  op asgn : K K -> K .

  op cfg : K K -> K .

  ---- variable

  op {_} : Int -> K .

  ---- context 

  op gamma_ : K -> K .
  op _[_] : K K -> K .

  ---- connectives

  op bottom : -> K .
  op _/\_ : K K -> K [assoc comm] .
  op _=_ : K K -> K [comm] .

  eq K:K /\ bottom = bottom .
  eq K:K /\ K:K = K:K .
  eq succ(bottom) = bottom .

endfm

fmod UNIFY is

  protecting SIMP .

  var Z : Int .
  vars K K' K'' K''' : K .

  eq {Z} /\ K = K /\ ({Z} = K) . 

  ---- bubbling up constraints

  eq succ(K /\ (K' = K'')) = succ(K) /\ (K' = K'') . 
  eq val(K /\ (K' = K'')) = val(K) /\ (K' = K'') . 
  eq pred(K /\ (K' = K'')) = pred(K) /\ (K' = K'') . 
  eq plus(K /\ (K' = K''), K''') = plus(K, K''') /\ (K' = K'') .
  eq plus(K, K' /\ (K'' = K''')) = plus(K, K') /\ (K'' = K''') .
  eq gt(K /\ (K' = K''), K''') = gt(K, K''') /\ (K' = K'') .
  eq gt(K, K' /\ (K'' = K''')) = gt(K, K') /\ (K'' = K''') .
  eq derefer(K /\ (K' = K'')) = derefer(K) /\ (K' = K'') . 

  ---- BVal

  eq tt /\ ff = bottom .

  ---- AVal

  eq zero /\ succ(K) = bottom .

  eq succ(K) /\ succ(K') = succ(K /\ K') .
  
  ---- AExp

  eq val(K) /\ pred(K') = bottom .
  eq val(K) /\ plus(K', K'') = bottom .
  eq val(K) /\ gt(K', K'') = bottom .
  eq val(K) /\ derefer(K') = bottom .
  eq pred(K) /\ plus(K', K'') = bottom .
  eq pred(K) /\ gt(K', K'') = bottom .
  eq pred(K) /\ derefer(K') = bottom .
  eq plus(K, K') /\ gt(K'', K''') = bottom .
  eq plus(K, K') /\ derefer(K'') = bottom .
  eq gt(K, K') /\ derefer(K'') = bottom .

  eq val(K) /\ val(K') = val(K /\ K') .
  eq pred(K) /\ pred(K') = pred(K /\ K') .
  eq plus(K, K') /\ plus(K'', K''') = plus(K /\ K'', K' /\ K''') .
  eq gt(K, K') /\ gt(K'', K''') = gt(K /\ K'', K' /\ K''') .
  eq derefer(K) /\ derefer(K') = derefer(K /\ K') .

  ---- Map

  eq emp /\ bind(K, K') = bottom .

  eq bind(K, K') /\ bind(K'', K''') = bind(K /\ K'', K' /\ K''') .

endfm

reduce succ(succ({3})) /\ succ(succ(succ(zero))) .

quit
