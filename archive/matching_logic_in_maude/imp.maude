fmod IMP is

  ---- This module builds matching logic patterns.

  protecting INT .

  sorts Var Trm Trm? Top Bottom Predicate Pattern .
  sorts Var{Bol} Trm{Bol} Trm?{Bol} Top{Bol} Bottom{Bol} Predicate{Bol} Pattern{Bol} .
  sorts Var{Nat} Trm{Nat} Trm?{Nat} Top{Nat} Bottom{Nat} Predicate{Nat} Pattern{Nat} .
  sorts Var{Seq} Trm{Seq} Trm?{Seq} Top{Seq} Bottom{Seq} Predicate{Seq} Pattern{Seq} .
  sorts Var{Map} Trm{Map} Trm?{Map} Top{Map} Bottom{Map} Predicate{Map} Pattern{Map} .
  sorts Var{Pgm} Trm{Pgm} Trm?{Pgm} Top{Pgm} Bottom{Pgm} Predicate{Pgm} Pattern{Pgm} .
  sorts Var{Cfg} Trm{Cfg} Trm?{Cfg} Top{Cfg} Bottom{Cfg} Predicate{Cfg} Pattern{Cfg} .
  sorts Var{Ply} Trm{Ply} Trm?{Ply} Top{Ply} Bottom{Ply} Predicate{Ply} Pattern{Ply} .

  subsorts Var < Trm < Trm? < Pattern .
  subsorts Top Bottom < Predicate < Pattern .
  subsorts Bottom < Trm? .
  subsorts Var{Bol} < Trm{Bol} < Trm?{Bol} < Pattern{Bol} .
  subsorts Top{Bol} Bottom{Bol} < Predicate{Bol} < Pattern{Bol} .
  subsorts Bottom{Bol} < Trm?{Bol} .
  subsorts Var{Nat} < Trm{Nat} < Trm?{Nat} < Pattern{Nat} .
  subsorts Top{Nat} Bottom{Nat} < Predicate{Nat} < Pattern{Nat} .
  subsorts Bottom{Nat} < Trm?{Nat} .
  subsorts Var{Seq} < Trm{Seq} < Trm?{Seq} < Pattern{Seq} .
  subsorts Top{Seq} Bottom{Seq} < Predicate{Seq} < Pattern{Seq} .
  subsorts Bottom{Seq} < Trm?{Seq} .
  subsorts Var{Map} < Trm{Map} < Trm?{Map} < Pattern{Map} .
  subsorts Top{Map} Bottom{Map} < Predicate{Map} < Pattern{Map} .
  subsorts Bottom{Map} < Trm?{Map} .
  subsorts Var{Pgm} < Trm{Pgm} < Trm?{Pgm} < Pattern{Pgm} .
  subsorts Top{Pgm} Bottom{Pgm} < Predicate{Pgm} < Pattern{Pgm} .
  subsorts Bottom{Pgm} < Trm?{Pgm} .
  subsorts Var{Cfg} < Trm{Cfg} < Trm?{Cfg} < Pattern{Cfg} .
  subsorts Top{Cfg} Bottom{Cfg} < Predicate{Cfg} < Pattern{Cfg} .
  subsorts Bottom{Cfg} < Trm?{Cfg} .
  subsorts Var{Ply} < Trm{Ply} < Trm?{Ply} < Pattern{Ply} .
  subsorts Top{Ply} Bottom{Ply} < Predicate{Ply} < Pattern{Ply} .
  subsorts Bottom{Ply} < Trm?{Ply} .

  subsorts Var{Ply} < Var{Bol} Var{Nat} Var{Seq} Var{Map} Var{Pgm} Var{Cfg} < Var .
  subsorts Trm{Ply} < Trm{Bol} Trm{Nat} Trm{Seq} Trm{Map} Trm{Pgm} Trm{Cfg} < Trm .
  subsorts Trm?{Ply} < Trm?{Bol} Trm?{Nat} Trm?{Seq} Trm?{Map} Trm?{Pgm} Trm?{Cfg} < Trm? .
  subsorts Top{Ply} < Top{Bol} Top{Nat} Top{Seq} Top{Map} Top{Pgm} Top{Cfg} < Top .
  subsorts Bottom{Ply} < Bottom{Bol} Bottom{Nat} Bottom{Seq} Bottom{Map} Bottom{Pgm} Bottom{Cfg} < Bottom .
  subsorts Pattern{Ply} < Pattern{Bol} Pattern{Nat} Pattern{Seq} Pattern{Map} Pattern{Pgm} Pattern{Cfg} < Pattern .

  ---- top and bottom patterns

  op top{Bol} : -> Top{Bol} . op bottom{Bol} : -> Bottom{Bol} .
  op top{Nat} : -> Top{Nat} . op bottom{Nat} : -> Bottom{Nat} .
  op top{Seq} : -> Top{Seq} . op bottom{Seq} : -> Bottom{Seq} .
  op top{Map} : -> Top{Map} . op bottom{Map} : -> Bottom{Map} .
  op top{Pgm} : -> Top{Pgm} . op bottom{Pgm} : -> Bottom{Pgm} .
  op top{Cfg} : -> Top{Cfg} . op bottom{Cfg} : -> Bottom{Cfg} .
  op top{Ply} : -> Top{Ply} . op bottom{Ply} : -> Bottom{Ply} .

  ---- matching logic variables with de Brujin indices

  ---- Variables are numbered starting from zero.
  ---- "Variables" with negative indices are regarded as
  ---- place-holders that work together with #exists,
  ---- #forall and #context. See their definitions for
  ---- more details.

  ---- The index of a variable *is* its name, so variables
  ---- with the same index MUST *must* the same sort.

  op {_,Bol} : Int -> [Var{Bol}] [ctor] .
  op {_,Nat} : Int -> [Var{Nat}] [ctor] .
  op {_,Seq} : Int -> [Var{Seq}] [ctor] .
  op {_,Map} : Int -> [Var{Map}] [ctor] .
  op {_,Pgm} : Int -> [Var{Pgm}] [ctor] .
  op {_,Cfg} : Int -> [Var{Cfg}] [ctor] .

  var K : Nat .

  mb {K,Bol} : Var{Bol} .
  mb {K,Nat} : Var{Nat} .
  mb {K,Seq} : Var{Seq} .
  mb {K,Map} : Var{Map} .
  mb {K,Pgm} : Var{Pgm} .
  mb {K,Cfg} : Var{Cfg} .

  ---- matching logic equalities

  op _=_ : Pattern{Bol} Pattern{Bol} -> Predicate{Ply} [comm prec 66] .
  op _=_ : Pattern{Nat} Pattern{Nat} -> Predicate{Ply} [ditto] .
  op _=_ : Pattern{Seq} Pattern{Seq} -> Predicate{Ply} [ditto] .
  op _=_ : Pattern{Map} Pattern{Map} -> Predicate{Ply} [ditto] .
  op _=_ : Pattern{Pgm} Pattern{Pgm} -> Predicate{Ply} [ditto] .
  op _=_ : Pattern{Cfg} Pattern{Cfg} -> Predicate{Ply} [ditto] .

  ---- matching logic and

  op _/\_ : Pattern{Bol} Pattern{Bol} -> Pattern{Bol} [assoc comm prec 62] .
  op _/\_ : Pattern{Nat} Pattern{Nat} -> Pattern{Nat} [ditto] .
  op _/\_ : Pattern{Seq} Pattern{Seq} -> Pattern{Seq} [ditto] .
  op _/\_ : Pattern{Map} Pattern{Map} -> Pattern{Map} [ditto] .
  op _/\_ : Pattern{Pgm} Pattern{Pgm} -> Pattern{Pgm} [ditto] .
  op _/\_ : Pattern{Cfg} Pattern{Cfg} -> Pattern{Cfg} [ditto] .
  op _/\_ : Pattern{Ply} Pattern{Ply} -> Pattern{Ply} [ditto] .

  op _/\_ : Predicate{Bol} Predicate{Bol} -> Predicate{Bol} [ditto] .
  op _/\_ : Predicate{Nat} Predicate{Nat} -> Predicate{Nat} [ditto] .
  op _/\_ : Predicate{Seq} Predicate{Seq} -> Predicate{Seq} [ditto] .
  op _/\_ : Predicate{Map} Predicate{Map} -> Predicate{Map} [ditto] .
  op _/\_ : Predicate{Pgm} Predicate{Pgm} -> Predicate{Pgm} [ditto] .
  op _/\_ : Predicate{Cfg} Predicate{Cfg} -> Predicate{Cfg} [ditto] .
  op _/\_ : Predicate{Ply} Predicate{Ply} -> Predicate{Ply} [ditto] .

  op _/\_ : Top{Bol} Top{Bol} -> Top{Bol} [ditto] .
  op _/\_ : Top{Nat} Top{Nat} -> Top{Nat} [ditto] .
  op _/\_ : Top{Seq} Top{Seq} -> Top{Seq} [ditto] .
  op _/\_ : Top{Map} Top{Map} -> Top{Map} [ditto] .
  op _/\_ : Top{Pgm} Top{Pgm} -> Top{Pgm} [ditto] .
  op _/\_ : Top{Cfg} Top{Cfg} -> Top{Cfg} [ditto] .
  op _/\_ : Top{Ply} Top{Ply} -> Top{Ply} [ditto] .

  op _/\_ : Pattern{Bol} Bottom{Bol} -> Bottom{Bol} [ditto] .
  op _/\_ : Pattern{Nat} Bottom{Nat} -> Bottom{Nat} [ditto] .
  op _/\_ : Pattern{Seq} Bottom{Seq} -> Bottom{Seq} [ditto] .
  op _/\_ : Pattern{Map} Bottom{Map} -> Bottom{Map} [ditto] .
  op _/\_ : Pattern{Pgm} Bottom{Pgm} -> Bottom{Pgm} [ditto] .
  op _/\_ : Pattern{Cfg} Bottom{Cfg} -> Bottom{Cfg} [ditto] .
  op _/\_ : Pattern{Ply} Bottom{Ply} -> Bottom{Ply} [ditto] .


  ---- matching logic or

  ---- matching logic not

  op ~_ : Pattern{Bol} -> Pattern{Bol} [prec 61] .
  op ~_ : Pattern{Nat} -> Pattern{Nat} [ditto] .
  op ~_ : Pattern{Seq} -> Pattern{Seq} [ditto] .
  op ~_ : Pattern{Map} -> Pattern{Map} [ditto] .
  op ~_ : Pattern{Pgm} -> Pattern{Pgm} [ditto] .
  op ~_ : Pattern{Cfg} -> Pattern{Cfg} [ditto] .
  op ~_ : Pattern{Ply} -> Pattern{Ply} [ditto] .

  op ~_ : Predicate{Bol} -> Predicate{Bol} [prec 61] .
  op ~_ : Predicate{Nat} -> Predicate{Nat} [ditto] .
  op ~_ : Predicate{Seq} -> Predicate{Seq} [ditto] .
  op ~_ : Predicate{Map} -> Predicate{Map} [ditto] .
  op ~_ : Predicate{Pgm} -> Predicate{Pgm} [ditto] .
  op ~_ : Predicate{Cfg} -> Predicate{Cfg} [ditto] .
  op ~_ : Predicate{Ply} -> Predicate{Ply} [ditto] .

  op ~_ : Top{Bol} -> Bottom{Bol} [prec 61] .
  op ~_ : Top{Nat} -> Bottom{Nat} [ditto] .
  op ~_ : Top{Seq} -> Bottom{Seq} [ditto] .
  op ~_ : Top{Map} -> Bottom{Map} [ditto] .
  op ~_ : Top{Pgm} -> Bottom{Pgm} [ditto] .
  op ~_ : Top{Cfg} -> Bottom{Cfg} [ditto] .
  op ~_ : Top{Ply} -> Bottom{Ply} [ditto] .

  op ~_ : Bottom{Bol} -> Top{Bol} [prec 61] .
  op ~_ : Bottom{Nat} -> Top{Nat} [ditto] .
  op ~_ : Bottom{Seq} -> Top{Seq} [ditto] .
  op ~_ : Bottom{Map} -> Top{Map} [ditto] .
  op ~_ : Bottom{Pgm} -> Top{Pgm} [ditto] .
  op ~_ : Bottom{Cfg} -> Top{Cfg} [ditto] .
  op ~_ : Bottom{Ply} -> Top{Ply} [ditto] .
  

  ---- matching logic implies

  op _->_ : Pattern{Bol} Pattern{Bol} -> Pattern{Bol} [gather(e E) prec 64] .
  op _->_ : Pattern{Nat} Pattern{Nat} -> Pattern{Nat} [ditto] .
  op _->_ : Pattern{Seq} Pattern{Seq} -> Pattern{Seq} [ditto] .
  op _->_ : Pattern{Map} Pattern{Map} -> Pattern{Map} [ditto] .
  op _->_ : Pattern{Pgm} Pattern{Pgm} -> Pattern{Pgm} [ditto] .
  op _->_ : Pattern{Cfg} Pattern{Cfg} -> Pattern{Cfg} [ditto] .
  op _->_ : Pattern{Ply} Pattern{Ply} -> Pattern{Ply} [ditto] .

  op _->_ : Predicate{Bol} Predicate{Bol} -> Predicate{Bol} [ditto] .
  op _->_ : Predicate{Nat} Predicate{Nat} -> Predicate{Nat} [ditto] .
  op _->_ : Predicate{Seq} Predicate{Seq} -> Predicate{Seq} [ditto] .
  op _->_ : Predicate{Map} Predicate{Map} -> Predicate{Map} [ditto] .
  op _->_ : Predicate{Pgm} Predicate{Pgm} -> Predicate{Pgm} [ditto] .
  op _->_ : Predicate{Cfg} Predicate{Cfg} -> Predicate{Cfg} [ditto] .
  op _->_ : Predicate{Ply} Predicate{Ply} -> Predicate{Ply} [ditto] .

  op _->_ : Bottom{Bol} Predicate{Bol} -> Top{Bol} [ditto] .
  op _->_ : Bottom{Nat} Predicate{Nat} -> Top{Nat} [ditto] .
  op _->_ : Bottom{Seq} Predicate{Seq} -> Top{Seq} [ditto] .
  op _->_ : Bottom{Map} Predicate{Map} -> Top{Map} [ditto] .
  op _->_ : Bottom{Pgm} Predicate{Pgm} -> Top{Pgm} [ditto] .
  op _->_ : Bottom{Cfg} Predicate{Cfg} -> Top{Cfg} [ditto] .
  op _->_ : Bottom{Ply} Predicate{Ply} -> Top{Ply} [ditto] .

  op _->_ : Top{Bol} Top{Bol} -> Top{Bol} [ditto] .
  op _->_ : Top{Nat} Top{Nat} -> Top{Nat} [ditto] .
  op _->_ : Top{Seq} Top{Seq} -> Top{Seq} [ditto] .
  op _->_ : Top{Map} Top{Map} -> Top{Map} [ditto] .
  op _->_ : Top{Pgm} Top{Pgm} -> Top{Pgm} [ditto] .
  op _->_ : Top{Cfg} Top{Cfg} -> Top{Cfg} [ditto] .
  op _->_ : Top{Ply} Top{Ply} -> Top{Ply} [ditto] .

  op _->_ : Top{Bol} Bottom{Bol} -> Bottom{Bol} [ditto] .
  op _->_ : Top{Nat} Bottom{Nat} -> Bottom{Nat} [ditto] .
  op _->_ : Top{Seq} Bottom{Seq} -> Bottom{Seq} [ditto] .
  op _->_ : Top{Map} Bottom{Map} -> Bottom{Map} [ditto] .
  op _->_ : Top{Pgm} Bottom{Pgm} -> Bottom{Pgm} [ditto] .
  op _->_ : Top{Cfg} Bottom{Cfg} -> Bottom{Cfg} [ditto] .
  op _->_ : Top{Ply} Bottom{Ply} -> Bottom{Ply} [ditto] .

  ---- matching logic contained (subset) 

  ---- matching logic bindings: universal/existential/contextual quantification

  ---- matching logic forall 

  op forall_ : Pattern{Bol} -> Pattern{Bol} [prec 61] .
  op forall_ : Pattern{Nat} -> Pattern{Nat} [ditto] .
  op forall_ : Pattern{Seq} -> Pattern{Seq} [ditto] .
  op forall_ : Pattern{Map} -> Pattern{Map} [ditto] .
  op forall_ : Pattern{Pgm} -> Pattern{Pgm} [ditto] .
  op forall_ : Pattern{Cfg} -> Pattern{Cfg} [ditto] .
  op forall_ : Pattern{Ply} -> Pattern{Ply} [ditto] .

  ---- matching logic exists 

  op exists_ : Pattern{Bol} -> Pattern{Bol} [prec 61] .
  op exists_ : Pattern{Nat} -> Pattern{Nat} [ditto] .
  op exists_ : Pattern{Seq} -> Pattern{Seq} [ditto] .
  op exists_ : Pattern{Map} -> Pattern{Map} [ditto] .
  op exists_ : Pattern{Pgm} -> Pattern{Pgm} [ditto] .
  op exists_ : Pattern{Cfg} -> Pattern{Cfg} [ditto] .
  op exists_ : Pattern{Ply} -> Pattern{Ply} [ditto] .

  ---- matching logic context

  op context_ : Pattern{Bol} -> Pattern{Bol} [prec 61] .
  op context_ : Pattern{Nat} -> Pattern{Nat} [ditto] .
  op context_ : Pattern{Seq} -> Pattern{Seq} [ditto] .
  op context_ : Pattern{Map} -> Pattern{Map} [ditto] .
  op context_ : Pattern{Pgm} -> Pattern{Pgm} [ditto] .
  op context_ : Pattern{Cfg} -> Pattern{Cfg} [ditto] .
  op context_ : Pattern{Ply} -> Pattern{Ply} [ditto] .

  ---- binding instantiation (context application) 

  ---- TODO:: add sorting information here.

  op _[_] : Pattern Pattern -> Pattern .

  ---- symbols in the IMP theory  

  ---- (declare-func zero () Nat)
  op zero : -> Trm{Nat} .

  ---- (declare-func succ (Nat) Nat)
  op succ : Trm{Nat} -> Trm{Nat} [iter] .
  op succ : Trm?{Nat} -> Trm?{Nat} [ditto] .
  op succ : Pattern{Nat} -> Pattern{Nat} [ditto] .

  ---- (declare-func ... () Nat)
  op one : -> Trm{Nat} .
  op two : -> Trm{Nat} .
  op three : -> Trm{Nat} .
  op four : -> Trm{Nat} .
  op five : -> Trm{Nat} .
  op six : -> Trm{Nat} .
  op seven : -> Trm{Nat} .
  op eight : -> Trm{Nat} .
  op nine : -> Trm{Nat} .
  op ten : -> Trm{Nat} .
  eq one = succ(zero) .
  eq two = succ(one) .
  eq three = succ(two) .
  eq four = succ(three) .
  eq five = succ(four) .
  eq six = succ(five) .
  eq seven = succ(six) . 
  eq eight = succ(seven) .
  eq nine = succ(eight) . 
  eq ten = succ(nine) .

  ---- (declare-part pred (Nat) Nat)
  op pred : Trm?{Nat} -> Trm?{Nat} . 
  op pred : Pattern{Nat} -> Pattern{Nat} .

  ---- (declare-func plus (Nat Nat) Nat)
  op plus : Trm{Nat} Trm{Nat} -> Trm{Nat} [assoc comm] .
  op plus : Trm?{Nat} Trm?{Nat} -> Trm?{Nat} [assoc comm] .
  op plus : Pattern{Nat} Pattern{Nat} -> Pattern{Nat} [assoc comm] .

  ---- (declare-func ge (Nat Nat) Bool)
  op gt : Trm{Nat} Trm{Nat} -> Trm{Bol} .
  op gt : Trm?{Nat} Trm?{Nat} -> Trm?{Bol} .
  op gt : Pattern{Nat} Pattern{Nat} -> Pattern{Bol} .

  ---- (declare-func tt () Bol)
  op tt : -> Trm{Bol} .

  ---- (declare-func ff () Bol)
  op ff : -> Trm{Bol} .

  ---- (declare-func epsilon () Seq)
  op epsilon : -> Trm{Seq} .

  ---- (declare-func concat (Seq Seq) Seq)
  op concat : Trm{Seq} Trm{Seq} -> Trm{Seq} [assoc] .
  op concat : Trm?{Seq} Trm?{Seq} -> Trm?{Seq} [assoc] .
  op concat : Pattern{Seq} Pattern{Seq} -> Pattern{Seq} [assoc] .

  --- (declare-func seq<-nat (Nat) Seq)
  op seq<-nat : Trm{Nat} -> Trm{Seq} .
  op seq<-nat : Pattern{Nat} -> Pattern{Seq} .

  ---- (declare-func emp () Map)
  op emp : -> Trm{Map} .

  ---- (declare-part mapsto (Nat Nat) Map)
  op mapsto : Trm?{Nat} Trm?{Nat} -> Trm?{Map} .
  op mapsto : Pattern{Nat} Pattern{Nat} -> Pattern{Map} .

  ---- (declare-part merge (Map Map) Map)
  op merge : Trm?{Map} Trm?{Map} -> Trm?{Map} [assoc comm] .
  op merge : Pattern{Map} Pattern{Map} -> Pattern{Map} [assoc comm] .

  ---- (declare-part mapstoseq (Nat Seq) Map)
  op mapstoseq : Trm?{Nat} Trm?{Seq} -> Trm?{Map} .
  op mapstoseq : Pattern{Nat} Pattern{Seq} -> Pattern{Map} .

  ---- (declare-symb list (Nat Seq) Map) 
  op list : Pattern{Nat} Pattern{Seq} -> Pattern{Map} .

  ---- (declare-func skip () Pgm)
  op skip : -> Trm{Pgm} .
  
  ---- (declare-func asgn (Nat Nat) Pgm)
  op asgn : Trm{Nat} Trm{Nat} -> Trm{Pgm} .
  op asgn : Pattern{Nat} Pattern{Nat} -> Pattern{Pgm} .

  ---- (declare-func ite (Bol, Pgm, Pgm) Pgm)
  op ite : Trm{Bol} Trm{Pgm} Trm{Pgm} -> Trm{Pgm} [frozen(2 3)] .
  op ite : Pattern{Bol} Pattern{Pgm} Pattern{Pgm} -> Pattern{Pgm} [ditto] . 

  ---- (declare-func while (Bol Pgm) Pgm)
  op while : Trm{Bol} Trm{Pgm} -> Trm{Pgm} [frozen(1 2)] .
  op while : Pattern{Bol} Pattern{Pgm} -> Pattern{Pgm} [ditto] .

  ---- (declare-func dereference (Nat) Nat)
  op dereference : Trm{Nat} -> Trm{Nat} . 
  op dereference : Pattern{Nat} -> Pattern{Nat} . 

  ---- (declare-func seqn (Pgm Pgm) Pgm)
  op seq : Trm{Pgm} Trm{Pgm} -> Trm{Pgm} [assoc frozen(2)] .
  op seq : Pattern{Pgm} Pattern{Pgm} -> Pattern{Pgm} [ditto] .

  ---- (declare-func cfg (Pgm Map) Cfg)
  op cfg : Trm{Pgm} Trm{Map} -> Trm{Cfg} .
  op cfg : Pattern{Pgm} Pattern{Map} -> Pattern{Cfg} .

















  ---- Helper functions

  ---- TODO:: Choose better names.
  ---- TODO:: I kind of forget why I ended up
  ----        with using kinds here.

  vars J C : Nat . var D : Int .
  vars P Q Q1 Q2 R : [Pattern] .
  vars #P #Q : [Pattern] . var Z : Int .


  ---- shift function for De Brujin indices.
  ---- shift(P, delta-place, cut-off)

  op shift : Pattern Int Nat -> Pattern [memo] .

  eq shift({Z,Bol}, D, C) = if Z < C then {Z,Bol} else {Z + D,Bol} fi . 
  eq shift({Z,Nat}, D, C) = if Z < C then {Z,Nat} else {Z + D,Nat} fi . 
  eq shift({Z,Seq}, D, C) = if Z < C then {Z,Seq} else {Z + D,Seq} fi . 
  eq shift({Z,Map}, D, C) = if Z < C then {Z,Map} else {Z + D,Map} fi . 
  eq shift({Z,Pgm}, D, C) = if Z < C then {Z,Pgm} else {Z + D,Pgm} fi . 
  eq shift({Z,Cfg}, D, C) = if Z < C then {Z,Cfg} else {Z + D,Cfg} fi . 

  eq shift(P = Q, D, C) = (shift(P, D, C) = shift(Q, D, C)) .
  eq shift(P /\ Q, D, C) = shift(P, D, C) /\ shift(Q, D, C) .
  eq shift(P -> Q, D, C) = shift(P, D, C) -> shift(Q, D, C) .

  eq shift(exists P, D, C) = exists shift(P, D, C + 1) .
  eq shift(forall P, D, C) = forall shift(P, D, C + 1) .
  eq shift(context P, D, C) = context shift(P, D, C + 1) .

  eq shift(zero, D, C) = zero .
  eq shift(succ(P), D, C) = succ(shift(P, D, C)) .
  eq shift(pred(P), D, C) = pred(shift(P, D, C)) .
  eq shift(plus(P, Q), D, C) = plus(shift(P, D, C), shift(Q, D, C)) .
  eq shift(tt, D, C) = tt .
  eq shift(ff, D, C) = ff .
  eq shift(gt(P, Q), D, C) = gt(shift(P, D, C), shift(Q, D, C)) .
  eq shift(concat(P, Q), D, C) = concat(shift(P, D, C), shift(Q, D, C)) .
  eq shift(epsilon, D, C) = epsilon .
  eq shift(emp, D, C) = emp .
  eq shift(seq<-nat(P), D, C) = seq<-nat(shift(P, D, C)) .
  eq shift(mapsto(P, Q), D, C) = mapsto(shift(P, D, C), shift(Q, D, C)) .
  eq shift(mapstoseq(P, Q), D, C) = mapstoseq(shift(P, D, C), shift(Q, D, C)) .
  eq shift(merge(P, Q), D, C) = merge(shift(P, D, C), shift(Q, D, C)) .
  eq shift(list(P, Q), D, C) = list(shift(P, D, C), shift(Q, D, C)) .
  eq shift(skip, D, C) = skip .
  eq shift(asgn(P, Q), D, C) = asgn(shift(P, D, C), shift(Q, D, C)) .
  eq shift(ite(P, Q, R), D, C) = ite(shift(P, D, C), shift(Q, D, C), shift(R, D, C)) .
  eq shift(while(P, Q), D, C) = while(shift(P, D, C), shift(Q, D, C)) .
  eq shift(dereference(P), D, C) = dereference(shift(P, D, C)) .
  eq shift(seq(P, Q), D, C) = seq(shift(P, D, C), shift(Q, D, C)) .
  eq shift(cfg(P, Q), D, C) = cfg(shift(P, D, C), shift(Q, D, C)) .


  ---- substitution
  ---- P[K := Q]

  op _[_:=_] : Pattern Nat Pattern -> Pattern [memo] . 

  eq {Z,Bol}[J := R] = if Z == J then R else {Z,Bol} fi .
  eq {Z,Nat}[J := R] = if Z == J then R else {Z,Nat} fi .
  eq {Z,Seq}[J := R] = if Z == J then R else {Z,Seq} fi .
  eq {Z,Map}[J := R] = if Z == J then R else {Z,Map} fi .
  eq {Z,Pgm}[J := R] = if Z == J then R else {Z,Pgm} fi .
  eq {Z,Cfg}[J := R] = if Z == J then R else {Z,Cfg} fi .

  eq (P = Q) [J := R] = ((P[J := R]) = (Q[J := R])) .
  eq (P -> Q) [J := R] = ((P[J := R]) -> (Q[J := R])) .
  eq (P /\ Q) [J := R] = ((P[J := R]) /\ (Q[J := R])) .

  eq (forall P) [J := R] = forall (P [J + 1 := shift(R, 1, 0)]) .
  eq (exists P) [J := R] = exists (P [J + 1 := shift(R, 1, 0)]) .
  eq (context P) [J := R] = context (P [J + 1 := shift(R, 1, 0)]) .

  eq zero [J := R] = zero .
  eq (succ(P)) [J := R] = succ(P [J := R]) .
  eq (plus(P, Q)) [J := R] = plus(P [J := R], Q [J := R]) .
  eq (pred(P)) [J := R] = pred(P [J := R]) .
  eq (gt(P, Q)) [J := R] = gt(P [J := R], Q [J := R]) .
  eq (seq<-nat(P)) [J := R] = seq<-nat(P [J := R]) .
  eq (concat(P, Q)) [J := R] = concat(P [J := R], Q [J := R]) .
  eq (mapsto(P, Q)) [J := R] = mapsto(P [J := R], Q [J := R]) .
  eq (mapstoseq(P, Q)) [J := R] = mapstoseq(P [J := R], Q [J := R]) .
  eq (merge(P, Q)) [J := R] = merge(P [J := R], Q [J := R]) .
  eq (list(P, Q)) [J := R] = list(P [J := R], Q [J := R]) .
  eq skip [J := R] = skip .
  eq tt [J := R] = tt .
  eq ff [J := R] = ff .
  eq (asgn(P, Q)) [J := R] = asgn(P [J := R], Q [J := R]) .
  eq (ite(P, Q1, Q2)) [J := R] = ite(P [J := R], Q1 [J := R], Q2 [J := R]) .
  eq (while(P, Q)) [J := R] = while(P [J := R], Q [J := R]) .
  eq (dereference(P)) [J := R] = dereference(P [J := R]) .
  eq (seq(P, Q)) [J := R] = seq(P [J := R], Q [J := R]) .
  eq (cfg(P, Q)) [J := R] = cfg(P [J := R], Q [J := R]) .

  ---- instantaneous instantiation
  ---- Unlike _[_], this instantiates applications immediately.

  op _[[_]] : Pattern Pattern -> Pattern [memo] .

  eq (forall P) [[R]] = shift(P[0 := shift(R, 1, 0)], -1, 0) .
  eq (exists P) [[R]] = shift(P[0 := shift(R, 1, 0)], -1, 0) .
  eq (context P) [[R]] = shift(P[0 := shift(R, 1, 0)], -1, 0) .





  ---- Helper functions that help you construct a binding structure.

  ---- Sometimes it is convenient not to use de Brujin indices but
  ---- explicitly stating which variables you want to bind with.
  ---- For example, you want to write
  ----    #exists #forall cfg({-1}, merge({-2}, ...))
  ---- and get
  ----     exists  forall cfg({0},  merge({1},  ...))
  ---- where the "..." has to be shifted up by two.

  ---- Variables with negative indices are place holders.
  ---- The variable {-n} pairs with the nth inner #bindings.

  ---- The following #binding's do this for you.

  op #exists_ : [Pattern] -> [Pattern] [strat(1 0)] . 
  op #forall_ : [Pattern] -> [Pattern] [strat(1 0)] . 
  op #context_ : [Pattern] -> [Pattern] [strat(1 0) memo] . 

  eq #exists #P = exists #shift(#P, 0) .
  eq #forall #P = forall #shift(#P, 0) .
  eq #context #P = context #shift(#P, 0) .

  op #shift : Pattern Nat -> Pattern [memo] .

  eq #shift({-1,Bol}, C) = {C,Bol} . 
  eq #shift({-1,Nat}, C) = {C,Nat} . 
  eq #shift({-1,Seq}, C) = {C,Seq} . 
  eq #shift({-1,Map}, C) = {C,Map} . 
  eq #shift({-1,Pgm}, C) = {C,Pgm} . 
  eq #shift({-1,Cfg}, C) = {C,Cfg} . 

  eq #shift({Z,Bol}, C) = if Z < -1 or C <= Z then {Z + 1,Bol} else {Z,Bol} fi . 
  eq #shift({Z,Nat}, C) = if Z < -1 or C <= Z then {Z + 1,Nat} else {Z,Nat} fi . 
  eq #shift({Z,Seq}, C) = if Z < -1 or C <= Z then {Z + 1,Seq} else {Z,Seq} fi . 
  eq #shift({Z,Map}, C) = if Z < -1 or C <= Z then {Z + 1,Map} else {Z,Map} fi . 
  eq #shift({Z,Pgm}, C) = if Z < -1 or C <= Z then {Z + 1,Pgm} else {Z,Pgm} fi . 
  eq #shift({Z,Cfg}, C) = if Z < -1 or C <= Z then {Z + 1,Cfg} else {Z,Cfg} fi . 

  eq #shift(#P = #Q, C) = (#shift(#P, C) = #shift(#Q, C)) .
  eq #shift(#P /\ #Q, C) = #shift(#P, C) /\ #shift(#Q, C) .
  eq #shift(#P -> #Q, C) = #shift(#P, C) -> #shift(#Q, C) .

  eq #shift(exists #P, C) = exists #shift(#P, C + 1) .
  eq #shift(forall #P, C) = forall #shift(#P, C + 1) .
  eq #shift(context #P, C) = context #shift(#P, C + 1) .

  eq #shift(zero, C) = zero .
  eq #shift(succ(#P), C) = succ(#shift(#P, C)) .
  eq #shift(pred(#P), C) = pred(#shift(#P, C)) .
  eq #shift(plus(#P, #Q), C) = plus(#shift(#P, C), #shift(#Q, C)) .
  eq #shift(tt, C) = tt .
  eq #shift(ff, C) = ff .
  eq #shift(gt(#P, #Q), C) = gt(#shift(#P, C), #shift(#Q, C)) .
  eq #shift(concat(#P, #Q), C) = concat(#shift(#P, C), #shift(#Q, C)) .
  eq #shift(epsilon, C) = epsilon .
  eq #shift(emp, C) = emp .
  eq #shift(seq<-nat(#P), C) = seq<-nat(#shift(#P, C)) .
  eq #shift(mapsto(#P, #Q), C) = mapsto(#shift(#P, C), #shift(#Q, C)) .
  eq #shift(mapstoseq(#P, #Q), C) = mapstoseq(#shift(#P, C), #shift(#Q, C)) .
  eq #shift(merge(#P, #Q), C) = merge(#shift(#P, C), #shift(#Q, C)) .
  eq #shift(list(#P, #Q), C) = list(#shift(#P, C), #shift(#Q, C)) .
  eq #shift(skip, C) = skip .
  eq #shift(asgn(#P, #Q), C) = asgn(#shift(#P, C), #shift(#Q, C)) .
  eq #shift(ite(#P, #Q, R), C) = ite(#shift(#P, C), #shift(#Q, C), #shift(R, C)) .
  eq #shift(while(#P, #Q), C) = while(#shift(#P, C), #shift(#Q, C)) .
  eq #shift(dereference(#P), C) = dereference(#shift(#P, C)) .
  eq #shift(seq(#P, #Q), C) = seq(#shift(#P, C), #shift(#Q, C)) .
  eq #shift(cfg(#P, #Q), C) = cfg(#shift(#P, C), #shift(#Q, C)) .


endfm

