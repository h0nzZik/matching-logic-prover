(declare-sort GTyp)
(declare-sort Record)
(declare-sort Map)

;GTyp constants
(declare-func x () GTyp)
(declare-func y () GTyp)
(declare-func z () GTyp)

(declare-func nil () GTyp)

;distinct : a syntactic sugar
;distinct(x y) = (not (= x y))

;Field name
(declare-func f0 (GTyp) Record)
(declare-func f1 (GTyp) Record)

;Record
;(declare-func ref (Record) Record)

;Union
(declare-part uni (Record Record) Record)

; Maps
(declare-func emp () Map)

; x |-> y
(declare-part pto (GTyp Record) Map)

; nil |-> y is bottom
(assert (forall ((x Record))
  (not (pto nil x))))

; ssep is separating conjunction
(declare-part ssep (Map Map) Map)

; commutativity
(assert (forall ((h1 Map) (h2 Map))
  (= (ssep h1 h2) (ssep h2 h1))))

; associativity
(assert (forall ((h1 Map) (h2 Map) (h3 Map))
  (= (ssep (ssep h1 h2) h3)
     (ssep h1 (ssep h2 h3)))))

; identity
(assert (forall ((h Map))
  (= h (ssep h emp))))

; x |-> y * x |-> z = bottom
(assert (forall ((x GTyp) (y Record) (z Record))
  (not (ssep (pto x y) (pto x z)))))

;(f0 x) U (f0 y) = bottom
(assert (forall ((x GTyp) (y GTyp))
  (not (uni (f0 x) (f0 y)))))

;(f1 x) U (f1 y) = bottom
(assert (forall ((x GTyp) (y GTyp))
  (not (uni (f1 x) (f1 y)))))

; commutativity
(assert (forall ((r1 Record) (r2 Record))
  (= (uni r1 r2) (uni r2 r1))))

; associativity
(assert (forall ((r1 Record) (r2 Record) (r3 Record))
  (= (uni (uni r1 r2) r3)
     (uni r1 (uni r2 r3)))))

;List
(declare-func List  (GTyp GTyp) Map)
(assert (forall ((x GTyp)(y GTyp)) 
 (or (and (not (= nil x)) (pto x (f0 y)))
     (exists ((xp GTyp)) (and (not (= xp nil))
                              (ssep (pto x (f0 xp)) (List  xp y))))
 )
))
(assert  (not (floor
 
(ssep
        (List x y)
        (List y z)
  ))))

(assert  (not (floor
(not 

        (List x z)
))))