--- This module provides a full grammar for the formal language of matching logic.
--- Last update by Xiaohong on 30 Jan 2016.

load substitution . --- load the generic substitution module.

--- Q : What does this module provide?
--- A : The full grammar of the formal language of matching logic, including
   ---  alpha-equivalence checking : P =a= Q
   ---- closed-form checking : P is-closed-form
   ---- free-occur checking : X occur-free-in P        

fmod ML-SYNTAX is

--- resolve naming conflicts
  including PL-GENERIC-SUBSTITUTION * 
    ( op fv_ to PL-FV_ , 
      op _,_ to _PL-COMMA_,
      sort Sort to PL-Sort ) .

--- The sort Var stands for matching logic variables, and it takes Qid as its
--- subsorts, so all quoted variables are available to use when one writes
--- matching logic patterns.
  sort Var . subsort Id < Var .

--- The sort Symbol stands for matching logic symbols. 
--- The sort Pattern stands for matching logic patterns,
--- and the sort PatternList stands for comma-separated pattern lists.
  sorts Symbol Pattern PatternList .
  subsort Pattern < PatternList .
  op .PatternList : -> PatternList . --- the empty list of patterns
  op _,_ : PatternList PatternList -> PatternList
    [assoc id: .PatternList prec 77] . --- the list constructor has a higher
                                       --- precedence than logical connectives
  op length : PatternList -> Int .
  eq length(.PatternList) = 0 .
  eq length(P, Ps) = 1 +Int length(Ps) .

--- full grammar of the formal language for matching logic
--- listed by precedence from tighter-binding to looser-binding. 
  subsort Var < Pattern .  --- x
  op _() : Symbol -> Pattern [ctor prec 55] .  --- s()
  op _(_) : Symbol PatternList -> Pattern [ctor prec 55] . --- s(P1,...,Pn)
  op _in_ : Var Pattern -> Pattern [ctor prec 61] . --- x in P (membership)
  op ~_ : Pattern -> Pattern [ctor prec 62] . --- negation of P
  op _/\_ : Pattern Pattern -> Pattern [ctor comm gather (E e) prec 63] .
  op _\/_ : Pattern Pattern -> Pattern [ctor comm gather (E e) prec 64] .
  op _->_ : Pattern Pattern -> Pattern [ctor gather (e E) prec 65] .
  op _=_ : Pattern Pattern -> Pattern [ctor comm prec 66] .
  op _=>_ : Pattern Pattern -> Pattern [ctor prec 66] . --- reachability (not used)
  op exists_._ : Var Pattern -> Pattern [ctor prec 60] . --- exists x . P
  op forall_._ : Var Pattern -> Pattern [ctor prec 60] . --- forall x . P
  ops bot top : -> Pattern [ctor] . --- bottom and top
  ops floor ceil : -> Symbol [ctor] . --- defineness and totality symbols

  eq F(.PatternList) = F() .

--- substitution : P [ Q / X ] 
  op _[_/_] : Pattern Pattern Var -> Pattern [prec 75].

--- fit in generic substitution framework
  subsort Pattern < GenericTerm .
  --- exists and forall bind at the first position.
  eq bind('exists_._) = 1 . eq bind('forall_._) = 1 .
  var V : Var .  vars P Q : Pattern .
  eq P [Q / V] = substitute (P, Q, V) . --- set up substitution

--- support for free variable collecting
--- we use wierd names to prevent unintentious naming conflicts.
  sort VarSet . subsort Var < VarSet .
  op .VarSet : -> VarSet . --- empty set of variables
  op __ : VarSet VarSet -> VarSet [comm assoc id: .VarSet] .
  op delete_from_ : Var VarSet -> VarSet . --- delete Var from VarSet
  op _is-in_ : Var VarSet -> Bool .
  op _is-empty : VarSet -> Bool .



--- VarSet does not allow duplicated elements
--- {X , ...} U {X , ...} = {X} U {...} U {...}
  var X : Var . vars S S1 S2 : VarSet .
  eq (X S1) (X S2) = (X S1 S2) .
--- delete X from {X ...} = {...} .
  eq delete X from (X S) = delete X from S .
  eq delete X from S = S [owise] .
--- X is-in {X ...} = true .
  eq X is-in (X S) = true .
  eq X in S = false [owise] .
--- S is empty iff S is the empty set
  eq .VarSet is-empty = true .
  eq S is-empty = false [owise] .

--- alpha-equivalent checking
  op _=a=_ : Pattern Pattern -> Bool [comm prec 80] . 
--- closed-form checking
  op _is-closed-pattern : Pattern -> Bool [prec 80] .
--- free-occur checking
  op fv : Pattern -> VarSet .
  op _occur-free-in_ : Var Pattern -> Bool [prec 80] .
  op _not-occur-free-in_ : Var Pattern -> Bool [prec 80] .
  
---(
  --- this shows an example of how to use metalevel.
  op myfv_ : Pattern -> ConstantSet .
  var QE : MetaTerm .
  ceq myfv P = fv QE 
  if QE := upTerm(P) .
)---

  var Y : Var .
  vars P1 P2 Q1 Q2 : Pattern .
  vars F : Symbol .
  vars Ps Qs : PatternList .

--- free variables collecting
  eq fv(X) = X .
  eq fv(~ P) = fv(P) .
  eq fv(P1 -> P2) = fv(P1) fv(P2) .
  eq fv(P1 /\ P2) = fv(P1) fv(P2) .
  eq fv(P1 \/ P2) = fv(P1) fv(P2) .
  eq fv(P1 = P2) = fv(P1) fv(P2) .
  eq fv(P1 => P2) = fv(P1) fv(P2) .
  eq fv(F()) = .VarSet .
  eq fv(F(P)) = fv(P) .
  eq fv(F(P, Ps)) = fv(P) fv(F(Ps)) .
  eq fv(forall X . P) = delete X from fv(P) .
  eq fv(exists X . P) = delete X from fv(P) .
  eq fv(X in P) = X fv(P) .
  eq fv(bot) = .VarSet .
  eq fv(top) = .VarSet .
--- for any user-defined patterns (which we do not recommended adding new
--- new patterns to the grammar), fv(P) is the empty set. 
--- eq fv(P) = .VarSet [owise] .

--- alpha equivalent checking
  eq P =a= P = true .
  eq ( ~ P =a= ~ Q ) = ( P =a= Q ) .
  eq ( P1 -> P2 =a= Q1 -> Q2 ) = ( P1 =a= Q1 ) andBool ( P2 =a= Q2 ) .
  eq ( P1 /\ P2 =a= Q1 /\ Q2 ) = ( P1 =a= Q1 ) andBool ( P2 =a= Q2 ) .
  eq ( P1 \/ P2 =a= Q1 \/ Q2 ) = ( P1 =a= Q1 ) andBool ( P2 =a= Q2 ) .
  eq ( P1 = P2 =a= Q1 = Q2 )   = ( P1 =a= Q1 ) andBool ( P2 =a= Q2 ) .
  eq ( P1 => P2 =a= Q1 => Q2 ) = ( P1 =a= Q1 ) andBool ( P2 =a= Q2 ) .
  eq ( F() =a= F() ) = true .
  eq ( F(P) =a= F(Q) ) = ( P =a= Q ) .
  eq ( F(P, Ps) =a= F(Q, Qs) ) = ( P =a= Q ) andBool ( F(Ps) =a= F(Qs) ) .
  eq ( exists X . P =a= exists Y . Q ) = ( P =a= Q [ X / Y ] ) .
  eq ( forall X . P =a= forall Y . Q ) = ( P =a= Q [ X / Y ] ) .  
  eq ( X in P =a= X in Q ) = ( P =a= Q ) .
  eq P =a= Q = false [owise] .

--- closed-form checking
  eq P is-closed-pattern = fv(P) is-empty .
  eq X occur-free-in P = X is-in fv(P) .
  eq X not-occur-free-in P = notBool (X occur-free-in P) .
  
--- The Sorting Information
--- ML-Sort is a lattice with one topsort and one botsort,
--- and all user-defined sorts lying in between:
--- Example:
---           topsort
---   Bool   Nat   Seq   Map   ...
---           botsort

--- NeSortList stands for "nonempty sort lists"
  sort Sort SortList NeSortList .   ops topsort botsort : -> Sort [ctor] .
  subsorts Sort < NeSortList < SortList .
  op .SortList : -> SortList [ctor] .
--- Use operator overloading to "describe" NeSortList .
--- This is a common trick in maude: see Maude Manual if one
--- feels unconfortable with it.
  op _,_ : SortList SortList -> SortList [ctor assoc id: .SortList] .
  op _,_ : NeSortList SortList -> NeSortList [ctor ditto] .
  op _,_ : SortList NeSortList -> NeSortList [ctor ditto] .
  op length : SortList -> Int .
  eq length(.SortList) = 0 .
  eq length(S:Sort, Ss:SortList) = 1 +Int length(Ss:SortList) .
  
  op minsort : NeSortList -> Sort .
  eq minsort(S:Sort) = S:Sort .
  eq minsort(botsort, S:Sort) = botsort .
  eq minsort(S:Sort, botsort) = botsort .
  eq minsort(topsort, S:Sort) = S:Sort .
  eq minsort(S:Sort, topsort) = S:Sort .
  eq minsort(S:Sort, S:Sort) = S:Sort .
  eq minsort(S1:Sort, S2:Sort) = botsort [owise] .
  eq minsort(S1:Sort, S2:Sort, Ss:NeSortList) =
       minsort(minsort(S1:Sort, S2:Sort), Ss:NeSortList) .

  op getSort : Pattern -> Sort .
  op ceil : Sort -> Sort .
  eq ceil(botsort) = botsort .
  eq ceil(S:Sort) = topsort [owise] .

--- A variable is of sort "topsort" by default, 
--- unless users declares them to be of a specific sort,
--- by writing "eq getSort('myNatVar) = Nat .".
--- NOTE: this may cause problems. For example, let f : Map -> Nat
--- and g : Seq -> Nat be two symbols in matching logic. Then
--- plus(f('x), g('x)) will be of sort Nat, which it shouldn't be.
  eq getSort(X:Var) = topsort [owise] . 
  eq getSort(~ P) = getSort(P) .
  eq getSort(P1 /\ P2) = minsort(getSort(P1), getSort(P2)) .
  eq getSort(P1 \/ P2) = minsort(getSort(P1), getSort(P2)) .
  eq getSort(P1 -> P2) = minsort(getSort(P1), getSort(P2)) .
  eq getSort(P1 = P2) = ceil(minsort(getSort(P1), getSort(P2))) .
  eq getSort(forall X . P) = getSort(P) .
  eq getSort(exists X . P) = getSort(P) .
  eq getSort(X in P) = ceil(minsort(getSort(X), getSort(P))) .
  eq getSort(bot) = topsort .
  eq getSort(top) = topsort .

--- type information for symbols
  op getDomainSort : Symbol -> SortList .
  op getCodomainSort : Symbol -> Sort .

--- What is the sort of F(P1, ... ,Pn)?
---         P1 , ... , Pn
--- goes to S1 , ... , Sn where Si = getSort(Pi)
--- goes to ... minsort(Si, getDomainSort(F)_i) ... 
--- goes to botsort if there is a botsort in the list
--- owise getCodomainSort(F)
  op map-getSort : PatternList -> SortList . --- map(getSort, ...)
  op dmap-minsort : SortList SortList -> SortList . --- doublemap(minsort, ...)
  op has-a-botsort : SortList -> Bool .
  op well-sorted-symbol-application : Pattern -> Bool .
  eq well-sorted-symbol-application(F(Ps)) = 
  length(getDomainSort(F)) ==Bool length(Ps)
  andBool notBool has-a-botsort(dmap-minsort(map-getSort(Ps), getDomainSort(F))) .

  ceq getSort(F(Ps)) = getCodomainSort(F) if well-sorted-symbol-application(F(Ps)) .
  eq getSort(F(Ps)) = botsort [owise] .

  eq map-getSort(.PatternList) = .SortList .
  eq map-getSort(P, Ps) = getSort(P), map-getSort(Ps) .
  eq dmap-minsort(.SortList, .SortList) = .SortList .
  eq dmap-minsort((S1:Sort, Ss1:SortList),
                  (S2:Sort, Ss2:SortList)) =
     minsort(S1:Sort, S2:Sort), dmap-minsort(Ss1:SortList, Ss2:SortList) .
  eq has-a-botsort(.SortList) = false .
  eq has-a-botsort(botsort, Ss:SortList) = true .
  eq has-a-botsort(S:Sort, Ss:SortList) = has-a-botsort(Ss:SortList) [owise] .

--- User defined part: should be moved out of this file!
  ops Bol Nat Seq Map : -> Sort [ctor] .

--- Nat is a built-in domain, and reasoning for Nat is supported by Z3.
  ops zero one two three four five six seven eight nine ten : -> Symbol .
  eq getDomainSort(zero) = .SortList . eq getCodomainSort(zero) = Nat .
  eq getDomainSort(two) = .SortList . eq getCodomainSort(two) = Nat .
  eq getDomainSort(three) = .SortList . eq getCodomainSort(three) = Nat .
  eq getDomainSort(four) = .SortList . eq getCodomainSort(four) = Nat .
  eq getDomainSort(five) = .SortList . eq getCodomainSort(five) = Nat .
  eq getDomainSort(six) = .SortList . eq getCodomainSort(six) = Nat .
  eq getDomainSort(seven) = .SortList . eq getCodomainSort(seven) = Nat .
  eq getDomainSort(eight) = .SortList . eq getCodomainSort(eight) = Nat .
  eq getDomainSort(nine) = .SortList . eq getCodomainSort(nine) = Nat .
  eq getDomainSort(ten) = .SortList . eq getCodomainSort(ten) = Nat .

  ops succ plus : -> Symbol .
  eq getDomainSort(succ) = Nat . eq getCodomainSort(succ) = Nat . 
  eq getDomainSort(plus) = Nat, Nat .
  eq getCodomainSort(plus) = Nat .

--- Seq
  ops epsilon concat Nat2Seq : -> Symbol .
  eq getDomainSort(epsilon) = .SortList . eq getCodomainSort(epsilon) = Seq .
  eq getDomainSort(concat) = Seq, Seq . eq getCodomainSort(concat) = Seq .
  eq getDomainSort(Nat2Seq) = Nat . eq getCodomainSort(Nat2Seq) = Seq .

--- Map
  ops mapsto mapstoseq emp merge list : -> Symbol .
  eq getDomainSort(mapsto) = Nat, Nat . eq getCodomainSort(mapsto) = Map .
  eq getDomainSort(mapstoseq) = Nat, Seq . eq getCodomainSort(mapstoseq) = Map .
  eq getDomainSort(emp) = .SortList . eq getCodomainSort(emp) = Map .
  eq getDomainSort(merge) = Map, Map . eq getCodomainSort(merge) = Map .
  eq getDomainSort(list) = Nat, Seq . eq getCodomainSort(list) = Map .

--- Variable-in-sort
--- --- Nat
  eq getSort('x) = Nat .  eq getSort('y) = Nat .  eq getSort('z) = Nat .
  eq getSort('x1) = Nat .  eq getSort('y1) = Nat .  eq getSort('z1) = Nat .
  eq getSort('x2) = Nat .  eq getSort('y2) = Nat .  eq getSort('z2) = Nat .
--- --- Seq
  eq getSort('S) = Seq . eq getSort('S1) = Seq . eq getSort('S2) = Seq .
  eq getSort('T) = Seq . eq getSort('T1) = Seq . eq getSort('T2) = Seq .
--- --- Map
  eq getSort('H) = Map . eq getSort('H1) = Map . eq getSort('H2) = Map . 

endfm

quit
