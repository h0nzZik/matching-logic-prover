--- This module provides a full grammar for the formal language of matching logic.
--- Last update by Xiaohong on 05 Jan 2016.

--- load generic substitution module.
load substitution .

--- ML-SYNTAX        syntax of matching logic pattern with
   ---                  alpha-equivalence checking : P =a= Q
   ---                  closed-form checking : P is-closed-form
   ---                  free-occur checking : X occur-free-in P
fmod ML-SYNTAX is

--- resolve naming conflicts
  including PL-GENERIC-SUBSTITUTION * ( op _,_ to _PL-COMMA_ ,
                                        op fv_ to PL-FV_ ) .

  sorts Pattern{Bool} Pattern{Nat} Pattern{Seq} Pattern{Map} .
  sort Pattern . subsort Pattern{Bool} Pattern{Nat} Pattern{Seq} Pattern{Map} < Pattern .

--- full grammar of the formal language for matching logic
--- listed by precedence from higher to lower
  --- variables for all matching logic sorts
  sorts ML-Bool ML-Nat ML-Seq ML-Map .
  op _:_ : Id ML-Bool -> Pattern{Bool} .
  op _:_ : Id ML-Nat -> Pattern{Nat} .
  op _:_ : Id ML-Seq -> Pattern{Seq} .
  op _:_ : Id ML-Map -> Pattern{Map} .

  op E_._ : Var Pattern -> Pattern [ctor prec 31] . --- exists x . P
  op A_._ : Var Pattern -> Pattern [ctor prec 31] . --- forall x . P
  op _in_ : Var Pattern -> Pattern [ctor prec 31] . --- x in P (membership)
  op ~_ : Pattern -> Pattern [ctor prec 32] . --- negation of P
  op _/\_ : Pattern Pattern -> Pattern [ctor comm gather (E e) prec 33] .
  op _\/_ : Pattern Pattern -> Pattern [ctor comm gather (E e) prec 34] .
  op _->_ : Pattern Pattern -> Pattern [ctor gather (e E) prec 35] .
  op _=_ : Pattern Pattern -> Pattern [ctor comm prec 36] .
  op _=>_ : Pattern Pattern -> Pattern [ctor prec 36] . --- reachability (not used)
  ops bot top : -> Pattern [ctor] . --- bottom and top

endfm

quit

  op .PatternList : -> PatternList . --- the empty list
  op _,_ : PatternList PatternList -> PatternList [assoc id: .PatternList format(d d s d) prec 37] .



--- substitution : P [ Q / X ] 
  op _[_/_] : Pattern Pattern Var -> Pattern [prec 36].

--- fit in generic substitution framework
  subsort Id < Var .  subsort Pattern < GenericTerm .
  eq bind('E_._) = 1 . eq bind('A_._) = 1 . --- set up binder
  var V : Var .  vars P Q : Pattern .
  eq P [Q / V] = substitute (P, Q, V) . --- set up substitution

--- support for free variable collecting
--- internal sort and ops are carefully named to prevent unintentional conflict
  sort ML-ALPHA-VarSet .
  subsort Var < ML-ALPHA-VarSet .
  op ML-ALPHA-emptyset : -> ML-ALPHA-VarSet .
  op ML-ALPHA-union__ : ML-ALPHA-VarSet ML-ALPHA-VarSet -> ML-ALPHA-VarSet [comm assoc id: ML-ALPHA-emptyset] .
  op ML-ALPHA-delete__ : ML-ALPHA-VarSet Var -> ML-ALPHA-VarSet . --- delete Var from VarSet
  op _ML-ALPHA-in_ : Var ML-ALPHA-VarSet -> Bool .
  op _ML-ALPHA-is-empty : ML-ALPHA-VarSet -> Bool .
  op ML-ALPHA-fv_ : Pattern -> ML-ALPHA-VarSet .

--- alpha-equivalent checking
  op _=a=_ : Pattern Pattern -> Bool [comm prec 50] . 
--- closed-form checking
  op _is-closed-pattern : Pattern -> Bool [prec 50] .
--- free-occur checking
  op _occur-free-in_ : Var Pattern -> Bool [prec 50] .
  op _not-occur-free-in_ : Var Pattern -> Bool [prec 50] .

  vars X Y : Var .
  vars P1 P2 Q1 Q2 : Pattern .
  vars F : Symbol .
  vars Ps Qs : PatternList .
  vars S S1 S2 : ML-ALPHA-VarSet .

--- VarSet does not have duplicated variables
--- {X , ...} U {X , ...} = {X} U {...} U {...}
  eq ML-ALPHA-union (ML-ALPHA-union X S1) (ML-ALPHA-union X S2) = (ML-ALPHA-union X (ML-ALPHA-union S1 S2)) .
--- {X , ...} \ {X} = {...} .
  eq ML-ALPHA-delete (ML-ALPHA-union X S) X = S .
  eq ML-ALPHA-delete S X = S [owise] .
  eq X ML-ALPHA-in (ML-ALPHA-union X S) = true .
  eq X ML-ALPHA-in S = false [owise] .
--- S is empty iff S is the empty set
  eq ML-ALPHA-emptyset ML-ALPHA-is-empty = true .
  eq S ML-ALPHA-is-empty = false [owise] .

  eq ML-ALPHA-fv X = X .
  eq ML-ALPHA-fv (~ P) = ML-ALPHA-fv P .
  eq ML-ALPHA-fv (P1 -> P2) = ML-ALPHA-union (ML-ALPHA-fv P1) (ML-ALPHA-fv P2) .
  eq ML-ALPHA-fv (P1 /\ P2) = ML-ALPHA-union (ML-ALPHA-fv P1) (ML-ALPHA-fv P2) .
  eq ML-ALPHA-fv (P1 \/ P2) = ML-ALPHA-union (ML-ALPHA-fv P1) (ML-ALPHA-fv P2) .
  eq ML-ALPHA-fv (P1 = P2) = ML-ALPHA-union (ML-ALPHA-fv P1) (ML-ALPHA-fv P2) .
  eq ML-ALPHA-fv (P1 => P2) = ML-ALPHA-union (ML-ALPHA-fv P1) (ML-ALPHA-fv P2) .
  eq ML-ALPHA-fv (F()) = ML-ALPHA-emptyset .
  eq ML-ALPHA-fv (F(P)) = ML-ALPHA-fv P .
  eq ML-ALPHA-fv (F(P, Ps)) = ML-ALPHA-union (ML-ALPHA-fv P) (ML-ALPHA-fv (F(Ps))) .
  eq ML-ALPHA-fv (A X . P) = ML-ALPHA-delete (ML-ALPHA-fv P) X .
  eq ML-ALPHA-fv (E X . P) = ML-ALPHA-delete (ML-ALPHA-fv P) X .
  eq ML-ALPHA-fv (X in P) = ML-ALPHA-union X (ML-ALPHA-fv P) .
  eq ML-ALPHA-fv P = ML-ALPHA-emptyset [owise] . --- if P contains some use-defined things then P is closed by assumption. This is dangerous and should be solved in meta level.

  eq P =a= P = true .
  eq (~ P =a= ~ Q) = (P =a= Q) .
  eq ( P1 -> P2 =a= Q1 -> Q2 ) = ( P1 =a= Q1 andBool P2 =a= Q2 ) .
  eq ( P1 /\ P2 =a= Q1 /\ Q2 ) = ( P1 =a= Q1 andBool P2 =a= Q2 ) .
  eq ( P1 \/ P2 =a= Q1 \/ Q2 ) = ( P1 =a= Q1 andBool P2 =a= Q2 ) .
  eq ( P1 = P2 =a= Q1 = Q2 )   = ( P1 =a= Q1 andBool P2 =a= Q2 ) .
  eq ( P1 => P2 =a= Q1 => Q2 ) = ( P1 =a= Q1 andBool P2 =a= Q2 ) .
  eq ( F() =a= F() ) = true .
  eq ( F(P) =a= F(Q) ) = (P =a= Q) .
--- Warning: this may break if we distinguish symbols with different arity
  eq ( F(P, Ps) =a= F(Q, Qs) ) = ( P =a= Q andBool F(Ps) =a= F(Qs) ) .
  eq ( E X . P =a= E Y . Q ) = ( P =a= Q [ X / Y ] ) .
  eq ( A X . P =a= A Y . Q ) = ( P =a= Q [ X / Y ] ) .  
  eq ( X in P =a= X in Q ) = ( P =a= Q ) .
  eq P =a= Q = false [owise] .

  eq P is-closed-pattern = ((ML-ALPHA-fv P) ML-ALPHA-is-empty) .
  eq X occur-free-in P = (X ML-ALPHA-in (ML-ALPHA-fv P)) .
  eq X not-occur-free-in P = notBool (X occur-free-in P) .

endfm

