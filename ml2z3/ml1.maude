--- many-sorted matching logic.
fmod ML is
  including QID .

--- list of abbrev.
--- Var    | matching logic variable
--- VarSet | set of variables
--- Pat    | pattern
--- PatLst | list of patterns
--- Sym    | matching logic symbol
--- Sot    | matching logic sort
--- SotLst | list of sorts
  sorts Var VarSet Pat PatLst Sot SotLst Sym .

--- a quoted identifier with its sort forms a variable.
  op _:_ : Qid Sot -> Var [ctor prec 50] .
  subsort Var < VarSet . op .VarSet : -> VarSet .
  op __ : VarSet VarSet -> VarSet [assoc comm id: .VarSet prec 80] . --- set union
  eq X:Var X:Var = X:Var .
  op _\_ : VarSet Var -> VarSet [prec 85] . --- set minus an element
  eq X:Var Xs:VarSet \ X:Var = Xs:VarSet .
  eq Xs:VarSet \ X:Var = Xs:VarSet [owise] .

--- comma-separated lists of sorts and patterns.
  subsort Sot < SotLst . op .SotLst : -> SotLst .
  op _,_ : SotLst SotLst -> SotLst [assoc id: .SotLst prec 80] .
  subsort Pat < PatLst . op .PatLst : -> PatLst .
  op _,_ : PatLst PatLst -> PatLst [assoc id: .PatLst prec 80] .

--- sorting infrastructure
--- a symbol has its domain sorts and a range sort.
  op getDomSotLst : Sym -> SotLst .  op getRanSot : Sym -> Sot .

--- a pattern has a sort.
--- a list of patterns has, of course, a list of sorts.
--- a set of (same-sorted) patterns has, though, just one sort. 
  op getSot : Pat -> Sot .
  op getSot : PatLst -> SotLst . 
  eq getSot(.PatLst) = .SotLst .
  eq getSot(P:Pat, Ps:PatLst) = getSot(P:Pat), getSot(Ps:PatLst) .

--- all kinds of patterns, with their sorts and simplification equations.
--- 1) variable
  subsort Var < Pat .
  eq getSot(ID:Qid : S:Sot) = S:Sot .
--- 2) top and bottom
  op top{_} : Sot -> Pat [ctor] . op bot{_} : Sot -> Pat [ctor] .
  eq getSot(top{S:Sot}) = S:Sot . eq getSot(bot{S:Sot}) = S:Sot .
--- 3) conjunction
  op /\ : PatLst -> Pat .
  eq getSot(/\(P:Pat, Ps:PatLst)) = getSot(P:Pat) .
  eq /\(P:Pat) = P:Pat .
  eq /\(Ps:PatLst, bot{S:Sot}, Qs:PatLst) = bot{S:Sot} .
  eq /\(Ps1:PatLst, P:Pat, Ps2:PatLst, P:Pat, Ps3:PatLst) =
     /\(Ps1:PatLst, P:Pat, Ps2:PatLst, Ps3:PatLst) .
  eq /\(Ps1:PatLst, top{S:Sot}, Ps2:PatLst, P:Pat, Ps3:PatLst) =
     /\(Ps1:PatLst, Ps2:PatLst, P:Pat, Ps3:PatLst) .
  eq /\(Ps1:PatLst, P:Pat, Ps2:PatLst, top{S:Sot}, Ps3:PatLst) =
     /\(Ps1:PatLst, Ps2:PatLst, P:Pat, Ps3:PatLst) .
endfm

