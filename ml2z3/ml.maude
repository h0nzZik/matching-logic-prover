--- many-sorted matching logic.

fmod ML is
  including QID .

--- list of abbrev.
--- Var    | matching logic variable
--- VarSet | set of variables
--- Pat    | pattern
--- PatLst | list of patterns
--- Sym    | matching logic symbol
--- Sot    | matching logic sort
--- SotLst | list of sorts
  sorts Var VarSet VarLst Pat PatLst Sym Sot SotLst .

--- A quoted identifier with its sort forms a variable.
  op _:_ : Qid Sot -> Var [ctor prec 50] .
  subsort Var < VarSet . op .VarSet : -> VarSet .
  op __ : VarSet VarSet -> VarSet [assoc comm id: .VarSet prec 80] . --- set union
  eq X:Var X:Var = X:Var .
  op _\_ : VarSet Var -> VarSet [prec 85] . --- set minus an element
  eq X:Var Xs:VarSet \ X:Var = Xs:VarSet .
  eq Xs:VarSet \ X:Var = Xs:VarSet [owise] .


--- A comma-separated list of sorts, with .SotLst as the empty list.
  subsort Sot < SotLst . op .SotLst : -> SotLst .
  op _,_ : SotLst SotLst -> SotLst [assoc id: .SotLst prec 80] .

--- A comma-separated list of patterns, with .PatLst as the empty list.
  subsort Pat < PatLst . op .PatLst : -> PatLst .
  op _,_ : PatLst PatLst -> PatLst [assoc id: .PatLst prec 80] .

  --- A symbol has its domain sorts and range sort.
  op domSorts : Sym -> SotLst .
  op ranSort : Sym -> Sot .

  --- A pattern has a sort.
  op getSort : PatLst -> SotLst .
  eq getSort(.PatLst) = .SotLst .
  eq getSort(P:Pat, Ps:PatLst) = getSort(P:Pat), getSort(Ps:PatLst) [owise] .

  --- The grammar for patterns.
  subsort Var < Pat .
     eq getSort(ID:Qid : S:Sot) = S:Sot .

  op _/\_ : Pat Pat -> Pat [assoc comm prec 60] .
     ceq getSort(P:Pat /\ Q:Pat) = getSort(P:Pat) 
     if getSort(P:Pat) == getSort(Q:Pat) .
  
  op _\/_ : Pat Pat -> Pat [assoc comm prec 65] .
     ceq getSort(P:Pat /\ Q:Pat) = getSort(P:Pat) 
     if getSort(P:Pat) == getSort(Q:Pat) .

  op ~_ : Pat -> Pat [prec 55].
     eq getSort(~ P:Pat) = getSort(P:Pat) .

  op _->_ : Pat Pat -> Pat [prec 70] .
     ceq getSort(P:Pat /\ Q:Pat) = getSort(P:Pat) 
     if getSort(P:Pat) == getSort(Q:Pat) .

  op exists_._ : Var Pat -> Pat [prec 50] .
     eq getSort(exists X:Var . P:Pat) = getSort(P:Pat) .

  op forall_._ : Var Pat -> Pat [prec 50] .
     eq getSort(forall X:Var . P:Pat) = getSort(P:Pat) .

  op _={_}_ : Pat Sot Pat -> Pat [prec 57] . 
     ceq getSort(P:Pat ={S:Sot} Q:Pat) = S:Sot
     if getSort(P:Pat) == getSort(Q:Pat) .

  op _(_) : Sym PatLst -> Pat [prec 50] .
     ceq getSort(F:Sym(Ps:PatLst)) = ranSort(F:Sym)
     if getSort(Ps:PatLst) == domSorts(F:Sym) .
  --- syntactic sugar for constant symbols.
  op _() : Sym -> Pat . eq F:Sym() = F:Sym(.PatLst) .
  
endfm

reduce 'x : S:Sot 'y : T:Sot \ 'y : T:Sot .

quit